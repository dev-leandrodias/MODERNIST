{"cells":[{"cell_type":"markdown","metadata":{"id":"EKOTlwcmxmej"},"source":["# Selecionando sentenças dos originais\n","\n","Realiza a seleção de sentenças que possuem as palavras chaves os arquivos:\n","\n","- `original.zip`\n","- `originalpos.zip`\n","\n","Gera o arquivo:\n","\n","- `original_filtrado.zip`"]},{"cell_type":"markdown","metadata":{"id":"OP33KWAtBMWs"},"source":["# 1 Preparação do ambiente\n","\n","Preparação do ambiente para execução do script."]},{"cell_type":"markdown","metadata":{"id":"PKUr9Vk4BNLC"},"source":["## 1.1 Tempo inicial de processamento"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JXclHCRQBSF2"},"outputs":[],"source":["# Import das bibliotecas.\n","import time\n","import datetime\n","\n","# Marca o tempo de início do processamento\n","inicio_processamento = time.time()"]},{"cell_type":"markdown","metadata":{"id":"GOcN8hK-scnt"},"source":["## 1.2 Funções e classes auxiliares"]},{"cell_type":"markdown","metadata":{"id":"OPRnA-mk5-c4"},"source":["Verifica se existe o diretório cohebert no diretório corrente.   \n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Fj5TaAH_5-nB"},"outputs":[],"source":["# Import das bibliotecas.\n","import os # Biblioteca para manipular arquivos\n","\n","# ============================  \n","def verificaDiretorioCoheBERT():\n","    \"\"\"\n","      Verifica se existe o diretório cohebert no diretório corrente.    \n","    \"\"\"\n","    \n","    # Verifica se o diretório existe\n","    if not os.path.exists(DIRETORIO_COHEBERT):  \n","        # Cria o diretório\n","        os.makedirs(DIRETORIO_COHEBERT)\n","        logging.info(\"Diretório Cohebert criado: {}\".format(DIRETORIO_COHEBERT))\n","    \n","    return DIRETORIO_COHEBERT"]},{"cell_type":"markdown","metadata":{"id":"yDCOeh2y5jOH"},"source":["Realiza o download e um arquivo"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5B1mvfAU5jZf"},"outputs":[],"source":["# Import das bibliotecas.\n","import requests # Biblioteca de download\n","from tqdm.notebook import tqdm as tqdm_notebook # Biblioteca para barra de progresso\n","import os # Biblioteca para manipular arquivos\n","\n","def downloadArquivo(url_arquivo, nome_arquivo_destino):\n","    \"\"\"    \n","      Realiza o download de um arquivo de uma url em salva em nome_arquivo_destino.\n","    \n","      Parâmetros:\n","        `url_arquivo` - URL do arquivo a ser feito download.      \n","        `nome_arquivo_destino` - Nome do arquivo a ser salvo.      \n","    \"\"\"\n","    \n","    # Verifica se existe o diretório base\n","    DIRETORIO_COHEBERT = verificaDiretorioCoheBERT()\n","    \n","    # Realiza o download de um arquivo em uma url\n","    data = requests.get(url_arquivo, stream=True)\n","    \n","    # Verifica se o arquivo existe\n","    if data.status_code != 200:\n","        logging.info(\"Exceção ao tentar realizar download {}. Response {}.\".format(url_arquivo, data.status_code))\n","        data.raise_for_status()\n","        return\n","\n","    # Recupera o nome do arquivo a ser realizado o download    \n","    nome_arquivo = nome_arquivo_destino.split(\"/\")[-1]  \n","\n","    # Define o nome e caminho do arquivo temporário    \n","    nome_arquivo_temporario = DIRETORIO_COHEBERT + \"/\" + nome_arquivo + \"_part\"\n","    \n","    logging.info(\"Download do arquivo: {}.\".format(nome_arquivo_destino))\n","    \n","    # Baixa o arquivo\n","    with open(nome_arquivo_temporario, \"wb\") as arquivo_binario:        \n","        tamanho_conteudo = data.headers.get(\"Content-Length\")        \n","        total = int(tamanho_conteudo) if tamanho_conteudo is not None else None\n","        # Barra de progresso de download\n","        progresso_bar = tqdm_notebook(unit=\"B\", total=total, unit_scale=True)                \n","        # Atualiza a barra de progresso\n","        for chunk in data.iter_content(chunk_size=1024):        \n","            if chunk:                \n","                progresso_bar.update(len(chunk))\n","                arquivo_binario.write(chunk)\n","    \n","    # Renomeia o arquivo temporário para o arquivo definitivo\n","    os.rename(nome_arquivo_temporario, nome_arquivo_destino)\n","    \n","    # Fecha a barra de progresso.\n","    progresso_bar.close()"]},{"cell_type":"markdown","metadata":{"id":"ksYnRk7zLGp0"},"source":["Remove tags de um documento"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6qwKjGvyLG4v"},"outputs":[],"source":["def remove_tags(documento):\n","    \"\"\"\n","      Remove tags de um documento\n","    \"\"\"\n","    \n","    import re\n","\n","    documento_limpo = re.compile(\"<.*?>\")\n","    return re.sub(documento_limpo, \"\", documento)"]},{"cell_type":"markdown","metadata":{"id":"4pduTsINLeaz"},"source":["Funções auxiliares de arquivos"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jirIzIstLea0"},"outputs":[],"source":["def carregar(nome_arquivo, encoding=\"Windows-1252\"):\n","    \"\"\"\n","      Carrega um arquivo texto e retorna as linhas como um único parágrafo(texto).\n","    \n","      Parâmetros:\n","        `nome_arquivo` - Nome do arquivo a ser carregado.  \n","    \"\"\"\n","\n","    # Abre o arquivo\n","    arquivo = open(nome_arquivo, \"r\", encoding= encoding)\n","    \n","    paragrafo = \"\"\n","    for linha in arquivo:\n","        linha = linha.splitlines()\n","        linha = \" \".join(linha)\n","        # Remove as tags existentes no final das linhas\n","        linha = remove_tags(linha)\n","        if linha != \"\":\n","          paragrafo = paragrafo + linha.strip() + \" \"\n","    \n","    # Fecha o arquivo\n","    arquivo.close()\n","\n","    # Remove os espaços em branco antes e depois do parágrafo\n","    return paragrafo.strip()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EC9Xppq-_R0w"},"outputs":[],"source":["def carregarLista(nome_arquivo, encoding=\"Windows-1252\"):\n","    \"\"\"\n","      Carrega um arquivo texto e retorna as linhas como uma lista de sentenças(texto).\n","    \n","      Parâmetros:\n","        `nome_arquivo` - Nome do arquivo a ser carregado.   \n","        `encoding` - Codificação dos caracteres do arquivo.\n","    \"\"\"\n","\n","    # Abre o arquivo\n","    arquivo = open(nome_arquivo, \"r\", encoding= encoding)\n","    \n","    sentencas = []\n","    for linha in arquivo:        \n","        linha = linha.splitlines()\n","        linha = \" \".join(linha)\n","        linha = remove_tags(linha)\n","        if linha != \"\":\n","          sentencas.append(linha.strip())\n","    \n","    # Fecha o arquivo\n","    arquivo.close()\n","\n","    return sentencas "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fkVk5LQT_G3f"},"outputs":[],"source":["def salvar(nome_arquivo,texto):                       \n","    \"\"\"\n","      Salva um texto em arquivo.\n","     \n","      Parâmetros:\n","        `nome_arquivo` - Nome do arquivo a ser salvo.\n","        `texto` - Texto a ser salvo.     \n","    \"\"\"\n","\n","    arquivo = open(nome_arquivo, \"w\")\n","    arquivo.write(str(texto))\n","    arquivo.close()"]},{"cell_type":"markdown","metadata":{"id":"603LYIYKBmq5"},"source":["Função auxiliar para formatar o tempo como `hh: mm: ss`"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Guy6B4whsZFR"},"outputs":[],"source":["# Import das bibliotecas.\n","import time\n","import datetime\n","\n","def formataTempo(tempo):\n","    \"\"\"\n","      Pega a tempo em segundos e retorna uma string hh:mm:ss\n","    \"\"\"\n","    # Arredonda para o segundo mais próximo.\n","    tempo_arredondado = int(round((tempo)))\n","    \n","    # Formata como hh:mm:ss\n","    return str(datetime.timedelta(seconds=tempo_arredondado))    "]},{"cell_type":"markdown","metadata":{"id":"zVKAapz7RCxk"},"source":["Classe(ModelArguments) de definição dos parâmetros do modelo"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zgmN6RqDRDZS"},"outputs":[],"source":["# Import das bibliotecas.\n","from dataclasses import dataclass, field\n","from typing import Dict, Optional\n","from typing import List\n","\n","@dataclass\n","class ModeloArgumentosMedida:\n","    max_seq_len: Optional[int] = field(\n","        default=None,\n","        metadata={\"help\": \"max seq len\"},\n","    )    \n","    pretrained_model_name_or_path: str = field(\n","        default=\"neuralmind/bert-base-portuguese-cased\",\n","        metadata={\"help\": \"nome do modelo pré-treinado do BERT.\"},\n","    )\n","    modelo_spacy: str = field(\n","        default=\"pt_core_news_lg\",\n","        metadata={\"help\": \"nome do modelo do spaCy.\"},\n","    )\n","    versao_modelo_spacy: str = field(\n","        default=\"-3.2.0\",\n","        metadata={\"help\": \"versão do nome do modelo no spaCy.\"},\n","    )\n","    sentenciar_documento: bool = field(\n","        default=True,\n","        metadata={\"help\": \"Dividir o documento em sentenças(frases).\"},\n","    )\n","    do_lower_case: bool = field(\n","        default=False,\n","        metadata={\"help\": \"define se o texto do modelo deve ser todo em minúsculo.\"},\n","    )    \n","    output_attentions: bool = field(\n","        default=False,\n","        metadata={\"help\": \"habilita se o modelo retorna os pesos de atenção.\"},\n","    )\n","    output_hidden_states: bool = field(\n","        default=False,\n","        metadata={\"help\": \"habilita gerar as camadas ocultas do modelo.\"},\n","    )\n","    usar_mcl_ajustado : bool = field(\n","        default=False,\n","        metadata={\"help\": \"habilita o carragamento de mcl ajustado.\"},\n","    )"]},{"cell_type":"markdown","metadata":{"id":"rceIwWa7UmFZ"},"source":["Biblioteca de limpeza de tela\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PXTEvmuhUmjO"},"outputs":[],"source":["# Import das bibliotecas.\n","from IPython.display import clear_output"]},{"cell_type":"markdown","metadata":{"id":"iAPVtRXQqDim"},"source":["## 1.3 Tratamento de logs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DcopxbGZqDip"},"outputs":[],"source":["# Import das bibliotecas.\n","import logging # Biblioteca de logging\n","\n","# Formatando a mensagem de logging\n","logging.basicConfig(format=\"%(asctime)s : %(levelname)s : %(message)s\")\n","\n","logger = logging.getLogger()\n","logger.setLevel(logging.INFO)"]},{"cell_type":"markdown","metadata":{"id":"_GjYtXcMnSAe"},"source":["## 1.4 Identificando o ambiente Colab"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YMiH0E3OnRa1"},"outputs":[],"source":["# Import das bibliotecas.\n","import sys # Biblioteca para acessar módulos do sistema\n","\n","# Se estiver executando no Google Colaboratory\n","# Retorna true ou false se estiver no Google Colaboratory\n","IN_COLAB = \"google.colab\" in sys.modules"]},{"cell_type":"markdown","metadata":{"id":"RinFHFesVKis"},"source":["## 1.5 Colaboratory"]},{"cell_type":"markdown","metadata":{"id":"MPngEboiVbfi"},"source":["Usando Colab GPU para Treinamento\n"]},{"cell_type":"markdown","metadata":{"id":"EjWE6WlvVbfj"},"source":["Uma GPU pode ser adicionada acessando o menu e selecionando:\n","\n","`Edit -> Notebook Settings -> Hardware accelerator -> (GPU)`\n","\n","Em seguida, execute a célula a seguir para confirmar que a GPU foi detectada."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3356,"status":"ok","timestamp":1669133150306,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"vtaYZmc3Vbfj","outputId":"cc8df13c-de00-4bcb-eee8-5e52b4353c5a"},"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:numexpr.utils:NumExpr defaulting to 2 threads.\n","INFO:root:Dispositivo GPU não encontrado\n"]}],"source":["# Import das bibliotecas.\n","import tensorflow as tf\n","\n","# Recupera o nome do dispositido da GPU.\n","device_name = tf.test.gpu_device_name()\n","\n","# O nome do dispositivo deve ser parecido com o seguinte:\n","if device_name == \"/device:GPU:0\":\n","    logging.info(\"Encontrei GPU em: {}\".format(device_name))\n","else:\n","    logging.info(\"Dispositivo GPU não encontrado\")\n","    #raise SystemError(\"Dispositivo GPU não encontrado\")"]},{"cell_type":"markdown","metadata":{"id":"iYRrUo2XWa8G"},"source":["Nome da GPU\n","\n","Para que a torch use a GPU, precisamos identificar e especificar a GPU como o dispositivo. Posteriormente, em nosso ciclo de treinamento, carregaremos dados no dispositivo.\n","\n","Vale a pena observar qual GPU você recebeu. A GPU Tesla P100 é muito mais rápido que as outras GPUs, abaixo uma lista ordenada:\n","- 1o Tesla P100\n","- 2o Tesla T4\n","- 3o Tesla P4 (Não tem memória para execução 4 x 8, somente 2 x 4)\n","- 4o Tesla K80 (Não tem memória para execução 4 x 8, somente 2 x 4)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zrjqDO6nWa8J"},"outputs":[],"source":["# Import das bibliotecas.\n","import torch # Biblioteca para manipular os tensores\n","\n","def getDeviceGPU():\n","    \"\"\"\n","    Retorna um dispositivo de GPU se disponível ou CPU.\n","    \n","    Retorno:\n","    `device` - Um device de GPU ou CPU.       \n","    \"\"\"\n","        \n","    # Se existe GPU disponível.\n","    if torch.cuda.is_available():\n","        \n","        # Diz ao PyTorch para usar GPU.    \n","        device = torch.device(\"cuda\")\n","        \n","        logging.info(\"Existem {} GPU(s) disponíveis.\".format(torch.cuda.device_count()))\n","        logging.info(\"Iremos usar a GPU: {}.\".format(torch.cuda.get_device_name(0)))\n","\n","    # Se não.\n","    else:        \n","        logging.info(\"Sem GPU disponível, usando CPU.\")\n","        device = torch.device(\"cpu\")\n","        \n","    return device"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":55,"status":"ok","timestamp":1669133152315,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"ChDxmtXsKwjf","outputId":"4e6f7460-0fce-4984-ba05-d2a949a77763"},"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:root:Sem GPU disponível, usando CPU.\n"]}],"source":["device = getDeviceGPU()"]},{"cell_type":"markdown","metadata":{"id":"kkdlEouHftcJ"},"source":["Conecta o modelo ao device"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a-znVDGyfsVx"},"outputs":[],"source":["# Import das bibliotecas.\n","import torch # Biblioteca para manipular os tensores\n","\n","def conectaGPU(model, device):\n","    \"\"\"\n","      Conecta um modelo BERT a GPU.\n","\n","      Parâmetros:\n","        `model` - Um modelo BERT carregado.       \n","        `device` - Um device de GPU.     \n","    \n","      Retorno:\n","        `model` - Um objeto model BERT conectado a GPU.     \n","    \"\"\"\n","    # Associa a GPU ao modelo.\n","    model.to(device)\n","\n","    # Se existe GPU disponível.\n","    if torch.cuda.is_available():    \n","        # Diga ao pytorch para rodar este modelo na GPU.\n","        logging.info(\"Pytorch rodando o modelo na GPU.\")\n","        model.cuda()\n","        \n","    else:\n","        logging.info(\"Pytorch rodando sem GPU.\")\n","\n","    return model"]},{"cell_type":"markdown","metadata":{"id":"fGf59D0yVNx9"},"source":["Memória\n","\n","Memória disponível no ambiente"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":44,"status":"ok","timestamp":1669133152321,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"1iC5-pSAVh7_","outputId":"f58eb675-70cb-40a5-a4d4-f085e2b02c95"},"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:root:Seu ambiente de execução tem  13.6 gigabytes de RAM disponível\n","\n","INFO:root:Para habilitar um tempo de execução de RAM alta, selecione menu o ambiente de execução> \"Alterar tipo de tempo de execução\"\n","INFO:root:e selecione High-RAM. Então, execute novamente está célula\n"]}],"source":["# Importando as bibliotecas.\n","from psutil import virtual_memory\n","\n","ram_gb = virtual_memory().total / 1e9\n","logging.info(\"Seu ambiente de execução tem {: .1f} gigabytes de RAM disponível\\n\".format(ram_gb))\n","\n","if ram_gb < 20:\n","  logging.info(\"Para habilitar um tempo de execução de RAM alta, selecione menu o ambiente de execução> \\\"Alterar tipo de tempo de execução\\\"\")\n","  logging.info(\"e selecione High-RAM. Então, execute novamente está célula\")\n","else:\n","  logging.info(\"Você está usando um ambiente de execução de memória RAM alta!\")"]},{"cell_type":"markdown","metadata":{"id":"wijMXooQQLcQ"},"source":["## 1.6 Monta uma pasta no google drive para carregar os arquivos de dados."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":131011,"status":"ok","timestamp":1669133283297,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"ysnDDapMQK8K","outputId":"a6f4c612-07dc-4596-9c1c-1d4c383fe3bd"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["#@title\n","# import necessário\n","from google.colab import drive\n","\n","# Monta o drive na pasta especificada\n","drive.mount(\"/content/drive\")     "]},{"cell_type":"markdown","metadata":{"id":"Pqa-7WXBAw8q"},"source":["## 1.9 Instalação do BERT da Hugging Face"]},{"cell_type":"markdown","metadata":{"id":"eCdqJCtQN52l"},"source":["Instala a interface pytorch para o BERT by Hugging Face. "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8937,"status":"ok","timestamp":1669133292225,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"1RfUN_KolV-f","outputId":"cb534af4-e0fb-47e5-82e3-136c21a15b4b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting transformers==4.5.1\n","  Downloading transformers-4.5.1-py3-none-any.whl (2.1 MB)\n","\u001b[K     |████████████████████████████████| 2.1 MB 5.2 MB/s \n","\u001b[?25hRequirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from transformers==4.5.1) (21.3)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from transformers==4.5.1) (1.21.6)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from transformers==4.5.1) (3.8.0)\n","Collecting tokenizers<0.11,>=0.10.1\n","  Downloading tokenizers-0.10.3-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (3.3 MB)\n","\u001b[K     |████████████████████████████████| 3.3 MB 43.7 MB/s \n","\u001b[?25hRequirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.7/dist-packages (from transformers==4.5.1) (2022.6.2)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.7/dist-packages (from transformers==4.5.1) (4.64.1)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from transformers==4.5.1) (2.23.0)\n","Collecting sacremoses\n","  Downloading sacremoses-0.0.53.tar.gz (880 kB)\n","\u001b[K     |████████████████████████████████| 880 kB 59.3 MB/s \n","\u001b[?25hRequirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from transformers==4.5.1) (4.13.0)\n","Requirement already satisfied: typing-extensions>=3.6.4 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->transformers==4.5.1) (4.1.1)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->transformers==4.5.1) (3.10.0)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->transformers==4.5.1) (3.0.9)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->transformers==4.5.1) (2.10)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->transformers==4.5.1) (1.24.3)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->transformers==4.5.1) (3.0.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->transformers==4.5.1) (2022.9.24)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers==4.5.1) (1.15.0)\n","Requirement already satisfied: click in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers==4.5.1) (7.1.2)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers==4.5.1) (1.2.0)\n","Building wheels for collected packages: sacremoses\n","  Building wheel for sacremoses (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for sacremoses: filename=sacremoses-0.0.53-py3-none-any.whl size=895260 sha256=07c21a387983dde89f0c2822fa5f091f1cc8854137a9fd5e1308e50ae46ff696\n","  Stored in directory: /root/.cache/pip/wheels/87/39/dd/a83eeef36d0bf98e7a4d1933a4ad2d660295a40613079bafc9\n","Successfully built sacremoses\n","Installing collected packages: tokenizers, sacremoses, transformers\n","Successfully installed sacremoses-0.0.53 tokenizers-0.10.3 transformers-4.5.1\n"]}],"source":["!pip install -U transformers==4.5.1"]},{"cell_type":"markdown","metadata":{"id":"8bGda5JgMtQe"},"source":["# 2 Parametrização"]},{"cell_type":"markdown","metadata":{"id":"ifrYNTwGwKal"},"source":["## Gerais"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5uiH9pNpwI6g"},"outputs":[],"source":["# Definição dos parâmetros a serem avaliados\n","\n","#Realiza o pooling dos tokens de palavras fora do vocabulário do BERT\n","POOLING_TOKENS = 1 # 1 - Sem pooling / 1 - Com pooling \n","\n","#Estratégia de recuperação dos embeddings: (1 - Embeddings da última camada, \n","#                                           2 - Embeddings da concatenação das 4 últimas camadas)\n","ESTRATEGIA_EMBEDDING = 1\n","\n","\n","limitar_sentenca = 1\n","\n","numero_limite = 500\n"]},{"cell_type":"markdown","metadata":{"id":"mhByVujAwNAU"},"source":["## Específicos"]},{"cell_type":"markdown","metadata":{"id":"FhMuEM1o1Aq3"},"source":["Parâmetros do modelo"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oJ15-ylRRRdD"},"outputs":[],"source":["# Definição dos parâmetros do Modelo.\n","model_args = ModeloArgumentosMedida(     \n","    max_seq_len = 512,\n","    #pretrained_model_name_or_path = \"https://neuralmind-ai.s3.us-east-2.amazonaws.com/nlp/bert-large-portuguese-cased/bert-large-portuguese-cased_pytorch_checkpoint.zip\",\n","    #pretrained_model_name_or_path = \"https://neuralmind-ai.s3.us-east-2.amazonaws.com/nlp/bert-base-portuguese-cased/bert-base-portuguese-cased_pytorch_checkpoint.zip\",\n","    pretrained_model_name_or_path = \"neuralmind/bert-large-portuguese-cased\",\n","    #pretrained_model_name_or_path = \"neuralmind/bert-base-portuguese-cased\",    \n","    #pretrained_model_name_or_path = \"bert-base-multilingual-cased\",\n","    #pretrained_model_name_or_path = \"bert-base-multilingual-uncased\",\n","    modelo_spacy = \"pt_core_news_lg\",\n","    #modelo_spacy = \"pt_core_news_md\",\n","    #modelo_spacy = \"pt_core_news_sm\",\n","    versao_modelo_spacy = \"3.2.0\",\n","    sentenciar_documento = True,\n","    do_lower_case = False,   # default True  \n","    output_attentions = False,  # default False\n","    output_hidden_states = True, # default False, se True retorna todas as camadas do modelo para as operações de soma e concatenação\n","    usar_mcl_ajustado = False, # Especifica se deve ser carregado um MCL ajustado ou pré-treinado. Necessário especificar o tipo do modelo em pretrained_model_name_or_path. \n",")"]},{"cell_type":"markdown","metadata":{"id":"BLOqjcIzImVo"},"source":["## Nome do diretório dos arquivos de dados"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xJEiTPnKImVp"},"outputs":[],"source":["# Diretório do cohebert\n","DIRETORIO_COHEBERT = \"MODERNIST\""]},{"cell_type":"markdown","metadata":{"id":"SUxlx7Sx4yxj"},"source":["## Define o caminho para os arquivos de dados"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-gQpxAO74yxj"},"outputs":[],"source":["# Diretório local para os arquivos pré-processados\n","DIRETORIO_LOCAL = \"/content/\" + DIRETORIO_COHEBERT + \"/\"\n","\n","# Diretório no google drive com os arquivos pré-processados\n","DIRETORIO_DRIVE = \"/content/drive/MyDrive/Colab Notebooks/Data/\" + DIRETORIO_COHEBERT + \"/\""]},{"cell_type":"markdown","metadata":{"id":"tDgJTbPOZ8SW"},"source":["## Inicialização diretórios"]},{"cell_type":"markdown","metadata":{"id":"qpSERA9TC4WU"},"source":["Diretório base local"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"edg7eW2cDflg"},"outputs":[],"source":["# Importando as bibliotecas.\n","import os\n","\n","def criaDiretorioLocal():\n","\n","  # Cria o diretório para receber os arquivos Originais e Permutados\n","  # Diretório a ser criado\n","  dirbase = DIRETORIO_LOCAL[:-1]\n","\n","  if not os.path.exists(dirbase):  \n","      # Cria o diretório\n","      os.makedirs(dirbase)    \n","      logging.info(\"Diretório criado: {}.\".format(dirbase))\n","  else:    \n","      logging.info(\"Diretório já existe: {}.\".format(dirbase))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1669133292227,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"xge0ar9MJoKy","outputId":"02b2c436-8f1d-43f5-f3dc-5f8b1b1ac7cc"},"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:root:Diretório criado: /content/MODERNIST.\n"]}],"source":["criaDiretorioLocal()"]},{"cell_type":"markdown","metadata":{"id":"L7G3-MOsQ1N_"},"source":["# 3 spaCy"]},{"cell_type":"markdown","metadata":{"id":"35GwcgkOlWi3"},"source":["## 3.1 Download arquivo modelo\n","\n","https://spacy.io/models/pt"]},{"cell_type":"markdown","source":["### Função download modelo spaCy"],"metadata":{"id":"PWd_9X0nOYnF"}},{"cell_type":"code","source":["def downloadSpacy(model_args):\n","    \"\"\"\n","      Realiza o download do arquivo do modelo para o diretório corrente.\n","    \n","      Parâmetros:\n","        `model_args` - Objeto com os argumentos do modelo.       \n","    \"\"\"\n","    # Verifica se existe o diretório base\n","    DIRETORIO_COHEBERT = verificaDiretorioCoheBERT()\n","        \n","    # Nome arquivo spacy\n","    ARQUIVO_MODELO_SPACY = model_args.modelo_spacy\n","    # Versão spaCy\n","    VERSAO_SPACY = \"-\" + model_args.versao_modelo_spacy\n","    # Nome arquivo compactado\n","    NOME_ARQUIVO_MODELO_COMPACTADO = ARQUIVO_MODELO_SPACY + VERSAO_SPACY + \".tar.gz\"\n","    \n","    # Url do arquivo\n","    URL_ARQUIVO_MODELO_COMPACTADO = \"https://github.com/explosion/spacy-models/releases/download/\" + ARQUIVO_MODELO_SPACY + VERSAO_SPACY + \"/\" + NOME_ARQUIVO_MODELO_COMPACTADO\n","\n","    # Realiza o download do arquivo do modelo\n","    logging.info(\"Download do arquivo do modelo do spaCy.\")\n","    downloadArquivo(URL_ARQUIVO_MODELO_COMPACTADO, DIRETORIO_COHEBERT + \"/\" + NOME_ARQUIVO_MODELO_COMPACTADO)"],"metadata":{"id":"DjWGu-9D5URZ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Uu_LkF7Nfm8_"},"source":["## 3.2 Descompacta o arquivo do modelo"]},{"cell_type":"markdown","source":["### Função descompacta modelo spaCy"],"metadata":{"id":"XAc1tSwvOc4d"}},{"cell_type":"code","source":["# Import das bibliotecas.\n","import tarfile # Biblioteca de descompactação\n","\n","def descompactaSpacy(model_args):\n","    \"\"\"\n","      Descompacta o arquivo do modelo.\n","    \n","      Parâmetros:\n","        `model_args` - Objeto com os argumentos do modelo.       \n","    \"\"\"\n","    \n","    # Verifica se existe o diretório base do cohebert e retorna o nome do diretório\n","    DIRETORIO_COHEBERT = verificaDiretorioCoheBERT()\n","    \n","    # Nome arquivo spacy\n","    ARQUIVO_MODELO_SPACY = model_args.modelo_spacy\n","    # Versão spaCy\n","    VERSAO_SPACY = \"-\" + model_args.versao_modelo_spacy\n","    \n","    # Nome do arquivo a ser descompactado\n","    NOME_ARQUIVO_MODELO_COMPACTADO = DIRETORIO_COHEBERT + \"/\" + ARQUIVO_MODELO_SPACY + VERSAO_SPACY + \".tar.gz\"\n","    \n","    logging.info(\"Descompactando o arquivo do modelo do spaCy.\")\n","    arquivo_tar = tarfile.open(NOME_ARQUIVO_MODELO_COMPACTADO, \"r:gz\")    \n","    arquivo_tar.extractall(DIRETORIO_COHEBERT)    \n","    arquivo_tar.close()\n","    \n","    # Apaga o arquivo compactado\n","    if os.path.isfile(NOME_ARQUIVO_MODELO_COMPACTADO):        \n","        os.remove(NOME_ARQUIVO_MODELO_COMPACTADO)"],"metadata":{"id":"Dq9PnXO77bPQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"STHT2c89qvwK"},"source":["## 3.3 Carrega o modelo"]},{"cell_type":"markdown","source":["### Função carrega modelo spaCy"],"metadata":{"id":"3iFBoyWMOgKz"}},{"cell_type":"code","source":["# Import das bibliotecas.\n","import spacy # Biblioteca do spaCy\n","\n","def carregaSpacy(model_args):\n","    \"\"\"\n","    Realiza o carregamento do Spacy.\n","    \n","    Parâmetros:\n","      `model_args` - Objeto com os argumentos do modelo.           \n","    \"\"\"\n","    \n","    # Verifica se existe o diretório base\n","    DIRETORIO_COHEBERT = verificaDiretorioCoheBERT()\n","                  \n","    # Nome arquivo spacy\n","    ARQUIVO_MODELO_SPACY = model_args.modelo_spacy\n","    # Versão spaCy\n","    VERSAO_SPACY = \"-\" + model_args.versao_modelo_spacy\n","    # Caminho raoz do modelo do spaCy\n","    DIRETORIO_MODELO_SPACY =  DIRETORIO_COHEBERT + \"/\" + ARQUIVO_MODELO_SPACY + VERSAO_SPACY\n","\n","    # Verifica se o diretório existe\n","    if os.path.exists(DIRETORIO_MODELO_SPACY) == False:\n","        # Realiza o download do arquivo modelo do spaCy\n","        downloadSpacy(model_args)\n","        # Descompacta o spaCy\n","        descompactaSpacy(model_args)\n","\n","    # Diretório completo do spaCy\n","    DIRETORIO_MODELO_SPACY = DIRETORIO_COHEBERT + \"/\" + ARQUIVO_MODELO_SPACY + VERSAO_SPACY + \"/\" + ARQUIVO_MODELO_SPACY + \"/\" + ARQUIVO_MODELO_SPACY + VERSAO_SPACY + \"/\"\n","\n","    # Carrega o spaCy. Necessário somente \"tagger\" para encontrar os substantivos\n","    nlp = spacy.load(DIRETORIO_MODELO_SPACY)\n","    logging.info(\"spaCy carregado.\")\n","\n","    # Retorna o spacy carregado\n","    return nlp "],"metadata":{"id":"ePOccj0s8WMg"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Carrega o modelo spaCy\n"],"metadata":{"id":"cAk5hHx7OnHn"}},{"cell_type":"code","metadata":{"id":"nbELnrpgA4T1","colab":{"base_uri":"https://localhost:8080/","referenced_widgets":["2b17e846d3ee4fffb8204ff6beeb6ec8","d8975828f9534691b625e79700dcea59","c2bb5bced52b4da9894a2639e28f0d4a","c140e26bbc194419a505c1137b881536","1d0061553ced48f9b84ada0f85529316","717f2cb4973b4050927be4b4285b16d6","1199a1900c0b431499226b9122dca93e","b31ba9881555432cb29738fcfbc0e240","759a3098e04048fda232afb5bfe6cb27","078ff7874007406184f00615dad8f5ae","15c658415c4d4a8487dcb2ed74b02a6f"]},"executionInfo":{"status":"ok","timestamp":1669133328540,"user_tz":180,"elapsed":34481,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"0a25cd6f-06dc-4661-9ac1-733159178dfb"},"source":["# Carrega o modelo spaCy\n","nlp = carregaSpacy(model_args)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:root:Download do arquivo do modelo do spaCy.\n","INFO:root:Download do arquivo: MODERNIST/pt_core_news_lg-3.2.0.tar.gz.\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0.00/577M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"2b17e846d3ee4fffb8204ff6beeb6ec8"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["INFO:root:Descompactando o arquivo do modelo do spaCy.\n","/usr/local/lib/python3.7/dist-packages/spacy/util.py:877: UserWarning: [W095] Model 'pt_core_news_lg' (3.2.0) was trained with spaCy v3.2 and may not be 100% compatible with the current version (3.4.3). If you see errors or degraded performance, download a newer compatible model or retrain your custom model with the current spaCy version. For more details and available updates, run: python -m spacy validate\n","  warnings.warn(warn_msg)\n","INFO:root:spaCy carregado.\n"]}]},{"cell_type":"markdown","metadata":{"id":"fzk8VOp7oy8n"},"source":["## 3.4 Funções auxiliares spaCy"]},{"cell_type":"markdown","source":["### getStopwords\n","\n","Recupera as stopwords do spaCy"],"metadata":{"id":"AEzytjZi5Iw2"}},{"cell_type":"code","metadata":{"id":"zKg-_XyWoy8o"},"source":["def getStopwords(nlp):\n","    \"\"\"\n","      Recupera as stop words do nlp(Spacy).\n","    \n","      Parâmetros:\n","        `nlp` - Um modelo spaCy carregado.           \n","    \"\"\"\n","    \n","    spacy_stopwords = nlp.Defaults.stop_words\n","\n","    return spacy_stopwords "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qZdNFrC3oy8p"},"source":["Lista dos stopwords"]},{"cell_type":"code","metadata":{"id":"s1o8jevtoy8p","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1669133328541,"user_tz":180,"elapsed":35,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"d6dd0c33-8b4a-4e4d-9cc3-df786bf8c57d"},"source":["logging.info(\"Quantidade de stopwords: {}.\".format(len(getStopwords(nlp))))\n","\n","print(getStopwords(nlp))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:root:Quantidade de stopwords: 416.\n"]},{"output_type":"stream","name":"stdout","text":["{'quinta', 'tal', 'pelos', 'às', 'cujo', 'sois', 'corrente', 'deve', 'através', 'esta', 'de', 'embora', 'tendes', 'tanto', 'poder', 'nesse', 'teus', 'vais', 'podia', 'vão', 'apoia', 'conselho', 'direita', 'tuas', 'maioria', 'muitos', 'fui', 'possível', 'quinto', 'oito', 'minha', 'talvez', 'sua', 'diz', 'portanto', 'diante', 'daquela', 'depois', 'área', 'estive', 'apenas', 'neste', 'poderá', 'são', 'partir', 'vós', 'final', 'treze', 'vários', 'estas', 'aquela', 'dez', 'ponto', 'podem', 'próprio', 'vinte', 'números', 'quieta', 'vens', 'tiveram', 'fazes', 'acerca', 'posição', 'pois', 'já', 'vossa', 'essa', 'grupo', 'nove', 'umas', 'naquele', 'breve', 'nossa', 'da', 'qualquer', 'outra', 'saber', 'próximo', 'estes', 'tempo', 'onde', 'vinda', 'vindo', 'vêm', 'suas', 'assim', 'oitavo', 'local', 'vez', 'novas', 'comprida', 'das', 'teu', 'sob', 'isso', 'nova', 'nenhuma', 'vosso', 'ver', 'alguns', 'parte', 'tais', 'fazer', 'longe', 'mal', 'antes', 'vossos', 'estará', 'sexta', 'sabe', 'número', 'também', 'somos', 'ambas', 'quer', 'tudo', 'ainda', 'só', 'contra', 'tanta', 'pode', 'desta', 'perto', 'estás', 'muito', 'doze', 'tente', 'ora', 'na', 'cedo', 'fará', 'esteve', 'pouca', 'devem', 'apoio', 'logo', 'dentro', 'demais', 'valor', 'máximo', 'e', 'vocês', 'quanto', 'toda', 'eles', 'nos', 'tivemos', 'uns', 'teve', 'era', 'dezanove', 'sete', 'veja', 'isto', 'num', 'ontem', 'seis', 'elas', 'todas', 'cima', 'tenho', 'quarta', 'novo', 'numa', 'ir', 'estado', 'ter', 'pelo', 'ela', 'meus', 'esses', 'atrás', 'exemplo', 'novos', 'após', 'dessa', 'debaixo', 'des', 'mesmo', 'menor', 'fim', 'coisa', 'põe', 'este', 'vossas', 'conhecida', 'nada', 'dizem', 'somente', 'grandes', 'ali', 'então', 'estiveste', 'sétima', 'usar', 'fazemos', 'seria', 'dos', 'cinco', 'essas', 'as', 'pela', 'lugar', 'a', 'o', 'vem', 'eventual', 'quinze', 'têm', 'agora', 'foram', 'tem', 'nesta', 'geral', 'com', 'grande', 'deste', 'dezasseis', 'estar', 'certamente', 'ademais', 'todo', 'fazem', 'parece', 'terceiro', 'me', 'nível', 'irá', 'nuns', 'oitava', 'querem', 'aos', 'tarde', 'posso', 'quais', 'desse', 'tens', 'quarto', 'obrigada', 'relação', 'em', 'tão', 'seus', 'uma', 'duas', 'estiveram', 'no', 'quieto', 'pontos', 'deverá', 'faço', 'catorze', 'adeus', 'porém', 'bem', 'lado', 'estava', 'estivestes', 'aquele', 'obrigado', 'tentei', 'fazeis', 'do', 'sem', 'tipo', 'fora', 'seu', 'tive', 'te', 'está', 'aquilo', 'meses', 'ser', 'questão', 'custa', 'primeira', 'momento', 'povo', 'nessa', 'dezoito', 'você', 'quem', 'porquanto', 'pouco', 'sou', 'cada', 'entre', 'fez', 'segundo', 'três', 'por', 'mês', 'naquela', 'nossos', 'caminho', 'minhas', 'fomos', 'meu', 'dá', 'um', 'dão', 'pegar', 'não', 'nem', 'nossas', 'tu', 'mas', 'cá', 'ao', 'desde', 'ou', 'pelas', 'aquelas', 'aqui', 'tentaram', 'tua', 'foi', 'estão', 'eu', 'foste', 'os', 'inclusive', 'além', 'bom', 'outras', 'é', 'estivemos', 'tentar', 'contudo', 'põem', 'bastante', 'dizer', 'temos', 'qual', 'primeiro', 'maior', 'todos', 'forma', 'dois', 'faz', 'meio', 'vezes', 'comprido', 'fostes', 'outros', 'que', 'vai', 'sexto', 'sobre', 'esse', 'estou', 'sétimo', 'for', 'mil', 'zero', 'baixo', 'ligado', 'pôde', 'nosso', 'nas', 'sempre', 'vos', 'aqueles', 'algo', 'favor', 'terceira', 'sei', 'nós', 'conhecido', 'lá', 'nunca', 'tivestes', 'és', 'falta', 'porque', 'daquele', 'sistema', 'dezassete', 'menos', 'inicio', 'lhe', 'cento', 'segunda', 'último', 'boa', 'sim', 'à', 'quatro', 'mais', 'enquanto', 'usa', 'disso', 'até', 'possivelmente', 'fazia', 'dar', 'iniciar', 'próxima', 'maiorias', 'cuja', 'puderam', 'onze', 'certeza', 'ele', 'quero', 'quando', 'se', 'como', 'algumas', 'para', 'porquê', 'apontar', 'quê', 'tiveste', 'ambos', 'aí'}\n"]}]},{"cell_type":"markdown","metadata":{"id":"onM1ZApom-_W"},"source":["### getVerbos\n","Localiza os verbos da sentença"]},{"cell_type":"code","metadata":{"id":"6hdqVdfxm-_W"},"source":["# Import das bibliotecas.\n","import spacy   \n","from spacy.util import filter_spans\n","from spacy.matcher import Matcher\n","\n","# (verbo normal como auxilar ou auxilar) + vários verbos auxiliares +verbo principal ou verbo auxiliar\n","gramaticav1 =  [\n","                {\"POS\": \"AUX\", \"OP\": \"?\", \"DEP\": {\"IN\": [\"aux\",\"aux:pass\"]}},  #verbo auxiliar                                  \n","                {\"POS\": \"VERB\", \"OP\": \"?\", \"DEP\": {\"IN\": [\"ROOT\",\"aux\",\"xcomp\",\"aux:pass\"]}},  #verbo normal como auxiliar\n","                {\"POS\": \"AUX\", \"OP\": \"*\", \"DEP\": {\"IN\": [\"aux\",\"xcomp\",\"aux:pass\"]}},  #verbo auxiliar   \n","                {\"POS\": \"VERB\", \"OP\": \"+\"}, #verbo principal\n","                {\"POS\": \"AUX\", \"OP\": \"?\", \"DEP\": {\"IN\": [\"cop\",\"aux\",\"xcomp\",\"aux:pass\"]}},  #verbo auxiliar\n","               ] \n","\n","# verbo auxiliar + verbo normal como auxiliar + conjunção com preposição + verbo\n","gramaticav2 =  [               \n","                {\"POS\": \"AUX\", \"OP\": \"?\", \"DEP\": {\"IN\": [\"aux\",\"aux:pass\"]}},  #verbo auxiliar                   \n","                {\"POS\": \"VERB\", \"OP\": \"+\", \"DEP\": {\"IN\": [\"ROOT\"]}},  #verbo principal       \n","                {\"POS\": \"SCONJ\", \"OP\": \"+\", \"DEP\": {\"IN\": [\"mark\"]}}, #conjunção com preposição\n","                {\"POS\": \"VERB\", \"OP\": \"+\", \"DEP\": {\"IN\": [\"xcomp\"]}}, #verbo normal como complementar\n","               ] \n","\n","#Somente verbos auxiliares\n","gramaticav3 =  [\n","                {\"POS\": \"AUX\", \"OP\": \"?\"},  #Verbos auxiliar \n","                {\"POS\": \"AUX\", \"OP\": \"?\", \"DEP\": {\"IN\": [\"cop\"]}},  #Verbos auxiliar de ligação (AUX+(cop))\n","                {\"POS\": \"ADJ\", \"OP\": \"+\", \"DEP\": {\"IN\": [\"ROOT\"]}}, \n","                {\"POS\": \"AUX\", \"OP\": \"?\"}  #Verbos auxiliar \n","               ] \n","\n","matcherv = Matcher(nlp.vocab)\n","         \n","matcherv.add(\"frase verbal\", [gramaticav1])\n","matcherv.add(\"frase verbal\", [gramaticav2])\n","matcherv.add(\"frase verbal\", [gramaticav3])\n","\n","#Retorna a Frase Verbal\n","def getVerbos(periodo):    \n","  #Processa o período\n","  doc1 = nlp(periodo.text)\n","  \n","  # Chama o mather para encontrar o padrão\n","  matches = matcherv(doc1)\n","\n","  padrao = [doc1[start:end] for _, start, end in matches]\n","\n","  #elimina as repetições e sobreposições\n","  #return filter_spans(padrao)\n","  lista1 = filter_spans(padrao)\n","\n","  # Converte os itens em string\n","  lista2 = []\n","  for x in lista1:\n","      lista2.append(str(x))\n","  \n","  return lista2"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6ZVwbmn3Nx2t"},"source":["### getDicPOSQtde\n","\n","Conta as POS Tagging de uma sentença"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3j3VF4NOSPbq"},"outputs":[],"source":["def getDicPOSQtde(sentenca):\n","\n","    # Verifica se o sentenca não foi processado pelo spaCy  \n","  if type(sentenca) is not spacy.tokens.doc.Doc:\n","      # Realiza o parsing no spacy\n","      doc = nlp(sentenca)\n","  else:\n","      doc = sentenca\n","\n","  # Retorna inteiros que mapeiam para classes gramaticais\n","  conta_dicionarios = doc.count_by(spacy.attrs.IDS[\"POS\"])\n","\n","  # Dicionário com as tags e quantidades\n","  novodic = dict()\n","  \n","  for pos, qtde in conta_dicionarios.items():\n","    classe_gramatical = doc.vocab[pos].text\n","    novodic[classe_gramatical] = qtde\n","\n","  return novodic"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0uPDYU4KBC5q"},"outputs":[],"source":["def getDicTodasPOSQtde(sentenca):\n","\n","    # Verifica se o sentenca não foi processado pelo spaCy  \n","  if type(sentenca) is not spacy.tokens.doc.Doc:\n","      # Realiza o parsing no spacy\n","      doc = nlp(sentenca)\n","  else:\n","      doc = sentenca\n","\n","  # Retorna inteiros que mapeiam para classes gramaticais\n","  conta_dicionarios = doc.count_by(spacy.attrs.IDS[\"POS\"])\n","\n","  # Dicionário com as tags e quantidades    \n","  novodic = {\"PRON\":0, \"VERB\":0, \"PUNCT\":0, \"DET\":0, \"NOUN\":0, \"AUX\":0, \"CCONJ\":0, \"ADP\":0, \"PROPN\":0, \"ADJ\":0, \"ADV\":0, \"NUM\":0, \"SCONJ\":0, \"SYM\":0, \"SPACE\":0, \"INTJ\":0, \"X\": 0}\n","    \n","  for pos, qtde in conta_dicionarios.items():\n","    classe_gramatical = doc.vocab[pos].text\n","    novodic[classe_gramatical] = qtde\n","\n","  return novodic"]},{"cell_type":"markdown","metadata":{"id":"Jxe-mh-l6sJY"},"source":["### getDicTodasPOSQtde\n","\n","Conta as POS Tagging de uma sentença"]},{"cell_type":"code","metadata":{"id":"j9SA61kD6sJY"},"source":["def getDicTodasPOSQtde(lista):\n","\n","  # Dicionário com as tags e quantidades\n","  conjunto = {\"PRON\":0, \"VERB\":0, \"PUNCT\":0, \"DET\":0, \"NOUN\":0, \"AUX\":0, \"CCONJ\":0, \"ADP\":0, \"PROPN\":0, \"ADJ\":0, \"ADV\":0, \"NUM\":0, \"SCONJ\":0, \"SYM\":0, \"SPACE\":0, \"INTJ\": 0}\n","\n","  for x in lista:\n","    valor = conjunto.get(x)\n","    if valor != None:\n","      conjunto[x] = valor + 1\n","    else:\n","      conjunto[x] = 1\n","\n","  return conjunto"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"m4KV_jI-Nx2w"},"source":["### getSomaDic\n","\n","Soma os valores de dicionários com as mesmas chaves."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mGduPM6HNx2w"},"outputs":[],"source":["from collections import Counter\n","from functools import reduce\n","\n","def atualizaValor(a,b):\n","    a.update(b)\n","    return a\n","\n","def getSomaDic(lista):\n","    \n","  # Soma os dicionários da lista\n","  novodic = reduce(atualizaValor, (Counter(dict(x)) for x in lista))\n"," \n","  return novodic"]},{"cell_type":"markdown","metadata":{"id":"bGaf7bkpAEiX"},"source":["### getTokensSentenca\n","\n","Retorna a lista de tokens da sentenca."]},{"cell_type":"code","metadata":{"id":"gWxyAo54AOHU"},"source":["def getTokensSentenca(sentenca):\n","\n","    # Verifica se o sentenca não foi processado pelo spaCy  \n","  if type(sentenca) is not spacy.tokens.doc.Doc:\n","      # Realiza o parsing no spacy\n","      doc = nlp(sentenca)\n","  else:\n","      doc = sentenca\n","\n","  # Lista dos tokens\n","  lista = []\n","\n","  # Percorre a sentença adicionando os tokens\n","  for token in doc:    \n","    lista.append(token.text)\n","\n","  return lista"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZB6bR42PA28c"},"source":["### getPOSTokensSentenca\n","\n","Retorna a lista das POS-Tagging dos tokens da sentenca."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"awaqjNIZA3Fk"},"outputs":[],"source":["def getPOSTokensSentenca(sentenca):\n","\n","  # Verifica se o sentenca não foi processado pelo spaCy  \n","  if type(sentenca) is not spacy.tokens.doc.Doc:\n","      # Realiza o parsing no spacy\n","      doc = nlp(sentenca)\n","  else:\n","      doc = sentenca\n","\n","  # Lista dos tokens\n","  lista = []\n","\n","  # Percorre a sentença adicionando os tokens\n","  for token in doc:    \n","    lista.append(token.pos_)\n","\n","  return lista"]},{"cell_type":"markdown","metadata":{"id":"B4Soqt3fp3Lu"},"source":["### getListaTokensPOSSentenca\n","\n","Retorna duas listas uma com os tokens e a outra com a POS-Tagging dos tokens da sentenca."]},{"cell_type":"code","metadata":{"id":"Gvd99wd_pwmt"},"source":["def getListaTokensPOSSentenca(sentenca):\n","  # Verifica se o sentenca não foi processado pelo spaCy  \n","  if type(sentenca) is not spacy.tokens.doc.Doc:\n","      # Realiza o parsing no spacy\n","      doc = nlp(sentenca)\n","  else:\n","      doc = sentenca\n","\n","  # Lista dos tokens\n","  lista_tokens = []\n","  lista_pos = []\n","\n","  # Percorre a sentença adicionando os tokens e as POS\n","  for token in doc:    \n","    lista_tokens.append(token.text)\n","    lista_pos.append(token.pos_)\n","    \n","  return lista_tokens, lista_pos"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ENvsIER06sJX"},"source":["### Tadução das tags"]},{"cell_type":"markdown","metadata":{"id":"kwSb3ECU6sJY"},"source":["Tags de palavras universal\n","\n","https://universaldependencies.org/u/pos/\n","\n","Detalhes das tags em português:\n","http://www.dbd.puc-rio.br/pergamum/tesesabertas/1412298_2016_completo.pdf"]},{"cell_type":"code","metadata":{"id":"NpCUpOs06sJY"},"source":["#dicionário que contêm pos tag universal e suas explicações\n","palavra_universal_dict = {\n","  \"X\"    : \"Outro\",\n","  \"VERB\" : \"Verbo \",\n","  \"SYM\"  : \"Símbolo\",\n","  \"CONJ\" : \"Conjunção\",\n","  \"SCONJ\": \"Conjunção subordinativa\",\n","  \"PUNCT\": \"Pontuação\",\n","  \"PROPN\": \"Nome próprio\",\n","  \"PRON\" : \"Pronome substativo\",\n","  \"PART\" : \"Partícula, morfemas livres\",\n","  \"NUM\"  : \"Numeral\",\n","  \"NOUN\" : \"Substantivo\",\n","  \"INTJ\" : \"Interjeição\",\n","  \"DET\"  : \"Determinante, Artigo e pronomes adjetivos\",\n","  \"CCONJ\": \"Conjunção coordenativa\",\n","  \"AUX\"  : \"Verbo auxiliar\",\n","  \"ADV\"  : \"Advérbio\",\n","  \"ADP\"  : \"Preposição\",\n","  \"ADJ\"  : \"Adjetivo\"\n","}\n","  \n","#Explica a POS\n","def getPOSPalavraUniversalTraduzido(palavra):\n","  if palavra in palavra_universal_dict.keys():\n","      traduzido = palavra_universal_dict[palavra]\n","  else:\n","      traduzido = \"NA\" \n","  return traduzido"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"b01WgMSSKY_u"},"source":["### getSentencaSemStopWord\n","\n","Retorna uma lista dos tokens sem as stopwords."]},{"cell_type":"code","metadata":{"id":"rMb0uDWzKZXP"},"source":["def getSentencaSemStopWord(sentenca, stopwords):\n","\n","  # Lista dos tokens\n","  lista = []\n","\n","  # Percorre os tokens da sentença\n","  for i, token in enumerate(sentenca):\n","\n","    # Verifica se o token é uma stopword\n","    if token.lower() not in stopwords:\n","      lista.append(token)\n","\n","  # Retorna o documento\n","  return lista"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TouR4GjNJZD6"},"source":["### getSentencaSalientePOS\n","\n","Retorna uma lista das palavras do tipo especificado."]},{"cell_type":"code","metadata":{"id":"zxTCYFzcJZD6"},"source":["def getSentencaSalientePOS(sentenca, pos, tipo_saliente=\"NOUN\"):\n","  \n","  # Lista dos tokens\n","  lista = []\n","\n","  # Percorre a sentença\n","  for i, token in enumerate(sentenca):\n","\n","    # Verifica se o token é do tipo especeficado\n","    if pos[i] == tipo_saliente:\n","      lista.append(token)\n","\n","  # Retorna o documento\n","  return lista"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_xaeX0oTVQ5t"},"source":["###removeStopWords\n","\n","Remove as stopwords de um documento ou senteça."]},{"cell_type":"code","metadata":{"id":"NIaQ9bzBVQ5t"},"source":["def removeStopWord(documento, stopwords):\n","  \n","  # Remoção das stopwords do documento\n","  documento_sem_stopwords = [palavra for palavra in documento.split() if palavra.lower() not in stopwords]\n","\n","  # Concatena o documento sem os stopwords\n","  documento_limpo = \" \".join(documento_sem_stopwords)\n","\n","  # Retorna o documento\n","  return documento_limpo"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"A7NAe8ogCf1y"},"source":["### retornaRelevante\n","\n","Retorna somente os palavras do documento ou sentença do tipo especificado."]},{"cell_type":"code","metadata":{"id":"UNNfykypChn-"},"source":["def retornaRelevante(documento, classe_relevante=\"NOUN\"):\n","\n","  # Corrigir!\n","  # Utilizar o documento já tokenizado pelo spacy!!!!\n","  # Existe uma lista com o documento e a sentença tokenizada pelo spacy\n","  \n","  # Realiza o parsing no spacy\n","  doc = nlp(documento)\n","\n","  # Retorna a lista das palavras relevantes\n","  documento_com_substantivos = []\n","  for token in doc:\n","    #print(\"token:\", token.pos_)\n","    if token.pos_ == classe_relevante:\n","      documento_com_substantivos.append(token.text)\n","\n","  # Concatena o documento com os substantivos\n","  documento_concatenado = \" \".join(documento_com_substantivos)\n","\n","  # Retorna o documento\n","  return documento_concatenado"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IBY7q_uH8JSE"},"source":["# 4 BERT"]},{"cell_type":"markdown","source":["## 4.1 Modelo Pré-treinado BERT"],"metadata":{"id":"MBGTMy8Ic7GK"}},{"cell_type":"markdown","source":["### Funções Auxiliares"],"metadata":{"id":"uiuxdXe9t1BX"}},{"cell_type":"code","source":["def getNomeModeloBERT(model_args):\n","    '''    \n","    Recupera uma string com uma descrição do modelo BERT para nomes de arquivos e diretórios.\n","    \n","    Parâmetros:\n","    `model_args` - Objeto com os argumentos do modelo.       \n","    \n","    Retorno:\n","    `MODELO_BERT` - Nome do modelo BERT.\n","    '''\n","\n","    # Verifica o nome do modelo(default SEM_MODELO_BERT)\n","    MODELO_BERT = \"SEM_MODELO_BERT\"\n","    \n","    if 'neuralmind' in model_args.pretrained_model_name_or_path:\n","        MODELO_BERT = \"_BERTimbau\"\n","        \n","    else:\n","        if 'multilingual' in model_args.pretrained_model_name_or_path:\n","            MODELO_BERT = \"_BERTmultilingual\"\n","            \n","    return MODELO_BERT"],"metadata":{"id":"9Huw0x5kt1Le"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def getTamanhoBERT(model_args):\n","    '''    \n","    Recupera uma string com o tamanho(dimensão) do modelo BERT para nomes de arquivos e diretórios.\n","    \n","    Parâmetros:\n","    `model_args` - Objeto com os argumentos do modelo.       \n","    \n","    Retorno:\n","    `TAMANHO_BERT` - Nome do tamanho do modelo BERT.\n","    '''\n","    \n","    # Verifica o tamanho do modelo(default large)\n","    TAMANHO_BERT = \"_large\"\n","    \n","    if 'base' in model_args.pretrained_model_name_or_path:\n","        TAMANHO_BERT = \"_base\"\n","        \n","    return TAMANHO_BERT  "],"metadata":{"id":"jYJB4ik7t5xe"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Função download Modelo Pre-treinado BERT"],"metadata":{"id":"rHt4e5pAcEMd"}},{"cell_type":"code","source":["# Import das bibliotecas.\n","import zipfile # Biblioteca para descompactar\n","import shutil # iblioteca de manipulação arquivos de alto nível\n","\n","def downloadModeloPretreinado(model_args):\n","    \"\"\"\n","      Realiza o download do modelo BERT(MODELO) e retorna o diretório onde o modelo BERT(MODELO) foi descompactado.\n","    \n","      Parâmetros:\n","        `model_args` - Objeto com os argumentos do modelo.\n","    \n","      Retorno:\n","        `DIRETORIO_MODELO` - Diretório de download do modelo.\n","    \"\"\" \n","    \n","    # Nome diretório base modelo BERT\n","    NOME_DIRETORIO_BASE_MODELO = \"modeloBERT\"\n","    \n","    # Verifica se existe o diretório base do cohebert e retorna o nome do diretório\n","    DIRETORIO_COHEBERT = verificaDiretorioCoheBERT()\n","    \n","    # Recupera o nome ou caminho do modelo\n","    MODELO = model_args.pretrained_model_name_or_path\n","\n","    # Variável para setar o arquivo.\n","    URL_MODELO = None\n","\n","    if \"http\" in MODELO:\n","        URL_MODELO = MODELO\n","\n","    # Se a variável foi setada.\n","    if URL_MODELO:\n","\n","        # Diretório do modelo.\n","        DIRETORIO_MODELO = DIRETORIO_COHEBERT + \"/\" + NOME_DIRETORIO_BASE_MODELO\n","        \n","        # Recupera o nome do arquivo do modelo da url.\n","        NOME_ARQUIVO = URL_MODELO.split(\"/\")[-1]\n","\n","        # Nome do arquivo do vocabulário.\n","        ARQUIVO_VOCAB = \"vocab.txt\"\n","        \n","        # Caminho do arquivo na url.\n","        CAMINHO_ARQUIVO = URL_MODELO[0:len(URL_MODELO)-len(NOME_ARQUIVO)]\n","\n","        # Verifica se o diretório de descompactação existe no diretório corrente\n","        if os.path.exists(DIRETORIO_MODELO):\n","            logging.info(\"Apagando diretório existente do modelo!\")\n","            # Apaga o diretório e os arquivos existentes                     \n","            shutil.rmtree(DIRETORIO_MODELO)\n","        \n","        # Realiza o download do arquivo do modelo        \n","        downloadArquivo(URL_MODELO, NOME_ARQUIVO)\n","\n","        # Descompacta o arquivo no diretório de descompactação.                \n","        arquivo_zip = zipfile.ZipFile(NOME_ARQUIVO, \"r\")\n","        arquivo_zip.extractall(DIRETORIO_MODELO)\n","\n","        # Baixa o arquivo do vocabulário.\n","        # O vocabulário não está no arquivo compactado acima, mesma url mas arquivo diferente.\n","        URL_MODELO_VOCAB = CAMINHO_ARQUIVO + ARQUIVO_VOCAB\n","        # Coloca o arquivo do vocabulário no diretório do modelo.        \n","        downloadArquivo(URL_MODELO_VOCAB, DIRETORIO_MODELO + \"/\" + ARQUIVO_VOCAB)\n","        \n","        # Apaga o arquivo compactado\n","        os.remove(NOME_ARQUIVO)\n","\n","        logging.info(\"Diretório {} do modelo BERT pronta!\".format(DIRETORIO_MODELO))\n","\n","    else:\n","        DIRETORIO_MODELO = MODELO\n","        logging.info(\"Variável URL_MODELO não setada!\")\n","\n","    return DIRETORIO_MODELO"],"metadata":{"id":"peDUrV2ccEXA"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Copia o modelo do BERT ajustado"],"metadata":{"id":"V74WUpHqcfoI"}},{"cell_type":"code","source":["# Import das bibliotecas.\n","import shutil # iblioteca de manipulação arquivos de alto nível\n","\n","def copiaModeloAjustado(model_args):\n","    \"\"\" \n","      Copia o modelo ajustado BERT do GoogleDrive para o projeto.\n","    \n","      Parâmetros:\n","        `model_args` - Objeto com os argumentos do modelo.\n","    \n","      Retorno:\n","        `DIRETORIO_LOCAL_MODELO_AJUSTADO` - Diretório de download ajustado do modelo.\n","    \"\"\"\n","\n","    # Verifica o nome do modelo BERT a ser utilizado\n","    MODELO_BERT = getNomeModeloBERT(model_args)\n","\n","    # Verifica o tamanho do modelo(default large)\n","    TAMANHO_BERT = getTamanhoBERT(model_args)\n","\n","    # Verifica se existe o diretório base do cohebert e retorna o nome do diretório\n","    DIRETORIO_COHEBERT = verificaDiretorioCoheBERT()\n","\n","    # Diretório local de salvamento do modelo.\n","    DIRETORIO_LOCAL_MODELO_AJUSTADO = DIRETORIO_COHEBERT + \"/modelo_ajustado/\"\n","\n","    # Diretório remoto de salvamento do modelo no google drive.\n","    DIRETORIO_REMOTO_MODELO_AJUSTADO = \"/content/drive/MyDrive/Colab Notebooks/Data/\" + DIRETORIO_COHEBERT + \"/validacao_classificacao_palavra/holdout/modelo/\" + MODELO_BERT + TAMANHO_BERT\n","\n","    # Copia o arquivo do modelo para o diretório no Google Drive.\n","    shutil.copytree(DIRETORIO_REMOTO_MODELO_AJUSTADO, DIRETORIO_LOCAL_MODELO_AJUSTADO) \n","   \n","    logging.info(\"Modelo BERT ajustado copiado!\")\n","\n","    return DIRETORIO_LOCAL_MODELO_AJUSTADO"],"metadata":{"id":"iQMpf9yycf8f"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Verifica de onde utilizar o modelo do BERT"],"metadata":{"id":"eaneOhAKcO-3"}},{"cell_type":"code","source":["def verificaModelo(model_args):\n","    \"\"\" \n","    Verifica de onde utilizar o modelo.\n","    \n","    Parâmetros:\n","    `model_args` - Objeto com os argumentos do modelo.\n","    \n","    Retorno:\n","    `DIRETORIO_MODELO` - Diretório de download do modelo.\n","    \"\"\" \n","\n","    DIRETORIO_MODELO = None\n","    \n","    if model_args.usar_mcl_ajustado == True:        \n","        # Diretório do modelo\n","        DIRETORIO_MODELO = copiaModeloAjustado()\n","        \n","        logging.info(\"Usando modelo BERT ajustado.\")\n","        \n","    else:\n","        DIRETORIO_MODELO = downloadModeloPretreinado(model_args)\n","        logging.info(\"Usando modelo BERT pré-treinado.\")        \n","        \n","    return DIRETORIO_MODELO"],"metadata":{"id":"TTy1TXz3cPKS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 4.2 Tokenizador BERT"],"metadata":{"id":"6tKcaIfReqdy"}},{"cell_type":"markdown","source":["### Função carrega Tokenizador BERT\n","\n","O tokenizador utiliza WordPiece, veja em [artigo original](https://arxiv.org/pdf/1609.08144.pdf)."],"metadata":{"id":"e8n7Z5s-QZF8"}},{"cell_type":"code","source":["# Import das bibliotecas.\n","from transformers import BertTokenizer # Importando as bibliotecas do tokenizador BERT.\n","\n","def carregaTokenizadorModeloPretreinado(DIRETORIO_MODELO, model_args):\n","    \"\"\"\n","      Carrega o tokenizador do DIRETORIO_MODELO.\n","      O tokenizador utiliza WordPiece.\n","      Carregando o tokenizador do diretório \"./modelo/\" do diretório padrão se variável `DIRETORIO_MODELO` setada.\n","      Caso contrário carrega da comunidade\n","      Por default(`do_lower_case=True`) todas as letras são colocadas para minúsculas. Para ignorar a conversão para minúsculo use o parâmetro `do_lower_case=False`. Esta opção também considera as letras acentuadas(ãçéí...), que são necessárias a língua portuguesa.\n","      O parâmetro `do_lower_case` interfere na quantidade tokens a ser gerado a partir de um texto. Quando igual a `False` reduz a quantidade de tokens gerados.\n","    \n","      Parâmetros:\n","        `DIRETORIO_MODELO` - Diretório a ser utilizado pelo modelo BERT.           \n","        `model_args` - Objeto com os argumentos do modelo.       \n","    \n","      Retorno:\n","        `tokenizer` - Tokenizador BERT.\n","    \"\"\"\n","\n","    tokenizer = None\n","    \n","    # Se a variável DIRETORIO_MODELO foi setada.\n","    if DIRETORIO_MODELO:\n","        # Carregando o Tokenizador.\n","        logging.info(\"Carregando o tokenizador BERT do diretório {}.\".format(DIRETORIO_MODELO))\n","\n","        tokenizer = BertTokenizer.from_pretrained(DIRETORIO_MODELO, do_lower_case=model_args.do_lower_case)\n","\n","    else:\n","        # Carregando o Tokenizador da comunidade.\n","        logging.info(\"Carregando o tokenizador BERT da comunidade.\")\n","\n","        tokenizer = BertTokenizer.from_pretrained(model_args.pretrained_model_name_or_path, do_lower_case=model_args.do_lower_case)\n","\n","    return tokenizer"],"metadata":{"id":"mzAuptkwQZR3"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 4.3 Carrega o modelo e tokenizador BERT\n","\n","Lista de modelos da comunidade:\n","* https://huggingface.co/models\n","\n","Português(https://github.com/neuralmind-ai/portuguese-bert):  \n","* **\"neuralmind/bert-base-portuguese-cased\"**\n","* **\"neuralmind/bert-large-portuguese-cased\"**"],"metadata":{"id":"GYRV9KfHQE6v"}},{"cell_type":"markdown","source":["### Função carrega modelo BERT medida"],"metadata":{"id":"-pZZrUKRhR3e"}},{"cell_type":"code","source":["# Import das bibliotecas.\n","from transformers import BertModel # Importando as bibliotecas do Modelo BERT.\n","\n","def carregaModeloMedida(DIRETORIO_MODELO, model_args):\n","    \"\"\"\n","      Carrega o modelo e retorna o modelo.\n","    \n","      Parâmetros:\n","        `DIRETORIO_MODELO` - Diretório a ser utilizado pelo modelo BERT.           \n","        `model_args` - Objeto com os argumentos do modelo.   \n","    \n","      Retorno:\n","        `model` - Um objeto do modelo BERT carregado.\n","    \"\"\"\n","\n","    # Variável para setar o arquivo.\n","    URL_MODELO = None\n","\n","    if \"http\" in model_args.pretrained_model_name_or_path:\n","        URL_MODELO = model_args.pretrained_model_name_or_path\n","\n","    # Se a variável URL_MODELO foi setada\n","    if URL_MODELO:        \n","        # Carregando o Modelo BERT\n","        logging.info(\"Carregando o modelo BERT do diretório {} para cálculo de medidas.\".format(DIRETORIO_MODELO))\n","\n","        model = BertModel.from_pretrained(DIRETORIO_MODELO,\n","                                          output_attentions=model_args.output_attentions,\n","                                          output_hidden_states=model_args.output_hidden_states)\n","        \n","    else:\n","        # Carregando o Modelo BERT da comunidade\n","        logging.info(\"Carregando o modelo BERT da comunidade {} para cálculo de medidas.\".format(model_args.pretrained_model_name_or_path))\n","\n","        model = BertModel.from_pretrained(model_args.pretrained_model_name_or_path,\n","                                          output_attentions=model_args.output_attentions,\n","                                          output_hidden_states=model_args.output_hidden_states)\n","\n","    return model"],"metadata":{"id":"1JUEyjCChUQh"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Função carrega o BERT"],"metadata":{"id":"-uFDhRTZe2Js"}},{"cell_type":"code","source":["def carregaBERT(model_args):\n","    \"\"\" \n","      Carrega o BERT para cálculo de medida ou classificação e retorna o modelo e o tokenizador.\n","      O tipo do model retornado pode ser BertModel ou BertForSequenceClassification, depende do tipo de model_args.\n","    \n","      Parâmetros:\n","        `model_args` - Objeto com os argumentos do modelo.       \n","          - Se model_args = ModeloArgumentosClassificacao deve ser carregado o BERT para classificação(BertForSequenceClassification).\n","          - Se model_args = ModeloArgumentosMedida deve ser carregado o BERT para cálculo de medida(BertModel).\n","\n","      Retorno:    \n","        `model` - Um objeto do modelo BERT carregado.       \n","        `tokenizer` - Um objeto tokenizador BERT carregado.       \n","    \"\"\"\n","            \n","    # Verifica a origem do modelo\n","    DIRETORIO_MODELO = verificaModelo(model_args)\n","    \n","    # Variável para conter o modelo\n","    model = None\n","    \n","    # Carrega o modelo para cálculo da medida\n","    model = carregaModeloMedida(DIRETORIO_MODELO, model_args)\n","                \n","    # Carrega o tokenizador. \n","    # O tokenizador é o mesmo para o classificador e medidor.\n","    tokenizer = carregaTokenizadorModeloPretreinado(DIRETORIO_MODELO, model_args)\n","    \n","    return model, tokenizer"],"metadata":{"id":"QVtAUbUBe2iS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Carrega o BERT"],"metadata":{"id":"x5NTxBRKfAcT"}},{"cell_type":"code","source":["# Carrega o modelo e tokenizador do BERT\n","model, tokenizer = carregaBERT(model_args)"],"metadata":{"id":"ZYMLJJYSQHY3","colab":{"base_uri":"https://localhost:8080/","referenced_widgets":["7aa33cbd096e4c80abc8fd16dc4fcb38","fbf64941236e44fba67bb80b12b8312a","398faa3e866b4b199f67e6e29423ce6e","9135ce00af2c4b0bb81951f1d3dbac70","ef6df07b1db34a5792706eb323440cf1","0227e15041a94f84a4157ffdf39d1ce0","8b36341fd519415c933519f900a1a9bd","e17a6a9f9dc3455a9e49bebcafa5d8bf","57622515b183474c9e153d8646c97f19","8da482a5a3d74f0bb581e43ca0093049","08cb2357359a4c15835bde3e4b12aab2","72849c95ee044651b6d4766cb31e498c","b8e0b710acc848ed95e1137d550d3656","0deddbcde3284334abbc6b235f30fe7e","3f2971d2cb844a358acba98e296d8aca","61245954483a4266b76e3af50d23be18","602055f5ed124b9380ffe81ced2078b2","86acbef222964dd587bf87af09afb73a","832536b39be14073add22d78c649b203","564498dd006d4a0faf2a1a9e5161591f","82766f4e518f49a282f76f33b7e19890","af301d2c6d3547e3a734bccb7f683c95","7e21fbc970164df8a8c2fceb0ef48131","2606785f448541898b83afe2bc11ad35","e480507bb0664995a8d3a19b4a76b0bf","fad4af5fa3b64d7ab002d00bf2ad43f8","ff149fe978814ffcbab68056519a3166","b313b796ef3d471ab25eddd9ef2be53e","b2e6e946c9f5421cbe5d00a396d55ac3","e7c20f0f3b914aca8a49449600ce8d08","630f9731859049bf9d651e52b942bbe4","9128ad958ad14f60823f90a54b795c36","d4609acc3be7406d8252a3c95f4473e2","de9b0a46cb994c8395217a27c9b1cd73","6746b08605564b86b465606139a8de8b","c50f4124f867455484a7dd7aa2a3ee33","4c209020923d4d458417d9d0c47888d9","cd74b6c8b5c5459180f04a540e23f4fe","0faf0dfa9a614ffc8bfb750ff3886410","f9cc11cab95649cc878ece1caaa9ff50","a4c03c41ad5248f1b7773d60512355e5","32b666245a884d81a24fefe94b8ffc2b","c06670a279e14270b1353995d1d36712","c4dbee8481f54e5eb668c50460e78bb4","d8d671cea390408889afc73841be070e","c79cde885c0b475aa5545e50ef81520f","3d8bda2258db479aa431decd13c6aee1","0a5ee1fd381c4bd3acfa0baf8acf6c37","9ffb80f99b814ba98780d4a2d035a829","bffee4b872684462bd55aff09b6a1cb9","66111787c73249719915cb8d83213207","53c103f27401422c842e0c87045afa24","c60122451d0a442f90e5272342c2b3b4","f5b9747bbe92419e8b60d56621feb5c9","5f10149cd0134886a9ead9ab213958e5","d4d793408e6f47f4941807b8153de728","24fa33f45d37459f9206b98ae6d41f38","5233cb77f9554df9a1b42c1e19ee2b81","e3aba45623e242209c344538f782aab4","6cf3d9d84e554721a814c91de24e5499","ccf8dc74f9bf440495e1024cdf735ec9","f895bb2c60b24eb08b8f4034aebce88b","0f9738c828974a538617c6b21e1cb2f0","f618751679d34d3e91542d25be259c61","c1bbc315d34c4bc98daa920072867c5d","9e376fb3f394432aa70e4cbfe3b6a242"]},"executionInfo":{"status":"ok","timestamp":1669133371740,"user_tz":180,"elapsed":43223,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"9eb4a781-4d71-42c7-c0ba-c35fc99a6d83"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:root:Variável URL_MODELO não setada!\n","INFO:root:Usando modelo BERT pré-treinado.\n","INFO:root:Carregando o modelo BERT da comunidade neuralmind/bert-large-portuguese-cased para cálculo de medidas.\n"]},{"output_type":"display_data","data":{"text/plain":["Downloading:   0%|          | 0.00/648 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7aa33cbd096e4c80abc8fd16dc4fcb38"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading:   0%|          | 0.00/1.34G [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"72849c95ee044651b6d4766cb31e498c"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["INFO:root:Carregando o tokenizador BERT do diretório neuralmind/bert-large-portuguese-cased.\n"]},{"output_type":"display_data","data":{"text/plain":["Downloading:   0%|          | 0.00/210k [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7e21fbc970164df8a8c2fceb0ef48131"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading:   0%|          | 0.00/2.00 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"de9b0a46cb994c8395217a27c9b1cd73"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading:   0%|          | 0.00/112 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d8d671cea390408889afc73841be070e"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading:   0%|          | 0.00/155 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d4d793408e6f47f4941807b8153de728"}},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"d7KprWqyZBQZ"},"source":["### Recupera detalhes do BERT"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"D6sPjTQnuQV2"},"outputs":[],"source":["# Verifica o nome do modelo BERT a ser utilizado\n","MODELO_BERT = getNomeModeloBERT(model_args)\n","\n","# Verifica o tamanho do modelo(default large)\n","TAMANHO_BERT = getTamanhoBERT(model_args)"]},{"cell_type":"markdown","metadata":{"id":"khTFfBVbnsx9"},"source":["## 4.4 Funções auxiliares do BERT"]},{"cell_type":"markdown","source":["### concatenaListas"],"metadata":{"id":"lCJzsw8T0I-5"}},{"cell_type":"code","source":["# Import das bibliotecas.\n","\n","def concatenaListas(lista, pos=1):\n","  lista_concat = []\n","    \n","  for x in lista:\n","      lista_concat = lista_concat + x[pos]\n","  \n","  return lista_concat"],"metadata":{"id":"IpmDZ1mI0JHR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"s42mgtmSZ8MR"},"source":["### getEmbeddingsCamadas\n","\n","Funções que recuperam os embeddings das camadas:\n","- Primeira camada;\n","- Penúltima camada;\n","- Ùltima camada;\n","- Soma das 4 últimas camadas;\n","- Concatenação das 4 últimas camadas;\n","- Soma de todas as camadas."]},{"cell_type":"code","metadata":{"id":"sgo3EBTRZ9-3"},"source":["def getEmbeddingPrimeiraCamada(output):\n","  # outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","  # hidden_states é uma lista python, e cada elemento um tensor pytorch no formado <lote> x <qtde_tokens> x <768 ou 1024>.\n","      \n","  # Retorna todas a primeira(-1) camada\n","  # Entrada: List das camadas(13 ou 25) (<1(lote)> x <qtde_tokens> <768 ou 1024>)  \n","  resultado = output[2][0]\n","  # Saída: (<1(lote)> x <qtde_tokens> <768 ou 1024>)  \n","  \n","  return resultado\n","\n","def getEmbeddingPenultimaCamada(output):\n","  # outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","  # hidden_states é uma lista python, e cada elemento um tensor pytorch no formado <lote> x <qtde_tokens> x <768 ou 1024>.\n","      \n","  # Retorna todas a primeira(-1) camada\n","  # Entrada: List das camadas(13 ou 25) (<1(lote)> x <qtde_tokens> <768 ou 1024>)  \n","  resultado = output[2][-2]\n","  # Saída: (<1(lote)> x <qtde_tokens> <768 ou 1024>)  \n","  \n","  return resultado\n","\n","def getEmbeddingUltimaCamada(output):\n","  # outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","  # hidden_states é uma lista python, e cada elemento um tensor pytorch no formado <lote> x <qtde_tokens> x <768 ou 1024>.\n","     \n","  # Retorna todas a primeira(-1) camada\n","  # Entrada: List das camadas(13 ou 25) (<1(lote)> x <qtde_tokens> <768 ou 1024>)  \n","  resultado = output[2][-1]\n","  # Saída: (<1(lote)> x <qtde_tokens> <768 ou 1024>)  \n","  \n","  return resultado    \n","\n","def getEmbeddingSoma4UltimasCamadas(output):\n","  # outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","  # hidden_states é uma lista python, e cada elemento um tensor pytorch no formado <lote> x <qtde_tokens> x <768 ou 1024>.\n","      \n","  # Retorna todas a primeira(-1) camada\n","  # Entrada: List das camadas(13 ou 25) (<1(lote)> x <qtde_tokens> <768 ou 1024>)  \n","  embedding_camadas = output[2][-4:]\n","  # Saída: List das camadas(4) (<1(lote)> x <qtde_tokens> <768 ou 1024>)  \n","\n","  # Usa o método `stack` para criar uma nova dimensão no tensor \n","  # com a concateção dos tensores dos embeddings.        \n","  #Entrada: List das camadas(4) (<1(lote)> x <qtde_tokens> <768 ou 1024>)  \n","  resultado_stack = torch.stack(embedding_camadas, dim=0)\n","  # Saída: <4> x <1(lote)> x <qtde_tokens> x <768 ou 1024>\n","  \n","  # Realiza a soma dos embeddings de todos os tokens para as camadas\n","  # Entrada: <4> x <1(lote)> x <qtde_tokens> x <768 ou 1024>\n","  resultado = torch.sum(resultado_stack, dim=0)\n","  # Saida: <1(lote)> x <qtde_tokens> x <768 ou 1024>\n","  \n","  return resultado\n","\n","def getEmbeddingConcat4UltimasCamadas(output):  \n","  # outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","  # hidden_states é uma lista python, e cada elemento um tensor pytorch no formado <lote> x <qtde_tokens> x <768 ou 1024>.\n","      \n","  # Cria uma lista com os tensores a serem concatenados\n","  # Entrada: List das camadas(13 ou 25) (<1(lote)> x <qtde_tokens> x <768 ou 1024>)  \n","  # Lista com os tensores a serem concatenados  \n","  lista_concat = []\n","\n","  # Percorre os 4 últimos\n","  for i in [-1,-2,-3,-4]:\n","      # Concatena da lista\n","      lista_concat.append(output[2][i])\n","\n","  # Saída: Entrada: List das camadas(4) (<1(lote)> x <qtde_tokens> x <768 ou 1024>)    \n","  # Realiza a concatenação dos embeddings de todos as camadas\n","  # Saída: Entrada: List das camadas(4) (<1(lote)> x <qtde_tokens> x <768 ou 1024>)  \n","  resultado = torch.cat(lista_concat, dim=-1)\n","  \n","  # Saída: Entrada: (<1(lote)> x <qtde_tokens> x <3072 ou 4096>)    \n","  return resultado   \n","\n","def getEmbeddingSomaTodasAsCamada(output):\n","  # outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","  # hidden_states é uma lista python, e cada elemento um tensor pytorch no formado <lote> x <qtde_tokens> x <768 ou 1024>.\n","   \n","  # Retorna todas as camadas descontando a primeira(0)\n","  # Entrada: List das camadas(13 ou 25) (<1(lote)> x <qtde_tokens> <768 ou 1024>)  \n","  embedding_camadas = output[2][1:]\n","  # Saída: List das camadas(12 ou 24) (<1(lote)> x <qtde_tokens> <768 ou 1024>)  \n","  \n","  # Usa o método `stack` para criar uma nova dimensão no tensor \n","  # com a concateção dos tensores dos embeddings.        \n","  #Entrada: List das camadas(12 ou 24) (<1(lote)> x <qtde_tokens> <768 ou 1024>)  \n","  resultado_stack = torch.stack(embedding_camadas, dim=0)\n","  # Saída: <12 ou 24> x <1(lote)> x <qtde_tokens> x <768 ou 1024>\n","    \n","  # Realiza a soma dos embeddings de todos os tokens para as camadas\n","  # Entrada: <12 ou 24> x <1(lote)> x <qtde_tokens> x <768 ou 1024>\n","  resultado = torch.sum(resultado_stack, dim=0)\n","  # Saida: <1(lote)> x <qtde_tokens> x <768 ou 1024>\n","    \n","  return resultado"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"q7nx_eZ8hSlr"},"source":["### getEmbeddingsVisual\n","\n","Função para gerar as coordenadas de plotagem a partir das sentenças de embeddings.\n","\n","Existe uma função para os tipos de camadas utilizadas:\n","- Ùltima camada;\n","- Soma das 4 últimas camadas;\n","- Concatenação das 4 últimas camadas;\n","- Soma de todas as camadas."]},{"cell_type":"code","metadata":{"id":"pLdbOT8-g43V"},"source":["def getEmbeddingsVisualUltimaCamada(documento, modelo, tokenizer):\n","    \n","    # Adiciona os tokens especiais\n","    documento_marcado = \"[CLS] \" + documento + \" [SEP]\"\n","\n","    # Divide a sentença em tokens\n","    documento_tokenizado = tokenizer.tokenize(documento_marcado)\n","\n","    # Mapeia as strings dos tokens em seus índices do vocabuário    \n","    tokens_indexados = tokenizer.convert_tokens_to_ids(documento_tokenizado)\n","    \n","    # Marca cada um dos tokens como pertencentes à sentença \"1\".\n","    mascara_atencao = [1] * len(documento_tokenizado)\n","\n","    # Converte a entrada em tensores\n","    tokens_tensores = torch.as_tensor([tokens_indexados])\n","    mascara_atencao_tensores = torch.as_tensor([mascara_atencao])\n","    \n","    # Prediz os atributos dos estados ocultos para cada camada\n","    with torch.no_grad():        \n","        # Retorno de model quando ´output_hidden_states=True´ é setado:  \n","        #outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","        outputs = modelo(tokens_tensores, mascara_atencao_tensores)\n","\n","    # Camada embedding    \n","    camada = getEmbeddingUltimaCamada(outputs)\n","\n","    # Remove a dimensão 1, o lote \"batches\".\n","    token_embeddings = torch.squeeze(camada, dim=0)\n","\n","    # Recupera os embeddings dos tokens como um vetor\n","    embeddings = token_embeddings.numpy()\n","\n","    # Converte para um array\n","    W = np.array(embeddings)\n","    # Transforma em um array\n","    B = np.array([embeddings[0], embeddings[-1]])\n","    # Invertee B.T\n","    Bi = np.linalg.pinv(B.T)\n","\n","    #Projeta a palavra no espaço\n","    Wp = np.matmul(Bi,W.T)\n","\n","    return Wp, documento_tokenizado"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"eAf9lJJ2hZbt"},"source":["def getEmbeddingsVisualSoma4UltimasCamadas(documento, modelo, tokenizer):\n","    \n","    # Adiciona os tokens especiais\n","    documento_marcado = \"[CLS] \" + documento + \" [SEP]\"\n","\n","    # Divide a sentença em tokens\n","    documento_tokenizado = tokenizer.tokenize(documento_marcado)\n","\n","    # Mapeia as strings dos tokens em seus índices do vocabuário    \n","    tokens_indexados = tokenizer.convert_tokens_to_ids(documento_tokenizado)\n","    \n","    # Marca cada um dos tokens como pertencentes à sentença \"1\".\n","    mascara_atencao = [1] * len(documento_tokenizado)\n","\n","    # Converte a entrada em tensores\n","    tokens_tensores = torch.as_tensor([tokens_indexados])\n","    mascara_atencao_tensores = torch.as_tensor([mascara_atencao])\n","    \n","    # Prediz os atributos dos estados ocultos para cada camada\n","    with torch.no_grad():        \n","        # Retorno de model quando ´output_hidden_states=True´ é setado:  \n","        #outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","        outputs = modelo(tokens_tensores, mascara_atencao_tensores)\n","\n","    # Camada embedding    \n","    camada = getEmbeddingSoma4UltimasCamadas(outputs)\n","\n","    # Remove a dimensão 1, o lote \"batches\".\n","    token_embeddings = torch.squeeze(camada, dim=0)\n","\n","    # Recupera os embeddings dos tokens como um vetor\n","    embeddings = token_embeddings.numpy()\n","\n","    # Converte para um array\n","    W = np.array(embeddings)\n","    # Transforma em um array\n","    B = np.array([embeddings[0], embeddings[-1]])\n","    # Invertee B.T\n","    Bi = np.linalg.pinv(B.T)\n","\n","    #Projeta a palavra no espaço\n","    Wp = np.matmul(Bi,W.T)\n","\n","    return Wp, documento_tokenizado"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4XpwSN1ghpnz"},"source":["def getEmbeddingsVisualConcat4UltimasCamadas(documento, modelo, tokenizer):\n","    \n","    # Adiciona os tokens especiais\n","    documento_marcado = \"[CLS] \" + documento + \" [SEP]\"\n","\n","    # Divide a sentença em tokens\n","    documento_tokenizado = tokenizer.tokenize(documento_marcado)\n","\n","    # Mapeia as strings dos tokens em seus índices do vocabuário    \n","    tokens_indexados = tokenizer.convert_tokens_to_ids(documento_tokenizado)\n","    \n","    # Marca cada um dos tokens como pertencentes à sentença \"1\".\n","    mascara_atencao = [1] * len(documento_tokenizado)\n","\n","    # Converte a entrada em tensores\n","    tokens_tensores = torch.as_tensor([tokens_indexados])\n","    mascara_atencao_tensores = torch.as_tensor([mascara_atencao])\n","    \n","    # Prediz os atributos dos estados ocultos para cada camada\n","    with torch.no_grad():        \n","        # Retorno de model quando ´output_hidden_states=True´ é setado:  \n","        #outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","        outputs = modelo(tokens_tensores, mascara_atencao_tensores)\n","\n","    # Camada embedding        \n","    camada = getEmbeddingConcat4UltimasCamadas(outputs)\n","\n","    # Remove a dimensão 1, o lote \"batches\".\n","    token_embeddings = torch.squeeze(camada, dim=0)\n","\n","    # Recupera os embeddings dos tokens como um vetor\n","    embeddings = token_embeddings.numpy()\n","\n","    # Converte para um array\n","    W = np.array(embeddings)\n","    # Transforma em um array\n","    B = np.array([embeddings[0], embeddings[-1]])\n","    # Invertee B.T\n","    Bi = np.linalg.pinv(B.T)\n","\n","    #Projeta a palavra no espaço\n","    Wp = np.matmul(Bi,W.T)\n","\n","    return Wp, documento_tokenizado"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"L3KU1EFrnSPK"},"source":["def getEmbeddingsVisualSomaTodasAsCamadas(documento, modelo, tokenizer):\n","    \n","    # Adiciona os tokens especiais\n","    documento_marcado = \"[CLS] \" + documento + \" [SEP]\"\n","\n","    # Divide a sentença em tokens\n","    documento_tokenizado = tokenizer.tokenize(documento_marcado)\n","\n","    # Mapeia as strings dos tokens em seus índices do vocabuário    \n","    tokens_indexados = tokenizer.convert_tokens_to_ids(documento_tokenizado)\n","    \n","    # Marca cada um dos tokens como pertencentes à sentença \"1\".\n","    mascara_atencao = [1] * len(documento_tokenizado)\n","\n","    # Converte a entrada em tensores\n","    tokens_tensores = torch.as_tensor([tokens_indexados])\n","    mascara_atencao_tensores = torch.as_tensor([mascara_atencao])\n","    \n","    # Prediz os atributos dos estados ocultos para cada camada\n","    with torch.no_grad():        \n","        # Retorno de model quando ´output_hidden_states=True´ é setado:  \n","        #outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","        outputs = modelo(tokens_tensores, mascara_atencao_tensores)\n","\n","    # Camada embedding    \n","    camada = getEmbeddingSomaTodasAsCamada(outputs)\n","\n","    # Remove a dimensão 1, o lote \"batches\".\n","    token_embeddings = torch.squeeze(camada, dim=0)\n","\n","    # Recupera os embeddings dos tokens como um vetor\n","    embeddings = token_embeddings.numpy()\n","\n","    # Converte para um array\n","    W = np.array(embeddings)\n","    # Transforma em um array\n","    B = np.array([embeddings[0], embeddings[-1]])\n","    # Invertee B.T\n","    Bi = np.linalg.pinv(B.T)\n","\n","    #Projeta a palavra no espaço\n","    Wp = np.matmul(Bi,W.T)\n","\n","    return Wp, documento_tokenizado"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Y8MjE0utzlZT"},"source":["### getEmbeddings\n","\n","Função para gerar os embeddings de sentenças.\n","\n","Existe uma função para os tipos de camadas utilizadas:\n","- Ùltima camada;\n","- Soma das 4 últimas camadas;\n","- Concatenação das 4 últimas camadas;\n","- Soma de todas as camadas."]},{"cell_type":"code","metadata":{"id":"2QcqOuwS067Q"},"source":["def getEmbeddingsUltimaCamada(documento, modelo, tokenizer):\n","    \n","    # Adiciona os tokens especiais\n","    documento_marcado = \"[CLS] \" + documento + \" [SEP]\"\n","\n","    # Divide a sentença em tokens\n","    documento_tokenizado = tokenizer.tokenize(documento_marcado)\n","\n","    # Mapeia as strings dos tokens em seus índices do vocabuário    \n","    tokens_indexados = tokenizer.convert_tokens_to_ids(documento_tokenizado)\n","    \n","    # Marca cada um dos tokens como pertencentes à sentença \"1\".\n","    mascara_atencao = [1] * len(documento_tokenizado)\n","\n","    # Converte a entrada em tensores\n","    tokens_tensores = torch.as_tensor([tokens_indexados])\n","    mascara_atencao_tensores = torch.as_tensor([mascara_atencao])\n","    \n","    # Prediz os atributos dos estados ocultos para cada camada\n","    with torch.no_grad():        \n","        # Retorno de model quando ´output_hidden_states=True´ é setado:  \n","        #outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","        outputs = modelo(tokens_tensores, mascara_atencao_tensores)\n","\n","    # Camada embedding    \n","    camada = getEmbeddingUltimaCamada(outputs)\n","\n","    # Remove a dimensão 1, o lote \"batches\".\n","    token_embeddings = torch.squeeze(camada, dim=0)\n"," \n","    return token_embeddings, documento_tokenizado"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BK1wDGBl067Y"},"source":["def getEmbeddingsSoma4UltimasCamadas(documento, modelo, tokenizer):\n","    \n","    # Adiciona os tokens especiais\n","    documento_marcado = \"[CLS] \" + documento + \" [SEP]\"\n","\n","    # Divide a sentença em tokens\n","    documento_tokenizado = tokenizer.tokenize(documento_marcado)\n","\n","    # Mapeia as strings dos tokens em seus índices do vocabuário    \n","    tokens_indexados = tokenizer.convert_tokens_to_ids(documento_tokenizado)\n","    \n","    # Marca cada um dos tokens como pertencentes à sentença \"1\".\n","    mascara_atencao = [1] * len(documento_tokenizado)\n","\n","    # Converte a entrada em tensores\n","    tokens_tensores = torch.as_tensor([tokens_indexados])\n","    mascara_atencao_tensores = torch.as_tensor([mascara_atencao])\n","    \n","    # Prediz os atributos dos estados ocultos para cada camada\n","    with torch.no_grad():        \n","        # Retorno de model quando ´output_hidden_states=True´ é setado:  \n","        #outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","        outputs = modelo(tokens_tensores, mascara_atencao_tensores)\n","\n","    # Camada embedding    \n","    camada = getEmbeddingSoma4UltimasCamadas(outputs)\n","\n","    # Remove a dimensão 1, o lote \"batches\".\n","    token_embeddings = torch.squeeze(camada, dim=0)\n","   \n","    return token_embeddings, documento_tokenizado"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Hym19Hxr067Y"},"source":["def getEmbeddingsConcat4UltimasCamadas(documento, modelo, tokenizer):\n","    # Adiciona os tokens especiais\n","    documento_marcado = \"[CLS] \" + documento + \" [SEP]\"\n","\n","    # Divide a sentença em tokens\n","    documento_tokenizado = tokenizer.tokenize(documento_marcado)\n","\n","    # Mapeia as strings dos tokens em seus índices do vocabuário    \n","    tokens_indexados = tokenizer.convert_tokens_to_ids(documento_tokenizado)\n","\n","    # Marca cada um dos tokens como pertencentes à sentença \"1\".\n","    mascara_atencao = [1] * len(documento_tokenizado)\n","    \n","    # Converte a entrada em tensores\n","    tokens_tensores = torch.as_tensor([tokens_indexados])\n","    mascara_atencao_tensores = torch.as_tensor([mascara_atencao])\n","\n","    # Prediz os atributos dos estados ocultos para cada camada\n","    with torch.no_grad():        \n","        # Retorno de model quando ´output_hidden_states=True´ é setado:  \n","        #outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","        outputs = modelo(tokens_tensores, mascara_atencao_tensores)\n","    \n","    # Camada embedding    \n","    camada = getEmbeddingConcat4UltimasCamadas(outputs)\n","\n","    # Remove a dimensão 1, o lote \"batches\".\n","    token_embeddings = torch.squeeze(camada, dim=0)\n","\n","    return token_embeddings, documento_tokenizado"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"U-PLZiUR067Z"},"source":["def getEmbeddingsSomaTodasAsCamadas(documento, modelo, tokenizer):\n","    \n","    # Adiciona os tokens especiais\n","    documento_marcado = \"[CLS] \" + documento + \" [SEP]\"\n","\n","    # Divide a sentença em tokens\n","    documento_tokenizado = tokenizer.tokenize(documento_marcado)\n","\n","    # Mapeia as strings dos tokens em seus índices do vocabuário    \n","    tokens_indexados = tokenizer.convert_tokens_to_ids(documento_tokenizado)\n","    \n","    # Marca cada um dos tokens como pertencentes à sentença \"1\".\n","    mascara_atencao = [1] * len(documento_tokenizado)\n","\n","    # Converte a entrada em tensores\n","    tokens_tensores = torch.as_tensor([tokens_indexados])\n","    mascara_atencao_tensores = torch.as_tensor([mascara_atencao])\n","    \n","    # Prediz os atributos dos estados ocultos para cada camada\n","    with torch.no_grad():        \n","        # Retorno de model quando ´output_hidden_states=True´ é setado:  \n","        #outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","        outputs = modelo(tokens_tensores, mascara_atencao_tensores)\n","\n","    # Camada embedding    \n","    camada = getEmbeddingSomaTodasAsCamada(outputs)\n","\n","    # Remove a dimensão 1, o lote \"batches\".\n","    token_embeddings = torch.squeeze(camada, dim=0)\n","\n","    return token_embeddings, documento_tokenizado"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zFd1rse11DpZ"},"source":["### getDocumentoTokenizado \n","\n","Retorna o documento tokenizado"]},{"cell_type":"code","metadata":{"id":"gvWIBFTLJ7z9"},"source":["def getDocumentoTokenizado(documento, tokenizer):\n","    \"\"\"\n","      Retorna o documento tokenizado pelo BERT.\n","    \n","      Parâmetros:\n","      `documento` - Documento a ser tokenizado.\n","      `tokenizer` - Tokenizador do BERT.\n","    \"\"\"    \n","\n","    # Adiciona os tokens especiais.\n","    documento_marcado = \"[CLS] \" + documento + \" [SEP]\"\n","\n","    # Documento tokenizado\n","    documento_tokenizado = tokenizer.tokenize(documento_marcado)\n","\n","    del tokenizer\n","\n","    return documento_tokenizado    "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3wvgXwN81RCz"},"source":["### encontrarIndiceSubLista \n","\n","Retorna os índices de início e fim da sublista na lista"]},{"cell_type":"code","metadata":{"id":"abS44M4yvFxf"},"source":["# Localiza os índices de início e fim de uma sublista em uma lista\n","def encontrarIndiceSubLista(lista, sublista):\n","\n","    \"\"\"\n","      Localiza os índices de início e fim de uma sublista em uma lista.\n","    \n","      Parâmetros:\n","      `lista` - Uma lista.\n","      `sublista` - Uma sublista a ser localizada na lista.\n","    \"\"\"    \n","    # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore%E2%80%93Horspool_algorithm\n","\n","    # Recupera o tamanho da lista \n","    h = len(lista)\n","    # Recupera o tamanho da sublista\n","    n = len(sublista)    \n","    skip = {sublista[i]: n - i - 1 for i in range(n - 1)}\n","    i = n - 1\n","    while i < h:\n","        for j in range(n):\n","            if lista[i - j] != sublista[-j - 1]:\n","                i += skip.get(lista[i], n)\n","                break\n","        else:\n","            indice_inicio = i - n + 1\n","            indice_fim = indice_inicio + len(sublista)-1\n","            return indice_inicio, indice_fim\n","    return -1, -1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kGL37G6XFcwp"},"source":["### getEmbeddingSentencaEmbeddingDocumentoComTodasPalavras\n","\n","A partir dos embeddings do documento, localiza o indíce de início e fim de uma sentença no documento e retorna os embeddings da sentença."]},{"cell_type":"code","metadata":{"id":"uI07Y_M8__HG"},"source":["def getEmbeddingSentencaEmbeddingDocumentoComTodasPalavras(embedding_documento, \n","                                                           token_BERT_documento, \n","                                                           sentenca, \n","                                                           tokenizer):\n","\n","  # Tokeniza a sentença\n","  sentenca_tokenizada_BERT = getDocumentoTokenizado(sentenca, tokenizer)\n","  #print(sentenca_tokenizada_BERT)\n","\n","  # Remove os tokens de início e fim da sentença\n","  sentenca_tokenizada_BERT.remove(\"[CLS]\")\n","  sentenca_tokenizada_BERT.remove(\"[SEP]\")    \n","  #print(len(sentenca_tokenizada_BERT))\n","  \n","  # Localiza os índices dos tokens da sentença no documento\n","  inicio, fim = encontrarIndiceSubLista(token_BERT_documento, sentenca_tokenizada_BERT)\n","  #print(inicio,fim) \n"," \n","  # Recupera os embeddings dos tokens da sentença a partir dos embeddings do documento\n","  embedding_sentenca = embedding_documento[inicio:fim+1]\n","  #print(\"embedding_sentenca=\", embedding_sentenca.shape)\n","\n","  del tokenizer\n","  del token_BERT_documento\n","  del embedding_documento\n","  \n","  # Retorna o embedding da sentença no documento\n","  return embedding_sentenca, sentenca_tokenizada_BERT"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"THFhXGGmIO_r"},"source":["### getEmbeddingDocumentoComTodasPalavrasMean"]},{"cell_type":"code","metadata":{"id":"IhW_OiEsIPJI"},"source":["# Importa a biblioteca\n","import torch\n","\n","def getEmbeddingDocumentoComTodasPalavrasMean(embedding_documento):\n","  \"\"\"\n","    Calcula a média dos embeddings do documento excluindo os tokens \n","    especiais [CLS] do início e [SEP] do fim.\n","    Remove primeira dimensão devido ao cálculo da média.\n","    \n","    Parâmetros:\n","    `embedding_documento` - Embedding do documento.\n","  \"\"\"\n","\n","  # Calcula a média dos embeddings para os tokens de embedding_documento, removendo a primeira dimensão.\n","  # Entrada: <qtde_tokens> x <768 ou 1024>  \n","  #print(\"embedding_documento1=\", embedding_documento.shape)\n","  media_embedding_documento = torch.mean(embedding_documento[1:-1], dim=0)    \n","  # Saída: <768 ou 1024>\n","\n","  del embedding_documento\n","\n","  return media_embedding_documento"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### getEmbeddingDocumentoRelevanteMean"],"metadata":{"id":"1Ko_of60YuNd"}},{"cell_type":"code","source":["# Importa a biblioteca\n","import torch\n","\n","def getEmbeddingDocumentoRelevanteMean(id_documento, \n","                                       index_sentenca, \n","                                       embedding_documento, \n","                                       token_BERT_documento, \n","                                       documento, \n","                                       token_documento, \n","                                       pos_documento, \n","                                       filtro):\n","  \"\"\"\n","    Calcula a média dos embeddings do documento considerando tokens do tipo \n","    especificado no filtro\n","    Remove primeira dimensão devido ao cálculo da média.\n","    \n","    Parâmetros:    \n","    `embedding_documento` - Embeddings do documento gerados pelo BERT.\n","    `token_BERT_documento` - Lista com os tokens do documento gerados pelo tokenizador BERT.\n","    `documento` - Texto com o documento.\n","    `tokenizer` - Tokenizador do BERT.\n","    `token_documento` - Lista com os tokens do documento.\n","    `pos_documento` - Lista com as POS-Tagging do documento.\n","    `filtro` - Filtro dos embeddings.\n","\n","  \"\"\"  \n","   \n","  # Recupera a lista de tokens do documento, a lista dos postagging e a lista dos seus embeddings com um mesmo tamanho\n","  lista_tokens, lista_postagging, lista_embeddings = getTokensEmbeddingsPOSSentenca(id_documento, \n","                                                                                    index_sentenca, \n","                                                                                    embedding_documento, \n","                                                                                    token_BERT_documento, \n","                                                                                    documento, \n","                                                                                    token_documento, \n","                                                                                    pos_documento)\n","\n","  #print(\"len(token_BERT_documento):\", len(token_BERT_documento))\n","  #print(\"token_BERT_documento:\", token_BERT_documento)\n","  #print(\"len(pos_documento):\", len(pos_documento))\n","  #print(\"pos_documento:\", pos_documento)\n","  #print(\"filtro:\", filtro)\n","  #print()\n","\n","  # Lista com os tensores selecionados\n","  lista_tokens_selecionados = []\n","  # Localizar os embeddings dos tokens da sentença tokenizada sem stop word no documento  \n","  for i, token_documento in enumerate(lista_tokens):     \n","      if (lista_postagging[i] in filtro):          \n","          #print(\"Adicionando palavra do embedding:\", lista_tokens[i])\n","          lista_tokens_selecionados.append(lista_embeddings[i])\n","\n","  if  len(lista_tokens_selecionados) != 0:\n","      # Empila os embeddings da lista pela dimensão 0\n","      embedding_relevante = torch.stack(lista_tokens_selecionados, dim=0)\n","      #print(\"embedding_relevante.shape:\",embedding_relevante.shape)\n","\n","      # Calcula a média dos embeddings para os tokens de Si, removendo a primeira dimensão.\n","      # Entrada: <qtde_tokens> x <768 ou 1024>  \n","      media_embedding_relevante = torch.mean(embedding_relevante, dim=0)    \n","      # Saída: <768 ou 1024>\n","      #print(\"media_embedding_relevante.shape:\", media_embedding_relevante.shape)\n","  else:\n","      media_embedding_relevante = None\n","\n","  del embedding_documento\n","  del token_BERT_documento\n","  del documento\n","  del token_documento\n","  del pos_documento\n","\n","  return media_embedding_relevante"],"metadata":{"id":"wDokSSODY0Sf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### getEmbeddingDocumentoMean\n","\n","Filtros:\n","- ALL - Sentença com todas as palavras\n","- NOUN - Sentença somente com substantivos\n","- VERB - Sentença somente com verbos\n","- VERB,NOUN - Sentença somente com verbos e substantivos"],"metadata":{"id":"L_vknrk7YSpF"}},{"cell_type":"code","source":["def getEmbeddingDocumentoMean(id_documento, \n","                              index_sentenca, \n","                              embedding_documento, \n","                              token_BERT_documento, \n","                              documento, \n","                              tokenizer,\n","                              token_documento, \n","                              pos_documento, \n","                              filtro=[\"ALL\"]):  \n","  \"\"\"\n","    Rediciona o cálculo da média dos embeddings de acordo com o filtro especificado.\n","    \n","    Parâmetros:    \n","    `embedding_documento` - Embeddings do documento gerados pelo BERT.\n","    `token_BERT_documento` - Lista com os tokens do documento gerados pelo tokenizador BERT.\n","    `documento` - Texto com o documento.\n","    `tokenizer` - Tokenizador do BERT.\n","    `token_documento` - Lista com os tokens do documento.\n","    `pos_documento` - Lista com as POS-Tagging do documento.\n","    `filtro` - Filtro dos embeddings.\n","  \"\"\"\n","\n","  if \"ALL\" in filtro:\n","    return getEmbeddingDocumentoComTodasPalavrasMean(embedding_documento)\n","  else:\n","    return getEmbeddingDocumentoRelevanteMean(id_documento, \n","                                              index_sentenca, \n","                                              embedding_documento, \n","                                              token_BERT_documento, \n","                                              documento, \n","                                              token_documento, \n","                                              pos_documento, \n","                                              filtro)    "],"metadata":{"id":"Pd8B76YyYS02"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"t1PgxcL01VfF"},"source":["### getTokensEmbeddingsPOSSentenca\n","Gera os tokens, POS e embeddings de cada sentença."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rBkcF2ve1VfG"},"outputs":[],"source":["# Dicionário de tokens de exceções e seus deslocamentos para considerar mais tokens do BERT em relação ao spaCy\n","# A tokenização do BERT gera mais tokens que a tokenização das palavras do spaCy\n","dic_excecao_maior = {\"\":-1,\"Dir-me-ão\":5,\"tê-lo-ão\":5,\"revocá-la-ão\":6\n","                    }"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fXJk5Od51VfI"},"outputs":[],"source":["def getExcecaoDicMaior(token, dic_excecao_maior):   \n","    \n","  valor = dic_excecao_maior.get(token)\n","  if valor != None:\n","      return valor\n","  else:\n","      return -1"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M6TSm62Y1VfI"},"outputs":[],"source":["# Dicionário de tokens de exceções e seus deslocamentos para considerar menos tokens do BERT em relação ao spaCy\n","# A tokenização do BERT gera menos tokens que a tokenização das palavras do spaCy\n","dic_excecao_menor = {\"1°\":1,\n","                    }"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7OYmoFVk1VfJ"},"outputs":[],"source":["def getExcecaoDicMenor(token, dic_excecao_menor):   \n","    \n","  valor = dic_excecao_menor.get(token)\n","  if valor != None:\n","      return valor\n","  else:\n","      return -1"]},{"cell_type":"markdown","source":["Função que retorna os embeddings, tokens e POS da sentença com um mesmo tamanho."],"metadata":{"id":"JzYA5pPE1VfJ"}},{"cell_type":"code","source":["# Importa a biblioteca\n","import torch\n","\n","def getTokensEmbeddingsPOSSentenca(embedding_documento, \n","                                   token_BERT_documento, \n","                                   sentenca):\n","    \"\"\"    \n","      Retorna os tokens, as postagging e os embeddings dos tokens igualando a quantidade de tokens do spaCy com a tokenização do BERT de acordo com a estratégia. \n","      Usa a estratégia MEAN para calcular a média dos embeddings dos tokens que formam uma palavra.\n","      Usa a estratégia MAX para calcular o valor máximo dos embeddings dos tokens que formam uma palavra.\n","    \"\"\"\n","   \n","    #Guarda os tokens e embeddings\n","    lista_tokens = []\n","    lista_tokens_OOV = []\n","    lista_embeddings_MEAN = []\n","    lista_embeddings_MAX = []\n","    \n","    # Gera a tokenização e POS-Tagging da sentença    \n","    sentenca_token, sentenca_pos = getListaTokensPOSSentenca(sentenca)\n","\n","    # print(\"\\nsentenca          :\",sentenca)    \n","    # print(\"sentenca_token      :\",sentenca_token)\n","    # print(\"len(sentenca_token) :\",len(sentenca_token))    \n","    # print(\"sentenca_pos        :\",sentenca_pos)\n","    # print(\"len(sentenca_pos)   :\",len(sentenca_pos))\n","    \n","    # Recupera os embeddings da sentença dos embeddings do documento    \n","    embedding_sentenca = embedding_documento    \n","    sentenca_tokenizada_BERT = token_BERT_documento\n","    \n","    # embedding <qtde_tokens x 4096>        \n","    # print(\"embedding_sentenca          :\",embedding_sentenca.shape)\n","    # print(\"sentenca_tokenizada_BERT     :\",sentenca_tokenizada_BERT)\n","    # print(\"len(sentenca_tokenizada_BERT):\",len(sentenca_tokenizada_BERT))\n","\n","    # Seleciona os pares de palavra a serem avaliadas\n","    pos_wi = 0 # Posição do token da palavra gerado pelo spaCy\n","    pos_wj = pos_wi # Posição do token da palavra gerado pelo BERT\n","    pos2 = -1\n","\n","    # Enquanto o indíce da palavra pos_wj(2a palavra) não chegou ao final da quantidade de tokens do BERT\n","    while pos_wj < len(sentenca_tokenizada_BERT):  \n","\n","      # Seleciona os tokens da sentença\n","      wi = sentenca_token[pos_wi] # Recupera o token da palavra gerado pelo spaCy\n","      wi1 = \"\"\n","      pos2 = -1\n","      if pos_wi+1 < len(sentenca_token):\n","        wi1 = sentenca_token[pos_wi+1] # Recupera o próximo token da palavra gerado pelo spaCy\n","  \n","        # Localiza o deslocamento da exceção        \n","        pos2 = getExcecaoDicMenor(wi+wi1, dic_excecao_menor)  \n","        #print(\"Exceção pos2:\", pos2)\n","\n","      wj = sentenca_tokenizada_BERT[pos_wj] # Recupera o token da palavra gerado pelo BERT\n","      # print(\"wi[\",pos_wi,\"]=\", wi)\n","      # print(\"wj[\",pos_wj,\"]=\", wj)\n","\n","      # Tratando exceções\n","      # Localiza o deslocamento da exceção\n","      pos = getExcecaoDicMaior(wi, dic_excecao_maior)  \n","      #print(\"Exceção pos:\", pos)\n","            \n","      if pos != -1 or pos2 != -1:      \n","        if pos != -1:\n","          #print(\"Adiciona 1 Exceção palavra == wi or palavra = [UNK]:\",wi)\n","          lista_tokens.append(wi)\n","          # Marca como fora do vocabulário do BERT\n","          lista_tokens_OOV.append(1)\n","          # Verifica se tem mais de um token\n","          if pos != 1:\n","            indice_token = pos_wj + pos\n","            #print(\"Calcula a média de :\", pos_wj , \"até\", indice_token)\n","            embeddings_tokens_palavra = embedding_sentenca[pos_wj:indice_token]\n","            #print(\"embeddings_tokens_palavra:\",embeddings_tokens_palavra.shape)\n","            # calcular a média dos embeddings dos tokens do BERT da palavra\n","            embedding_estrategia_MEAN = torch.mean(embeddings_tokens_palavra, dim=0)\n","            #print(\"embedding_estrategia_MEAN:\",embedding_estrategia_MEAN.shape)\n","            lista_embeddings_MEAN.append(embedding_estrategia_MEAN)\n","\n","            # calcular o máximo dos embeddings dos tokens do BERT da palavra\n","            embedding_estrategia_MAX, linha = torch.max(embeddings_tokens_palavra, dim=0)\n","            #print(\"embedding_estrategia_MAX:\",embedding_estrategia_MAX.shape)\n","            lista_embeddings_MAX.append(embedding_estrategia_MAX)\n","          else:\n","            # Adiciona o embedding do token a lista de embeddings\n","            lista_embeddings_MEAN.append(embedding_sentenca[pos_wj])            \n","            lista_embeddings_MAX.append(embedding_sentenca[pos_wj])\n","         \n","          # Avança para a próxima palavra e token do BERT\n","          pos_wi = pos_wi + 1\n","          pos_wj = pos_wj + pos\n","          #print(\"Proxima:\")            \n","          #print(\"wi[\",pos_wi,\"]=\", sentenca_token[pos_wi])\n","          #print(\"wj[\",pos_wj,\"]=\", sentenca_tokenizada_BERT[pos_wj])\n","        else:\n","          if pos2 != -1:\n","            #print(\"Adiciona 1 Exceção palavra == wi or palavra = [UNK]:\",wi)\n","            lista_tokens.append(wi+wi1)\n","            # Marca como fora do vocabulário do BERT\n","            lista_tokens_OOV.append(1)\n","            # Verifica se tem mais de um token\n","            if pos2 == 1: \n","              # Adiciona o embedding do token a lista de embeddings\n","              lista_embeddings_MEAN.append(embedding_sentenca[pos_wj])\n","              lista_embeddings_MAX.append(embedding_sentenca[pos_wj])\n","          \n","            # Avança para a próxima palavra e token do BERT\n","            pos_wi = pos_wi + 2\n","            pos_wj = pos_wj + pos2\n","            #print(\"Proxima:\")            \n","            #print(\"wi[\",pos_wi,\"]=\", sentenca_token[pos_wi])\n","            #print(\"wj[\",pos_wj,\"]=\", sentenca_tokenizada_BERT[pos_wj])\n","      else:  \n","        # Tokens iguais adiciona a lista, o token não possui subtoken\n","        if (wi == wj or wj==\"[UNK]\"):\n","          # Adiciona o token a lista de tokens\n","          #print(\"Adiciona 2 wi==wj or wj==[UNK]:\", wi )\n","          lista_tokens.append(wi)    \n","          # Marca como dentro do vocabulário do BERT\n","          lista_tokens_OOV.append(0)\n","          # Adiciona o embedding do token a lista de embeddings\n","          lista_embeddings_MEAN.append(embedding_sentenca[pos_wj])\n","          lista_embeddings_MAX.append(embedding_sentenca[pos_wj])\n","          #print(\"embedding1[pos_wj]:\", embedding_sentenca[pos_wj].shape)\n","          # Avança para a próxima palavra e token do BERT\n","          pos_wi = pos_wi + 1\n","          pos_wj = pos_wj + 1   \n","              \n","        else:          \n","          # A palavra foi tokenizada pelo Wordpice com ## ou diferente do spaCy ou desconhecida\n","          # Inicializa a palavra a ser montada          \n","          palavra_POS = wj\n","          indice_token = pos_wj + 1                 \n","          while  ((palavra_POS != wi) and indice_token < len(sentenca_tokenizada_BERT)):\n","              if \"##\" in sentenca_tokenizada_BERT[indice_token]:\n","                # Remove os caracteres \"##\" do token\n","                parte = sentenca_tokenizada_BERT[indice_token][2:]\n","              else:                \n","                parte = sentenca_tokenizada_BERT[indice_token]\n","              \n","              palavra_POS = palavra_POS + parte\n","              #print(\"palavra_POS:\",palavra_POS)\n","              # Avança para o próximo token do BERT\n","              indice_token = indice_token + 1\n","\n","          #print(\"\\nMontei palavra:\",palavra_POS)\n","          if (palavra_POS == wi or palavra_POS == \"[UNK]\"):\n","              # Adiciona o token a lista\n","              #print(\"Adiciona 3 palavra == wi or palavra_POS = [UNK]:\",wi)\n","              lista_tokens.append(wi)\n","              # Marca como fora do vocabulário do BERT\n","              lista_tokens_OOV.append(1)\n","              # Calcula a média dos tokens da palavra\n","              #print(\"Calcula o máximo :\", pos_wj , \"até\", indice_token)\n","              embeddings_tokens_palavra = embedding_sentenca[pos_wj:indice_token]\n","              #print(\"embeddings_tokens_palavra2:\",embeddings_tokens_palavra)\n","              #print(\"embeddings_tokens_palavra2:\",embeddings_tokens_palavra.shape)\n","              \n","              # calcular a média dos embeddings dos tokens do BERT da palavra\n","              embedding_estrategia_MEAN = torch.mean(embeddings_tokens_palavra, dim=0)        \n","              #print(\"embedding_estrategia_MEAN:\",embedding_estrategia_MEAN)\n","              #print(\"embedding_estrategia_MEAN.shape:\",embedding_estrategia_MEAN.shape)      \n","              lista_embeddings_MEAN.append(embedding_estrategia_MEAN)\n","             \n","              # calcular o valor máximo dos embeddings dos tokens do BERT da palavra\n","              embedding_estrategia_MAX, linha = torch.max(embeddings_tokens_palavra, dim=0)\n","              #print(\"embedding_estrategia_MAX:\",embedding_estrategia_MAX)\n","              #print(\"embedding_estrategia_MAX.shape:\",embedding_estrategia_MAX.shape)     \n","              lista_embeddings_MAX.append(embedding_estrategia_MAX)\n","\n","          # Avança para o próximo token do spaCy\n","          pos_wi = pos_wi + 1\n","          # Pula para o próximo token do BERT\n","          pos_wj = indice_token\n","    \n","    # Verificação se as listas estão com o mesmo tamanho\n","    if (len(lista_tokens) != len(sentenca_token)) or (len(lista_embeddings_MEAN) != len(sentenca_token)):\n","    # if (len(lista_tokens) !=  len(lista_embeddings_MEAN)):\n","       print(\"\\nsentenca                  :\",sentenca)         \n","       print(\"sentenca_pos              :\",sentenca_pos)\n","       print(\"sentenca_token            :\",sentenca_token)\n","       print(\"sentenca_tokenizada_BERT  :\",sentenca_tokenizada_BERT)\n","       print(\"lista_tokens              :\",lista_tokens)        \n","       print(\"len(lista_tokens)         :\",len(lista_tokens))       \n","       print(\"lista_embeddings_MEAN     :\",lista_embeddings_MEAN)\n","       print(\"len(lista_embeddings_MEAN):\",len(lista_embeddings_MEAN))\n","       print(\"lista_embeddings_MAX      :\",lista_embeddings_MAX)\n","       print(\"len(lista_embeddings_MAX) :\",len(lista_embeddings_MAX))\n","\n","    del embedding_sentenca\n","    del token_BERT_documento\n","    del sentenca_tokenizada_BERT\n","    del sentenca_token\n","\n","    return lista_tokens, sentenca_pos, lista_tokens_OOV, lista_embeddings_MEAN, lista_embeddings_MAX"],"metadata":{"id":"W9H1JlTt1VfK"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JplTToZvDLiX"},"source":["## Similaridade de cosseno entre os embeddings das sentenças"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eERVKqh2uk6S"},"outputs":[],"source":["# Import das bibliotecas.\n","from scipy.spatial.distance import cosine\n","\n","def similaridadeCoseno(embeddings1, embeddings2):\n","    \"\"\"\n","    Similaridade do cosseno dos embeddgins dos textos.\n","    \n","    Parâmetros:\n","    `embeddings1` - Um embedding a ser medido.\n","    `embeddings2` - Um embedding a ser medido.\n","    \"\"\"\n","    \n","    similaridade = 1 - cosine(embeddings1, embeddings2)\n","    \n","    return similaridade"]},{"cell_type":"markdown","metadata":{"id":"xKaqQPs8VQ5u"},"source":["### 5.2.1 Medidas de similaridade \n"]},{"cell_type":"markdown","metadata":{"id":"jt06PTN5idrg"},"source":["Similaridade do cosseno entre os embeddings.\n","\n","https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.cosine.html#scipy.spatial.distance.cosine\n","\n","A função spatial.distance.cosine do módulo scipy calcula a distância em vez da similaridade do cosseno, mas para conseguir isso, podemos subtrair o valor da distância de 1.\n","\n","Intervalo de [-1,1] \n","\n","Vetores iguais a distância é igual 1.\n","\n","Vetores diferentes medida próxima de -1."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6vbXj-brOlMF"},"outputs":[],"source":["# Import das bibliotecas.\n","from scipy.spatial.distance import cosine\n","\n","def similaridadeCosseno(embeddings1, embeddings2):\n","    \"\"\"\n","      Similaridade do cosseno dos embeddings dos textos.\n","    \n","      Parâmetros:\n","      `embeddings1` - Um embedding a ser medido.\n","      `embeddings2` - Um embedding a ser medido.\n","    \"\"\"\n","    \n","    similaridade = 1 - cosine(embeddings1, embeddings2)\n","    \n","    return similaridade"]},{"cell_type":"markdown","metadata":{"id":"fazAuLMUr_c0"},"source":["### 5.2.2 Medidas de distância "]},{"cell_type":"markdown","metadata":{"id":"_IcrjAbhwake"},"source":["Distância euclidiana entre os embeddings.\n","\n","Possui outros nomes como distância L2 ou norma L2.\n","\n","https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.euclidean.html#scipy.spatial.distance.euclidean"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mIrTId9jwakh"},"outputs":[],"source":["# Import das bibliotecas.\n","from scipy.spatial.distance import euclidean\n","\n","def distanciaEuclidiana(embeddings1, embeddings2):\n","    \"\"\"\n","    Distância euclidiana entre os embeddings dos textos.\n","    Possui outros nomes como distância L2 ou norma L2.\n","    \n","    Parâmetros:\n","    `embeddings1` - Um embedding a ser medido.\n","    `embeddings2` - Um embedding a ser medido.\n","    \"\"\"\n","    \n","    distancia = euclidean(embeddings1, embeddings2)\n","    \n","    return distancia"]},{"cell_type":"markdown","metadata":{"id":"-uJlqYCSXdVk"},"source":["Distância Manhattan entre os embeddings.\n","\n","Possui outros nomes como distância Cityblock, distância L1, norma L1 e métrica do táxi.\n","\n","https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.cityblock.html#scipy.spatial.distance.cityblock"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jFG5UT_SXdVn"},"outputs":[],"source":["# Import das bibliotecas.\n","from scipy.spatial.distance import cityblock\n","\n","def distanciaManhattan(embeddings1, embeddings2):\n","    \"\"\"\n","    Distância Manhattan entre os embeddings dos textos \n","    Possui outros nomes como distância Cityblock, distância L1, norma L1 e métrica do táxi.\n","    \n","    Parâmetros:\n","    `embeddings1` - Um embedding a ser medido.\n","    `embeddings2` - Um embedding a ser medido.\n","    \"\"\"\n","    \n","    distancia = cityblock(embeddings1, embeddings2)\n","\n","    return distancia"]},{"cell_type":"markdown","metadata":{"id":"S6A6-Xwg8GJw"},"source":["### 5.2.3 Retorna as medidas dos embeddings"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qHzQ98zg8GWJ"},"outputs":[],"source":["def getMedidasEmbedding(embedding_wi, embedding_wj):\n","\n","  \"\"\"\n","    Retorna as medidas de similaridade do cosseno(cos), distância Euclidiana(euc) e \n","    distância de Manhattan(man) entre os embeddings.\n","        \n","    Parâmetros:\n","    `embeddings_wi` - Um embedding de uma palavra a ser medido.\n","    `embeddings_wj` - Um embedding de uma palavra a ser medido.\n","  \"\"\"\n"," \n","  #print(\"embedding_wi=\", embedding_wi.shape) \n","  #print(\"embedding_wj=\", embedding_wj.shape)\n","\n","  # Similaridade do cosseno entre os embeddings wi e wj\n","  # Entrada: (<768 ou 1024>) x (<768 ou 1024>)\n","  cos = similaridadeCosseno(embedding_wi, embedding_wj)\n","  # Saída: Número real\n","\n","  # Distância euclidiana entre os embeddings wi e wj\n","  # Entrada: (<768 ou 1024>) x (<768 ou 1024>)\n","  euc = distanciaEuclidiana(embedding_wi, embedding_wj)\n","  # Saída: Número real\n","\n","  # Distância de manhattan entre os embeddings wi e wj\n","  # Entrada: (<768 ou 1024>) x (<768 ou 1024>)\n","  man = distanciaManhattan(embedding_wi, embedding_wj)\n","  # Saída: Número real\n","  \n","  del embedding_wi\n","  del embedding_wj\n","\n","  # Retorno das medidas das sentenças\n","  return cos, euc, man"]},{"cell_type":"markdown","metadata":{"id":"Y7W-7V3QFbpR"},"source":["\n","# 3 Carrega dados"]},{"cell_type":"markdown","metadata":{"id":"oQUy9Tat2EF_"},"source":["## 3.1 Carregamento dos arquivos de dados originais e permutados"]},{"cell_type":"markdown","metadata":{"id":"bD_tNbBGPrnE"},"source":["### 3.1.1 Especifica os nomes dos arquivos de dados\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bNgwJRC2uGJb"},"outputs":[],"source":["# Nome do arquivo\n","# Nome do arquivo original\n","NOME_ARQUIVO_DOCUMENTO_FILTRADO = \"original_filtrado.csv\"\n","\n","NOME_ARQUIVO_DOCUMENTO_FILTRADO_COMPACTADO = \"original_filtrado.zip\""]},{"cell_type":"markdown","metadata":{"id":"I0LsmsBlJeeV"},"source":["### 3.1.2 Cria o diretório local para receber os dados"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25,"status":"ok","timestamp":1669133372353,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"gFYIHcIHE985","outputId":"b14424d2-e3e7-4f70-d8e4-a50b5637a144"},"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:root:Diretório já existe: /content/MODERNIST\n"]}],"source":["# Importando as bibliotecas.\n","import os\n","\n","# Cria o diretório para receber os arquivos Originais e Permutados\n","# Diretório a ser criado\n","dirbase = DIRETORIO_LOCAL[:-1]\n","\n","if not os.path.exists(dirbase):  \n","    # Cria o diretório\n","    os.makedirs(dirbase)    \n","    logging.info(\"Diretório criado: {}\".format(dirbase))\n","else:    \n","    logging.info(\"Diretório já existe: {}\".format(dirbase))"]},{"cell_type":"markdown","metadata":{"id":"D8A9syejCsD2"},"source":["### 3.1.3 Copia os arquivos do Google Drive para o Colaboratory"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":465,"status":"ok","timestamp":1669133373810,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"pviuxToMCxQw","outputId":"8075d999-829c-4c11-be20-f79f74aee311"},"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:root:Terminei a cópia.\n"]}],"source":["# Se estiver executando no Google Colaboratory\n","if IN_COLAB:\n","\n","  !cp \"$DIRETORIO_DRIVE$NOME_ARQUIVO_DOCUMENTO_FILTRADO_COMPACTADO\" \"$DIRETORIO_LOCAL\"\n","\n","  logging.info(\"Terminei a cópia.\")"]},{"cell_type":"markdown","metadata":{"id":"rFCvZ6CUmt-9"},"source":["Descompacta os arquivos.\n","\n","Usa o unzip para descompactar:\n","*   `-o` sobrescreve o arquivo se existir\n","*   `-j` Não cria nenhum diretório\n","*   `-q` Desliga as mensagens \n","*   `-d` Diretório de destino\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":47,"status":"ok","timestamp":1669133373811,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"dbHl3d88mouc","outputId":"0f05fb39-a22a-4048-8569-294b10e1162c"},"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:root:Terminei a descompactação.\n"]}],"source":["# Se estiver executando no Google Colaboratory\n","if IN_COLAB:\n","  !unzip -o -j -q \"$DIRETORIO_LOCAL$NOME_ARQUIVO_DOCUMENTO_FILTRADO_COMPACTADO\" -d \"$DIRETORIO_LOCAL\"\n","\n","  logging.info(\"Terminei a descompactação.\")"]},{"cell_type":"markdown","metadata":{"id":"qzhYJNWJm1z4"},"source":["### 3.1.4 Carregamento das lista com os dados dos arquivos originais"]},{"cell_type":"markdown","metadata":{"id":"Usr1uRzQeJSb"},"source":["#### Carrega o arquivo dos dados originais e POS"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":33,"status":"ok","timestamp":1669133373812,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"QRHlixdHEDTb","outputId":"4cfefc15-abe3-4d79-c246-b82b2dad1040"},"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:root:TERMINADO ORIGINAIS: 1844.\n"]}],"source":["# Import das bibliotecas.\n","import pandas as pd\n","\n","# Abre o arquivo e retorna o DataFrame\n","lista_documentos_originais_filtrados = pd.read_csv(DIRETORIO_LOCAL + NOME_ARQUIVO_DOCUMENTO_FILTRADO, sep=\";\", encoding=\"UTF-8\")\n","\n","\n","logging.info(\"TERMINADO ORIGINAIS: {}.\".format(len(lista_documentos_originais_filtrados)))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mzl2SUe7N4QM"},"outputs":[],"source":["# lista_documentos_originais = lista_documentos_originais[:5]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":28,"status":"ok","timestamp":1669133373813,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"jJ5STBZPLlie","outputId":"5e2812db-6697-4870-fdc8-ec8646e96699"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["          id                                          documento  \\\n","1000  201993                       Andemos – repetiu a crioula.   \n","1358  202828  saiu para o baile vestida com a mais falsa sim...   \n","1310  202662                     – Minha senhora talvez fale...   \n","508   201100  Paulo Borges e Teresa conversaram sobre os seu...   \n","45    200076  até certo ponto, pois, aceito, apadrinhado, pr...   \n","\n","                                        documentoTokens  \\\n","1000   ['Andemos', '–', 'repetiu', 'a', 'crioula', '.']   \n","1358  ['saiu', 'para', 'o', 'baile', 'vestida', 'com...   \n","1310  ['–', 'Minha', 'senhora', 'talvez', 'fale', '....   \n","508   ['Paulo', 'Borges', 'e', 'Teresa', 'conversara...   \n","45    ['até', 'certo', 'ponto', ',', 'pois', ',', 'a...   \n","\n","                                           posDocumento  idOcorrencia  \\\n","1000  ['VERB', 'PUNCT', 'VERB', 'DET', 'NOUN', 'PUNCT']             4   \n","1358  ['VERB', 'ADP', 'DET', 'NOUN', 'VERB', 'ADP', ...            14   \n","1310  ['PUNCT', 'PROPN', 'NOUN', 'ADV', 'VERB', 'PUN...             2   \n","508   ['PROPN', 'PROPN', 'CCONJ', 'PROPN', 'VERB', '...             9   \n","45    ['ADP', 'DET', 'NOUN', 'PUNCT', 'SCONJ', 'PUNC...            20   \n","\n","     palavraAlvo    grupo                obra                     autor   ano  \\\n","1000     crioula  crioulo  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","1358      branco   branco  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","1310     senhora   senhor  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","508     escravos  escravo  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","45      senhores   senhor  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","\n","      idObra   movimento  \n","1000       2  Romantismo  \n","1358       2  Romantismo  \n","1310       2  Romantismo  \n","508        2  Romantismo  \n","45         2  Romantismo  "],"text/html":["\n","  <div id=\"df-38481412-21f1-4b0e-baae-747d5d8dfb80\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>documento</th>\n","      <th>documentoTokens</th>\n","      <th>posDocumento</th>\n","      <th>idOcorrencia</th>\n","      <th>palavraAlvo</th>\n","      <th>grupo</th>\n","      <th>obra</th>\n","      <th>autor</th>\n","      <th>ano</th>\n","      <th>idObra</th>\n","      <th>movimento</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1000</th>\n","      <td>201993</td>\n","      <td>Andemos – repetiu a crioula.</td>\n","      <td>['Andemos', '–', 'repetiu', 'a', 'crioula', '.']</td>\n","      <td>['VERB', 'PUNCT', 'VERB', 'DET', 'NOUN', 'PUNCT']</td>\n","      <td>4</td>\n","      <td>crioula</td>\n","      <td>crioulo</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","    <tr>\n","      <th>1358</th>\n","      <td>202828</td>\n","      <td>saiu para o baile vestida com a mais falsa sim...</td>\n","      <td>['saiu', 'para', 'o', 'baile', 'vestida', 'com...</td>\n","      <td>['VERB', 'ADP', 'DET', 'NOUN', 'VERB', 'ADP', ...</td>\n","      <td>14</td>\n","      <td>branco</td>\n","      <td>branco</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","    <tr>\n","      <th>1310</th>\n","      <td>202662</td>\n","      <td>– Minha senhora talvez fale...</td>\n","      <td>['–', 'Minha', 'senhora', 'talvez', 'fale', '....</td>\n","      <td>['PUNCT', 'PROPN', 'NOUN', 'ADV', 'VERB', 'PUN...</td>\n","      <td>2</td>\n","      <td>senhora</td>\n","      <td>senhor</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","    <tr>\n","      <th>508</th>\n","      <td>201100</td>\n","      <td>Paulo Borges e Teresa conversaram sobre os seu...</td>\n","      <td>['Paulo', 'Borges', 'e', 'Teresa', 'conversara...</td>\n","      <td>['PROPN', 'PROPN', 'CCONJ', 'PROPN', 'VERB', '...</td>\n","      <td>9</td>\n","      <td>escravos</td>\n","      <td>escravo</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>200076</td>\n","      <td>até certo ponto, pois, aceito, apadrinhado, pr...</td>\n","      <td>['até', 'certo', 'ponto', ',', 'pois', ',', 'a...</td>\n","      <td>['ADP', 'DET', 'NOUN', 'PUNCT', 'SCONJ', 'PUNC...</td>\n","      <td>20</td>\n","      <td>senhores</td>\n","      <td>senhor</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-38481412-21f1-4b0e-baae-747d5d8dfb80')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-38481412-21f1-4b0e-baae-747d5d8dfb80 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-38481412-21f1-4b0e-baae-747d5d8dfb80');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":87}],"source":["lista_documentos_originais_filtrados.sample(5)"]},{"cell_type":"markdown","metadata":{"id":"0PPCl45c_Fys"},"source":["#### Corrigir os tipos de colunas dos dados originais_filtrados\n","\n","Em dados originais_filtrados:\n","- coluna 1 - `documentoTokens` carregadas do arquivo vem como string e não como lista.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":27,"status":"ok","timestamp":1669133373814,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"uSmIpa1Q_Fys","outputId":"b1b0565f-5b93-435f-bcdd-c188d133f119"},"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:root:TERMINADO CORREÇÃO ORIGINAIS_FILTRADOS: 1844.\n"]}],"source":["# Import das bibliotecas.\n","import ast # Biblioteca para conversão de string em lista\n","\n","# Verifica se o tipo da coluna não é list e converte\n","lista_documentos_originais_filtrados[\"documentoTokens\"] = lista_documentos_originais_filtrados[\"documentoTokens\"].apply(lambda x: ast.literal_eval(x) if type(x)!=list else x)\n","lista_documentos_originais_filtrados[\"posDocumento\"] = lista_documentos_originais_filtrados[\"posDocumento\"].apply(lambda x: ast.literal_eval(x) if type(x)!=list else x)\n","\n","\n","logging.info(\"TERMINADO CORREÇÃO ORIGINAIS_FILTRADOS: {}.\".format(len(lista_documentos_originais_filtrados)))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":337},"executionInfo":{"elapsed":26,"status":"ok","timestamp":1669133373815,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"RyF2Q8H4_Fyt","outputId":"6aafafb6-8c3f-4465-eb51-2af31a4285b8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["          id                                          documento  \\\n","275   200657  No marido da senhora-moça viam um novo senhor,...   \n","1280  202540  No fim de cinco anos Lucinda, que era intelige...   \n","1655  204529  A escrava é o que a fazem ser: a sociedade esc...   \n","444   201034  Quem deu essa ciência ao negro analfabeto e ig...   \n","211   200408  Não há, não pode haver escravidão sem a idéia ...   \n","\n","                                        documentoTokens  \\\n","275   [No, marido, da, senhora-moça, viam, um, novo,...   \n","1280  [No, fim, de, cinco, anos, Lucinda, ,, que, er...   \n","1655  [A, escrava, é, o, que, a, fazem, ser, :, a, s...   \n","444   [Quem, deu, essa, ciência, ao, negro, analfabe...   \n","211   [Não, há, ,, não, pode, haver, escravidão, sem...   \n","\n","                                           posDocumento  idOcorrencia  \\\n","275   [ADP, NOUN, ADP, NOUN, VERB, DET, ADJ, NOUN, P...             7   \n","1280  [ADP, NOUN, ADP, NUM, NOUN, PROPN, PUNCT, PRON...            59   \n","1655  [DET, NOUN, AUX, PRON, PRON, PRON, VERB, VERB,...             1   \n","444   [PRON, VERB, DET, NOUN, ADP, ADJ, NOUN, CCONJ,...             5   \n","211   [ADV, VERB, PUNCT, ADV, VERB, VERB, NOUN, ADP,...            23   \n","\n","     palavraAlvo    grupo                obra                     autor   ano  \\\n","275       senhor   senhor  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","1280    escravas  escravo  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","1655     escrava  escravo  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","444        negro    negro  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","211     escravos  escravo  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","\n","      idObra   movimento  \n","275        2  Romantismo  \n","1280       2  Romantismo  \n","1655       2  Romantismo  \n","444        2  Romantismo  \n","211        2  Romantismo  "],"text/html":["\n","  <div id=\"df-4a9ece76-f50d-4d30-8e63-f13a43b93fe9\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>documento</th>\n","      <th>documentoTokens</th>\n","      <th>posDocumento</th>\n","      <th>idOcorrencia</th>\n","      <th>palavraAlvo</th>\n","      <th>grupo</th>\n","      <th>obra</th>\n","      <th>autor</th>\n","      <th>ano</th>\n","      <th>idObra</th>\n","      <th>movimento</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>275</th>\n","      <td>200657</td>\n","      <td>No marido da senhora-moça viam um novo senhor,...</td>\n","      <td>[No, marido, da, senhora-moça, viam, um, novo,...</td>\n","      <td>[ADP, NOUN, ADP, NOUN, VERB, DET, ADJ, NOUN, P...</td>\n","      <td>7</td>\n","      <td>senhor</td>\n","      <td>senhor</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","    <tr>\n","      <th>1280</th>\n","      <td>202540</td>\n","      <td>No fim de cinco anos Lucinda, que era intelige...</td>\n","      <td>[No, fim, de, cinco, anos, Lucinda, ,, que, er...</td>\n","      <td>[ADP, NOUN, ADP, NUM, NOUN, PROPN, PUNCT, PRON...</td>\n","      <td>59</td>\n","      <td>escravas</td>\n","      <td>escravo</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","    <tr>\n","      <th>1655</th>\n","      <td>204529</td>\n","      <td>A escrava é o que a fazem ser: a sociedade esc...</td>\n","      <td>[A, escrava, é, o, que, a, fazem, ser, :, a, s...</td>\n","      <td>[DET, NOUN, AUX, PRON, PRON, PRON, VERB, VERB,...</td>\n","      <td>1</td>\n","      <td>escrava</td>\n","      <td>escravo</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","    <tr>\n","      <th>444</th>\n","      <td>201034</td>\n","      <td>Quem deu essa ciência ao negro analfabeto e ig...</td>\n","      <td>[Quem, deu, essa, ciência, ao, negro, analfabe...</td>\n","      <td>[PRON, VERB, DET, NOUN, ADP, ADJ, NOUN, CCONJ,...</td>\n","      <td>5</td>\n","      <td>negro</td>\n","      <td>negro</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>200408</td>\n","      <td>Não há, não pode haver escravidão sem a idéia ...</td>\n","      <td>[Não, há, ,, não, pode, haver, escravidão, sem...</td>\n","      <td>[ADV, VERB, PUNCT, ADV, VERB, VERB, NOUN, ADP,...</td>\n","      <td>23</td>\n","      <td>escravos</td>\n","      <td>escravo</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4a9ece76-f50d-4d30-8e63-f13a43b93fe9')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-4a9ece76-f50d-4d30-8e63-f13a43b93fe9 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-4a9ece76-f50d-4d30-8e63-f13a43b93fe9');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":89}],"source":["lista_documentos_originais_filtrados.sample(5)"]},{"cell_type":"markdown","metadata":{"id":"8yyRt4jnYxsU"},"source":["#### Analise dos dados originais com janela"]},{"cell_type":"markdown","metadata":{"id":"pOzDVi7PR6RE"},"source":["### **adicionar indice da palavra chave, indice sup e inf da jenala, palavra chave**\n","\n","utilizar a posição originão sem o acrecimo do + 1 no indice superior\n","\n","criar uma lista d onde "]},{"cell_type":"markdown","metadata":{"id":"kV4ZjkGDWeLl"},"source":["#### filtra as coisas \n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25,"status":"ok","timestamp":1669133373815,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"dSyALL0UM6L1","outputId":"193d8553-9af4-4415-88ea-269fa5bb0dbf"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['escravos', 'senhores', 'escravo', 'senhor', 'negro', 'crioulo',\n","       'escrava', 'crioulinho', 'senhora', 'criado', 'negra', 'crioulos',\n","       'criados', 'negros', 'escravas', 'branca', 'branco', 'senhoras',\n","       'brancos', 'crioula', 'negras', 'crioulas', 'criada',\n","       'crioulinhos'], dtype=object)"]},"metadata":{},"execution_count":90}],"source":["lista_documentos_originais_filtrados['palavraAlvo'].unique()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22,"status":"ok","timestamp":1669133373816,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"xDuz26qmNAzW","outputId":"1e534e97-b0b4-4d50-f1d8-70d318843e34"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['escravo', 'senhor', 'negro', 'crioulo', 'criado', 'branco'],\n","      dtype=object)"]},"metadata":{},"execution_count":91}],"source":["lista_documentos_originais_filtrados['grupo'].unique()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1669133373817,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"pKvgWN0gNVJL","outputId":"d07f845c-d44a-4f32-80da-dabcbe915643"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["1844"]},"metadata":{},"execution_count":92}],"source":["len(lista_documentos_originais_filtrados)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9JGuFuP5MidR"},"outputs":[],"source":["lista_documentos_filtrados = lista_documentos_originais_filtrados "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":390,"status":"ok","timestamp":1669133374193,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"k5pLFDvyNXT7","outputId":"d1d3af57-9f96-43d0-b573-3a6e6015523e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["1844"]},"metadata":{},"execution_count":94}],"source":["len(lista_documentos_filtrados)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":48,"status":"ok","timestamp":1669133374194,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"uvVO_dOrAwmP","outputId":"172d6eba-ba9a-4851-c7b3-f85972dd6422"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 49,  60,  52,   3,  32,  28,  22,  62, 105,  59,  45,   6,  10,\n","         5,  15,  18,  64,   2,  20,  35,   1,  14,  57, 100,  23,  34,\n","        38,   4,   7,  40,  13,  26,  12,  27,  17,  67,  48,  24,   8,\n","        36,  95,  33,  56,  51, 133,  41,  42,  65,  47,  53,  55,  73,\n","        94,  19,  25,  68,   9,  21,  54,  31,  78,  11,  37,  86,  16,\n","        30,  61,  76,  39,  50,   0,  66,  75, 158, 103, 131, 141,  58,\n","       118,  44, 104,  70,  93,  29,  43,  63,  92,  83, 112,  84,  71,\n","        72,  77,  69,  46, 102, 116, 204,  87, 107, 165, 101, 108, 115,\n","        80])"]},"metadata":{},"execution_count":95}],"source":["lista_documentos_filtrados[\"idOcorrencia\"].unique()"]},{"cell_type":"code","source":["lista_documentos_filtrados.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":337},"id":"oKw-Zo2koYsy","executionInfo":{"status":"ok","timestamp":1669133374194,"user_tz":180,"elapsed":35,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"aa804542-8ea5-4545-fddd-b3a8e008498a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       id                                          documento  \\\n","0  200016  Explorador das trevas protetoras dos vícios e ...   \n","1  200016  Explorador das trevas protetoras dos vícios e ...   \n","2  200016  Explorador das trevas protetoras dos vícios e ...   \n","3  200018  vêm os quilombolas escravos fugidos e acoitado...   \n","4  200019  E o vendelhão é em regra a vigilância protetor...   \n","\n","                                     documentoTokens  \\\n","0  [Explorador, das, trevas, protetoras, dos, víc...   \n","1  [Explorador, das, trevas, protetoras, dos, víc...   \n","2  [Explorador, das, trevas, protetoras, dos, víc...   \n","3  [vêm, os, quilombolas, escravos, fugidos, e, a...   \n","4  [E, o, vendelhão, é, em, regra, a, vigilância,...   \n","\n","                                        posDocumento  idOcorrencia  \\\n","0  [NOUN, ADP, NOUN, ADJ, ADP, NOUN, CCONJ, ADP, ...            49   \n","1  [NOUN, ADP, NOUN, ADJ, ADP, NOUN, CCONJ, ADP, ...            60   \n","2  [NOUN, ADP, NOUN, ADJ, ADP, NOUN, CCONJ, ADP, ...            52   \n","3  [VERB, DET, NOUN, ADJ, VERB, CCONJ, VERB, ADP,...             3   \n","4  [CCONJ, DET, NOUN, AUX, ADP, NOUN, DET, NOUN, ...            32   \n","\n","  palavraAlvo    grupo                obra                     autor   ano  \\\n","0    escravos  escravo  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","1    escravos  escravo  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","2    senhores   senhor  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","3    escravos  escravo  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","4    escravos  escravo  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","\n","   idObra   movimento  \n","0       2  Romantismo  \n","1       2  Romantismo  \n","2       2  Romantismo  \n","3       2  Romantismo  \n","4       2  Romantismo  "],"text/html":["\n","  <div id=\"df-7ce06429-662d-465f-8eb9-fca6f0b05446\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>documento</th>\n","      <th>documentoTokens</th>\n","      <th>posDocumento</th>\n","      <th>idOcorrencia</th>\n","      <th>palavraAlvo</th>\n","      <th>grupo</th>\n","      <th>obra</th>\n","      <th>autor</th>\n","      <th>ano</th>\n","      <th>idObra</th>\n","      <th>movimento</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>200016</td>\n","      <td>Explorador das trevas protetoras dos vícios e ...</td>\n","      <td>[Explorador, das, trevas, protetoras, dos, víc...</td>\n","      <td>[NOUN, ADP, NOUN, ADJ, ADP, NOUN, CCONJ, ADP, ...</td>\n","      <td>49</td>\n","      <td>escravos</td>\n","      <td>escravo</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>200016</td>\n","      <td>Explorador das trevas protetoras dos vícios e ...</td>\n","      <td>[Explorador, das, trevas, protetoras, dos, víc...</td>\n","      <td>[NOUN, ADP, NOUN, ADJ, ADP, NOUN, CCONJ, ADP, ...</td>\n","      <td>60</td>\n","      <td>escravos</td>\n","      <td>escravo</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>200016</td>\n","      <td>Explorador das trevas protetoras dos vícios e ...</td>\n","      <td>[Explorador, das, trevas, protetoras, dos, víc...</td>\n","      <td>[NOUN, ADP, NOUN, ADJ, ADP, NOUN, CCONJ, ADP, ...</td>\n","      <td>52</td>\n","      <td>senhores</td>\n","      <td>senhor</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>200018</td>\n","      <td>vêm os quilombolas escravos fugidos e acoitado...</td>\n","      <td>[vêm, os, quilombolas, escravos, fugidos, e, a...</td>\n","      <td>[VERB, DET, NOUN, ADJ, VERB, CCONJ, VERB, ADP,...</td>\n","      <td>3</td>\n","      <td>escravos</td>\n","      <td>escravo</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>200019</td>\n","      <td>E o vendelhão é em regra a vigilância protetor...</td>\n","      <td>[E, o, vendelhão, é, em, regra, a, vigilância,...</td>\n","      <td>[CCONJ, DET, NOUN, AUX, ADP, NOUN, DET, NOUN, ...</td>\n","      <td>32</td>\n","      <td>escravos</td>\n","      <td>escravo</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7ce06429-662d-465f-8eb9-fca6f0b05446')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7ce06429-662d-465f-8eb9-fca6f0b05446 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7ce06429-662d-465f-8eb9-fca6f0b05446');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":96}]},{"cell_type":"code","source":["dataDicionarioAlvo = {\n","    0:{\"label\":\"negro\", \"alvo\":[\"negro\",\"negros\",\"negrinho\",\"negrinhos\",\"negra\",\"negras\",\"negrinha\",\"negrinhas\"]},\n","    1:{\"label\":\"crioulo\", \"alvo\": [\"crioulo\",\"crioulos\",\"crioulinho\",\"crioulinhos\",\"crioula\",\"crioulas\",\"crioulinha\",\"crioulinhas\"]},\n","    2:{\"label\":\"mulato\", \"alvo\":[\"mulato\",\"mulatos\",\"mulatinho\",\"mulatinhos\",\"mulata\",\"mulatas\",\"mulatinha\",\"mulatinhas\"]},\n","    3:{\"label\":\"criado\", \"alvo\":[\"criado\",\"criados\",\"criadinho\",\"criadinhos\",\"criada\",\"criadas\",\"criadinha\",\"criadinhas\"]},\n","    4:{\"label\":\"escravo\", \"alvo\":[\"escravo\",\"escravos\",\"escravinho\",\"escravinhos\",\"escrava\",\"escravas\",\"escravinha\",\"escravinhas\"]},\n","    5:{\"label\":\"senhor\", \"alvo\":[\"senhor\",\"senhores\",\"senhora\",\"senhoras\",]},\n","    6:{\"label\":\"branco\", \"alvo\":[\"branco\",\"brancos\",\"branca\",\"brancas\",]},\n","    }\n"],"metadata":{"id":"bUHaTmIhZ9ri"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dataDicionarioAlvo[0]['label']\n","dataDicionarioAlvo[0]['alvo']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7JUnGv5GaBrd","executionInfo":{"status":"ok","timestamp":1669133374196,"user_tz":180,"elapsed":30,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"fed2d090-afcc-4de8-98fc-e7050289c57e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['negro',\n"," 'negros',\n"," 'negrinho',\n"," 'negrinhos',\n"," 'negra',\n"," 'negras',\n"," 'negrinha',\n"," 'negrinhas']"]},"metadata":{},"execution_count":98}]},{"cell_type":"code","source":[],"metadata":{"id":"Bf7YZuvw8N2-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# classes morfosemantica\n","#   \"X\"    : \"Outro\",\n","#   \"VERB\" : \"Verbo \",\n","#   \"SYM\"  : \"Símbolo\",\n","#   \"CONJ\" : \"Conjunção\",\n","#   \"SCONJ\": \"Conjunção subordinativa\",\n","#   \"PUNCT\": \"Pontuação\",\n","#   \"PROPN\": \"Nome próprio\",\n","#   \"PRON\" : \"Pronome substativo\",\n","#   \"PART\" : \"Partícula, morfemas livres\",\n","#   \"NUM\"  : \"Numeral\",\n","#   \"NOUN\" : \"Substantivo\",\n","#   \"INTJ\" : \"Interjeição\",\n","#   \"DET\"  : \"Determinante, Artigo e pronomes adjetivos\",\n","#   \"CCONJ\": \"Conjunção coordenativa\",\n","#   \"AUX\"  : \"Verbo auxiliar\",\n","#   \"ADV\"  : \"Advérbio\",\n","#   \"ADP\"  : \"Preposição\",\n","#   \"ADJ\"  : \"Adjetivo\"\n","\n","classesMorfo = [\"X\",\"SYM\",\"PUNCT\"]"],"metadata":{"id":"QxAgwENgoR0o"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# lista de stopwords\n","# 'a', 'acerca', 'ademais', 'adeus', 'agora', 'ainda', 'algo', 'algumas', \n","# 'alguns', 'ali', 'além', 'ambas', 'ambos', 'antes', 'ao', 'aos', 'apenas', \n","# 'apoia', 'apoio', 'apontar', 'após', 'aquela', 'aquelas', 'aquele', 'aqueles', \n","# 'aqui', 'aquilo', 'as', 'assim', 'através', 'atrás', 'até', 'aí', 'baixo', \n","# 'bastante', 'bem', 'boa', 'bom', 'breve', 'cada', 'caminho', 'catorze', \n","# 'cedo', 'cento', 'certamente', 'certeza', 'cima', 'cinco', 'coisa', 'com',\n","# 'como', 'comprida', 'comprido', 'conhecida', 'conhecido', 'conselho',\n","# 'contra', 'contudo', 'corrente', 'cuja', 'cujo', 'custa', 'cá', 'da',\n","# 'daquela', 'daquele', 'dar', 'das', 'de', 'debaixo', 'demais', 'dentro',\n","# 'depois', 'des', 'desde', 'dessa', 'desse', 'desta', 'deste', 'deve', 'devem',\n","# 'deverá', 'dez', 'dezanove', 'dezasseis', 'dezassete', 'dezoito', 'diante',\n","# 'direita', 'disso', 'diz', 'dizem', 'dizer', 'do', 'dois', 'dos', 'doze',\n","# 'duas', 'dá', 'dão', 'e', 'ela', 'elas', 'ele', 'eles', 'em', 'embora', \n","# 'enquanto', 'entre', 'então', 'era', 'essa', 'essas', 'esse', 'esses',\n","# 'esta', 'estado', 'estar', 'estará', 'estas', 'estava', 'este', 'estes', \n","# 'esteve', 'estive', 'estivemos', 'estiveram', 'estiveste', 'estivestes',\n","# 'estou', 'está', 'estás', 'estão', 'eu', 'eventual', 'exemplo', 'falta',\n","# 'fará', 'favor', 'faz', 'fazeis', 'fazem', 'fazemos', 'fazer', 'fazes',\n","# 'fazia', 'faço', 'fez', 'fim', 'final', 'foi', 'fomos', 'for', 'fora',\n","# 'foram', 'forma', 'foste', 'fostes', 'fui', 'geral', 'grande', 'grandes',\n","# 'grupo', 'inclusive', 'iniciar', 'inicio', 'ir', 'irá', 'isso', 'isto', 'já',\n","# 'lado', 'lhe', 'ligado', 'local', 'logo', 'longe', 'lugar', 'lá', 'maior',\n","# 'maioria', 'maiorias', 'mais', 'mal', 'mas', 'me', 'meio', 'menor', 'menos',\n","# 'meses', 'mesmo', 'meu', 'meus', 'mil', 'minha', 'minhas', 'momento',\n","# 'muito', 'muitos', 'máximo', 'mês', 'na', 'nada', 'naquela', 'naquele',\n","# 'nas', 'nem', 'nenhuma', 'nessa', 'nesse', 'nesta', 'neste', 'no', 'nos',\n","# 'nossa', 'nossas', 'nosso', 'nossos', 'nova', 'novas', 'nove', 'novo',\n","# 'novos', 'num', 'numa', 'nunca', 'nuns', 'não', 'nível', 'nós', 'número',\n","# 'números', 'o', 'obrigada', 'obrigado', 'oitava', 'oitavo', 'oito', 'onde',\n","# 'ontem', 'onze', 'ora', 'os', 'ou', 'outra', 'outras', 'outros', 'para',\n","# 'parece', 'parte', 'partir', 'pegar', 'pela', 'pelas', 'pelo', 'pelos',\n","# 'perto', 'pode', 'podem', 'poder', 'poderá', 'podia', 'pois', 'ponto',\n","# 'pontos', 'por', 'porquanto', 'porque', 'porquê', 'portanto', 'porém',\n","# 'posição', 'possivelmente', 'posso', 'possível', 'pouca', 'pouco', 'povo',\n","# 'primeira', 'primeiro', 'próprio', 'próxima', 'próximo', 'puderam',\n","# 'pôde', 'põe', 'põem', 'quais', 'qual', 'qualquer', 'quando', 'quanto',\n","# 'quarta', 'quarto', 'quatro', 'que', 'quem', 'quer', 'querem', 'quero',\n","# 'questão', 'quieta', 'quieto', 'quinta', 'quinto', 'quinze', 'quê',\n","# 'relação', 'sabe', 'saber', 'se', 'segunda', 'segundo', 'sei', 'seis',\n","# 'sem', 'sempre', 'ser', 'seria', 'sete', 'seu', 'seus', 'sexta', 'sexto',\n","# 'sim', 'sistema', 'sob', 'sobre', 'sois', 'somente', 'somos', 'sou', 'sua',\n","# 'suas', 'são', 'sétima', 'sétimo', 'só', 'tais', 'tal', 'talvez', 'também',\n","# 'tanta', 'tanto', 'tarde', 'te', 'tem', 'temos', 'tempo', 'tendes', 'tenho',\n","# 'tens', 'tentar', 'tentaram', 'tente', 'tentei', 'ter', 'terceira',\n","# 'terceiro', 'teu', 'teus', 'teve', 'tipo', 'tive', 'tivemos', 'tiveram',\n","# 'tiveste', 'tivestes', 'toda', 'todas', 'todo', 'todos', 'treze', 'três',\n","# 'tu', 'tua', 'tuas', 'tudo', 'tão', 'têm', 'um', 'uma', 'umas', 'uns', 'usa',\n","# 'usar', 'vai', 'vais', 'valor', 'veja', 'vem', 'vens', 'ver', 'vez', 'vezes',\n","# 'vinda', 'vindo', 'vinte', 'você', 'vocês', 'vos', 'vossa', 'vossas',\n","# 'vosso', 'vossos', 'vários', 'vão', 'vêm', 'vós', 'zero', 'à', 'às', 'área',\n","# 'é', 'és', 'último']\n","\n","\n","listaStopWords = [\"e\",\"a\",\"o\",'é','à',\"ao\",\"aos\",'as','os','às', 'és',\n","                  'de','da',\"dos\",\"das\",\"des\",\"dão\",'do'\n","                  'um', 'uma', 'umas', 'uns',\"em\",\n","                  'se','ser','sei','seu','sua'\n","                  \"na\",\"no\",'nas',\n","                  'tu','ta','te',\n","                  \"la\",'le',\n","                  \"foi\",\"fui\",\n","                  'com', 'como',\n","                  'essa', 'essas', 'esse', 'esses', \n","                  'esta','estas','este','estes',\n","                  \"desse\",'dessa',\"desses\",\"dessas\",\"desde\"\n","                  'estou', 'está', 'estás', 'estão',\n","                  \"que\",\"qual\",\"quer\",'quais', 'qualquer', 'quando', 'quanto',\n","                  \"pra\",'para',\n","                  'embora', 'enquanto',\n","                  'por', 'porquanto', 'porque', 'porquê', 'portanto', 'porém',\n","                ]"],"metadata":{"id":"L3gfxfA8odCW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ids_amostra =[200923, 200899, 201699, 204854, 200088, 201800, 202052, 201436,\n","       204612, 202288, 201367, 204310, 200154, 201017, 200178, 205297,\n","       200018, 201676, 200982, 201890, 203723, 202295, 201110, 205347,\n","       203507, 201590, 202027, 202746, 200933, 201132, 204693, 204068,\n","       202112, 201438, 203462, 203590, 202910, 201647, 201426, 201597,\n","       202237, 202286, 203388, 203164, 201347, 205245, 205629, 204904,\n","       200501, 201352, 202430, 202741, 204202, 204686, 202762, 201954,\n","       200842, 200109, 201220, 203182, 202815, 200537, 200034, 201471,\n","       200874, 200021, 201395, 200139, 202011, 202171, 200376, 201858,\n","       202022, 200692, 200443, 204529, 200952, 202086, 201305, 201803,\n","       202987, 200833, 202789, 204196, 202680, 201929, 202565, 201082,\n","       202908, 204588, 200995, 201461, 201486, 202613, 202177, 203176,\n","       201090, 202686, 200803, 202070, 202812, 200406, 204040, 200991,\n","       201344, 200549, 200123, 204470, 202188, 201538, 201215, 201886,\n","       201867, 201573, 200935, 204690, 201022, 201646, 201150, 202561,\n","       204845, 201023, 201777, 205379, 201258, 200187, 201738, 202178,\n","       200748, 203799, 203089, 204087, 202863, 201866, 200127, 201546,\n","       202493, 202446, 201449, 203734, 202507, 204107, 201197, 201920,\n","       203701, 204560, 203178, 201359, 201072, 201144, 201386, 202205,\n","       201092, 201044, 202332, 202892, 201071, 202282, 202128, 202390,\n","       200650, 202514, 200074, 202577, 201891, 202223, 201472, 201026,\n","       202922, 202374, 204548, 204250, 200386, 201013, 200947, 203757,\n","       200026, 200283, 204525, 202964, 200087, 202462, 202972, 202895,\n","       201160, 202143, 202823, 201477, 204515, 200800, 200113, 201664,\n","       204617, 205348, 203988, 204536, 201467, 205433, 205468, 200686,\n","       205627, 201960, 201442, 204532, 200375, 203190, 203173, 201088,\n","       201089, 201286, 202056, 201724, 200807, 201167, 205332, 204483,\n","       201654, 201211, 202185, 200274, 205292, 202757, 200239, 202866,\n","       204819, 203171, 203666, 200037, 201138, 203093, 200261, 202978,\n","       202930, 200478, 202699, 202046, 203480, 201942, 203259, 202309,\n","       201239, 203995, 203750, 201570, 202876, 200286, 203527, 204188,\n","       205609, 200878, 202835, 202228, 200677, 201595, 202651, 201441,\n","       201445, 202225, 202200, 200872, 200885, 204111, 201903, 204896,\n","       202159, 202584, 203736, 202093, 202071, 201281, 204074, 205389,\n","       201084, 200075, 200377, 200829, 201328, 203534, 201696, 204479,\n","       200987, 201881, 200410, 202581, 202055, 203978, 204221, 202528,\n","       204109, 200430, 200138, 202310, 205517, 200229, 204123, 201105,\n","       200236, 205134, 203696, 201095]"],"metadata":{"id":"k0qOQb3-neVC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["lista_documentos_filtrados_drop_duplicates =  lista_documentos_filtrados.drop_duplicates(subset=['documento','idObra'])"],"metadata":{"id":"WeuluCR_n9AT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["lista_documentos_filtrados_drop_duplicates_ids_amostra = lista_documentos_filtrados_drop_duplicates.apply(lambda row: row[lista_documentos_filtrados_drop_duplicates['id'].isin(ids_amostra)])\n"],"metadata":{"id":"uZidiadPoDbe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["len(lista_documentos_filtrados_drop_duplicates_ids_amostra)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2RcTRJrWrT4m","executionInfo":{"status":"ok","timestamp":1669133374200,"user_tz":180,"elapsed":21,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"325929e9-c3b3-45a2-d761-637c9116c982"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["500"]},"metadata":{},"execution_count":104}]},{"cell_type":"code","source":["limitar_sentenca = 1\n","use_amostra = 1\n","\n","numero_limite = 450\n","\n","\n","if  limitar_sentenca == 1:\n","    if use_amostra == 1:\n","        lista_documentos_filtrados_drop_duplicates_ids_amostra = lista_documentos_filtrados_drop_duplicates.apply(lambda row: row[lista_documentos_filtrados_drop_duplicates['id'].isin(ids_amostra)])\n","        lista_documentos_filtrados_to_embeddings = lista_documentos_filtrados_drop_duplicates_ids_amostra\n","    else:\n","        lista_documentos_filtrados_limte_sentenca = lista_documentos_filtrados_drop_duplicates.sample(300)\n","        lista_documentos_filtrados_to_embeddings = lista_documentos_filtrados_limte_sentenca\n","else:\n","    lista_documentos_filtrados_to_embeddings = lista_documentos_filtrados_drop_duplicates\n"],"metadata":{"id":"O8oUGKAuIdPJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["parametro = 15000\n","menor = 999999999999999\n","bk_lista_documentos_filtrados_500 = None"],"metadata":{"id":"wko5Eo7F-EA-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["while parametro > 7878: \n","    # perccore a lista de documento inicio ate final-1\n","    lista_documentos_filtrados_500 = lista_documentos_filtrados_drop_duplicates.sample(300)\n","    counter = 0\n","\n","    for index, row in lista_documentos_filtrados_500.iterrows():\n","        sw1_documentoTokens = row[\"documentoTokens\"]\n","\n","        counter = counter + len(sw1_documentoTokens)\n","        lista_documentos_filtrados_to_embeddings = lista_documentos_filtrados_500\n","    \n","    # print('counter = ',counter, 'menor = ',menor)\n","    if (menor > counter):\n","        menor = counter \n","        bk_lista_documentos_filtrados_500 = lista_documentos_filtrados_500\n","        print('counter = ',counter, 'menor = ',menor)\n","    parametro = counter\n","\n","\n","\n","\n","\n","\n","\n"],"metadata":{"id":"3yOM91vI9o8M","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1669133736358,"user_tz":180,"elapsed":362173,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"fdea6660-884e-42ca-dae8-96b10b330dce"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["counter =  10495 menor =  10495\n","counter =  9432 menor =  9432\n","counter =  9404 menor =  9404\n","counter =  9360 menor =  9360\n","counter =  9281 menor =  9281\n","counter =  9250 menor =  9250\n","counter =  9085 menor =  9085\n","counter =  8843 menor =  8843\n","counter =  8486 menor =  8486\n","counter =  8366 menor =  8366\n","counter =  8133 menor =  8133\n","counter =  7972 menor =  7972\n","counter =  7726 menor =  7726\n"]}]},{"cell_type":"code","source":["# len(lista_documentos_filtrados_to_embeddings)\n","# counter = 0\n","# documentos_bar = tqdm_notebook(lista_documentos_filtrados_to_embeddings.iterrows(), desc=f\"Documentos\", unit=f\" documento\", total=len(lista_documentos_filtrados_to_embeddings))  \n","# for index, row in documentos_bar:\n","#     sw1_documentoTokens = row[\"documentoTokens\"]\n","#     counter = counter + len(sw1_documentoTokens)\n","\n","# print(counter)\n","\n"],"metadata":{"id":"0sjSBHTcT-s6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["bk_lista_documentos_filtrados_500['id'].unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u-p0OzvbnA64","executionInfo":{"status":"ok","timestamp":1669133759254,"user_tz":180,"elapsed":529,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"09563017-9764-41e8-895b-5755523183e2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([200923, 200899, 201699, 204854, 200088, 201800, 202052, 201436,\n","       204612, 202288, 201367, 204310, 200154, 201017, 200178, 205297,\n","       200018, 201676, 200982, 201890, 203723, 202295, 201110, 205347,\n","       203507, 201590, 202027, 202746, 200933, 201132, 204693, 204068,\n","       202112, 201438, 203462, 203590, 202910, 201647, 201426, 201597,\n","       202237, 202286, 203388, 203164, 201347, 205245, 205629, 204904,\n","       200501, 201352, 202430, 202741, 204202, 204686, 202762, 201954,\n","       200842, 200109, 201220, 203182, 202815, 200537, 200034, 201471,\n","       200874, 200021, 201395, 200139, 202011, 202171, 200376, 201858,\n","       202022, 200692, 200443, 204529, 200952, 202086, 201305, 201803,\n","       202987, 200833, 202789, 204196, 202680, 201929, 202565, 201082,\n","       202908, 204588, 200995, 201461, 201486, 202613, 202177, 203176,\n","       201090, 202686, 200803, 202070, 202812, 200406, 204040, 200991,\n","       201344, 200549, 200123, 204470, 202188, 201538, 201215, 201886,\n","       201867, 201573, 200935, 204690, 201022, 201646, 201150, 202561,\n","       204845, 201023, 201777, 205379, 201258, 200187, 201738, 202178,\n","       200748, 203799, 203089, 204087, 202863, 201866, 200127, 201546,\n","       202493, 202446, 201449, 203734, 202507, 204107, 201197, 201920,\n","       203701, 204560, 203178, 201359, 201072, 201144, 201386, 202205,\n","       201092, 201044, 202332, 202892, 201071, 202282, 202128, 202390,\n","       200650, 202514, 200074, 202577, 201891, 202223, 201472, 201026,\n","       202922, 202374, 204548, 204250, 200386, 201013, 200947, 203757,\n","       200026, 200283, 204525, 202964, 200087, 202462, 202972, 202895,\n","       201160, 202143, 202823, 201477, 204515, 200800, 200113, 201664,\n","       204617, 205348, 203988, 204536, 201467, 205433, 205468, 200686,\n","       205627, 201960, 201442, 204532, 200375, 203190, 203173, 201088,\n","       201089, 201286, 202056, 201724, 200807, 201167, 205332, 204483,\n","       201654, 201211, 202185, 200274, 205292, 202757, 200239, 202866,\n","       204819, 203171, 203666, 200037, 201138, 203093, 200261, 202978,\n","       202930, 200478, 202699, 202046, 203480, 201942, 203259, 202309,\n","       201239, 203995, 203750, 201570, 202876, 200286, 203527, 204188,\n","       205609, 200878, 202835, 202228, 200677, 201595, 202651, 201441,\n","       201445, 202225, 202200, 200872, 200885, 204111, 201903, 204896,\n","       202159, 202584, 203736, 202093, 202071, 201281, 204074, 205389,\n","       201084, 200075, 200377, 200829, 201328, 203534, 201696, 204479,\n","       200987, 201881, 200410, 202581, 202055, 203978, 204221, 202528,\n","       204109, 200430, 200138, 202310, 205517, 200229, 204123, 201105,\n","       200236, 205134, 203696, 201095])"]},"metadata":{},"execution_count":108}]},{"cell_type":"code","source":["lista_documentos_filtrados_to_embeddings[lista_documentos_filtrados_to_embeddings.duplicated(['id'], keep=False)].sort_values(by=['id'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":49},"id":"KPP2QfqeBwIP","executionInfo":{"status":"ok","timestamp":1669133792131,"user_tz":180,"elapsed":318,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"0f4d92b6-a3e9-4179-bbd0-3d57ede88a7b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Empty DataFrame\n","Columns: [id, documento, documentoTokens, posDocumento, idOcorrencia, palavraAlvo, grupo, obra, autor, ano, idObra, movimento]\n","Index: []"],"text/html":["\n","  <div id=\"df-efc2e1ce-b03f-4749-8bbf-ee940288cd61\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>documento</th>\n","      <th>documentoTokens</th>\n","      <th>posDocumento</th>\n","      <th>idOcorrencia</th>\n","      <th>palavraAlvo</th>\n","      <th>grupo</th>\n","      <th>obra</th>\n","      <th>autor</th>\n","      <th>ano</th>\n","      <th>idObra</th>\n","      <th>movimento</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-efc2e1ce-b03f-4749-8bbf-ee940288cd61')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-efc2e1ce-b03f-4749-8bbf-ee940288cd61 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-efc2e1ce-b03f-4749-8bbf-ee940288cd61');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":109}]},{"cell_type":"markdown","source":["###  3.2.1 gera embeddings"],"metadata":{"id":"v9vT0xFZv3Dw"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"NMrd5JtU6UNB","colab":{"base_uri":"https://localhost:8080/","height":49,"referenced_widgets":["ae555655f26a41fe9543c455d584836e","a36be9c5ce574acc85f44527dcc2faf2","d606cabf014546cab7ff4693024eb0a7","b043acb4a6f049e88828162b96876582","cf6afa01b7fc441b81392790f8611c81","b144208b7bb54347af135ff8947db850","7ff69ca59c094ce38d4ff9d945237ebe","dccf476240394ab6800299333fde9c33","552192f348a847328457fdc22e6c0910","bb1bf7e5032a4367a4f76a7d1486959c","9af0ebf24dbd4f45b0930862aa63da37"]},"executionInfo":{"status":"ok","timestamp":1669133979724,"user_tz":180,"elapsed":183905,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"a85fcddf-0702-432f-ca0b-341f2055e5aa"},"outputs":[{"output_type":"display_data","data":{"text/plain":["Documentos:   0%|          | 0/300 [00:00<?, ? documento/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ae555655f26a41fe9543c455d584836e"}},"metadata":{}}],"source":["# Import das bibliotecas.\n","from tqdm.notebook import tqdm as tqdm_notebook\n","\n","lista_palavras_filtrados_emb = [];\n","\n","# perccore a lista de documento inicio ate final-1\n","documentos_bar = tqdm_notebook(lista_documentos_filtrados_to_embeddings.iterrows(), desc=f\"Documentos\", unit=f\" documento\", total=len(lista_documentos_filtrados_to_embeddings))  \n","for index, row in documentos_bar:\n","    \n","    # if row[\"id\"]< 10:\n","    # if row['id'] in ids:\n","    if True:\n","        sw1_id              = row[\"id\"]\n","        sw1_documento       = row[\"documento\"]\n","        sw1_documentoTokens = row[\"documentoTokens\"]\n","        sw1_posDocumento    = row[\"posDocumento\"]\n","        sw1_idOcorrencia    = row[\"idOcorrencia\"]\n","        sw1_palavraAlvo     = row[\"palavraAlvo\"]\n","        sw1_grupo           = row['grupo']\n","        sw1_obra            = row[\"obra\"]\n","        sw1_autor           = row[\"autor\"]\n","        sw1_ano             = row[\"ano\"]\n","        sw1_idObra          = row[\"idObra\"]\n","        sw1_movimento       = row[\"movimento\"]\n","        sw1_document        = \" \".join(sw1_documentoTokens)\n","        sw1_length          = len(sw1_documentoTokens)\n","\n","\n","\n","\n","\n","        # print('sw1_documentoTokens        ',sw1_documentoTokens)\n","\n","\n","        # print('sw1_janela_documentoTokens ',sw1_janela_documentoTokens)\n","\n","        # alteração 16/09/2022 10:11\n","        sw1_document = \" \".join(sw1_documentoTokens)\n","        token_embeddings, documento_tokenizado =  getEmbeddingsUltimaCamada(sw1_document, model, tokenizer)\n","\n","\n","        # gerar os embeddings do documento sw1\n","        listaTokens, listaPOS, lista_tokens_OOV, listaEmbeddingsMEAN, listaEmbeddingsMAX =  getTokensEmbeddingsPOSSentenca(token_embeddings[1:-1],\n","                                                                                                        documento_tokenizado[1:-1], \n","                                                                                                        sw1_document)\n","\n","        for indexToken,token in enumerate(listaTokens):\n","\n","\n","            if listaPOS[indexToken] not in classesMorfo :\n","            # and listaTokens[indexToken].lower() not in listaStopWords: \n","            # if True: \n","                grupo = \"N/A\"\n","                palavra_alvo = \"N/A\"\n","\n","                if listaTokens[indexToken] in dataDicionarioAlvo[0]['alvo']:\n","                    grupo = dataDicionarioAlvo[0]['label']\n","                    palavra_alvo = listaTokens[indexToken]\n","\n","                if listaTokens[indexToken] in dataDicionarioAlvo[1]['alvo']:\n","                    grupo = dataDicionarioAlvo[1]['label']\n","                    palavra_alvo = listaTokens[indexToken]\n","\n","                if listaTokens[indexToken] in dataDicionarioAlvo[2]['alvo']:\n","                    grupo = dataDicionarioAlvo[2]['label']\n","                    palavra_alvo = listaTokens[indexToken]              \n","\n","                if listaTokens[indexToken] in dataDicionarioAlvo[3]['alvo']:\n","                    grupo = dataDicionarioAlvo[3]['label']\n","                    palavra_alvo = listaTokens[indexToken]\n","\n","                if listaTokens[indexToken] in dataDicionarioAlvo[4]['alvo']:\n","                    grupo = dataDicionarioAlvo[4]['label']\n","                    palavra_alvo = listaTokens[indexToken]\n","\n","                if listaTokens[indexToken] in dataDicionarioAlvo[5]['alvo']:\n","                    grupo = dataDicionarioAlvo[5]['label']\n","                    palavra_alvo = listaTokens[indexToken]\n","                \n","                if listaTokens[indexToken] in dataDicionarioAlvo[6]['alvo']:\n","                    grupo = dataDicionarioAlvo[6]['label']\n","                    palavra_alvo = listaTokens[indexToken]\n","\n","\n","\n","                lista_palavras_filtrados_emb.append([\n","                    sw1_id,\n","                    indexToken,\n","                    listaTokens[indexToken],\n","                    listaPOS[indexToken],\n","                    lista_tokens_OOV[indexToken],\n","                    grupo,\n","                    palavra_alvo,\n","                    listaEmbeddingsMEAN[indexToken],\n","                    sw1_documento,\n","                    sw1_obra,\n","                    sw1_autor,\n","                    sw1_ano,\n","                    sw1_idObra,\n","                    sw1_movimento,\n","                    sw1_document,\n","                    sw1_length\n","                ])\n","\n","\n","\n"]},{"cell_type":"code","source":["columnsDataframe = [  \n","                'id_documento',\n","                'posicaoToken',\n","                'token',\n","                'posTag',\n","                'OOV',\n","                'grupo',\n","                'palavra_alvo',\n","                'embeddings',\n","                'sentenca',\n","                'obra',\n","                'autor',\n","                'ano',\n","                'idObra',\n","                'movimento',\n","                'document',\n","                'tamanho_sentenca',\n","]\n","\n","\n"],"metadata":{"id":"RMncPjJUwQ8i"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["len(lista_palavras_filtrados_emb)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ie3FZ41t1R9i","executionInfo":{"status":"ok","timestamp":1669134089590,"user_tz":180,"elapsed":316,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"bdd544c9-b81a-474b-baa8-c3a50e0d6abe"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["6659"]},"metadata":{},"execution_count":112}]},{"cell_type":"code","source":["lista_documentos_filtrados_emb_dataframe = pd.DataFrame(lista_palavras_filtrados_emb, columns=columnsDataframe)"],"metadata":{"id":"jK9x6CkxwkIv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["del lista_palavras_filtrados_emb"],"metadata":{"id":"qEyalb5RiACe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["len(lista_documentos_filtrados_emb_dataframe['id_documento'].unique())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YlWA5HFhFztz","executionInfo":{"status":"ok","timestamp":1669118234795,"user_tz":180,"elapsed":17,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"55fe2b04-265a-4dc9-e451-54b95d6b0e74"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["500"]},"metadata":{},"execution_count":231}]},{"cell_type":"code","source":["lista_documentos_filtrados_emb_dataframe.sample(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"hhh0d8aL4RIv","executionInfo":{"status":"ok","timestamp":1669134126980,"user_tz":180,"elapsed":460,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"616aaf2e-f278-4a30-b9dd-dd50797fe35a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      id_documento  posicaoToken  token posTag  OOV grupo palavra_alvo  \\\n","1682        204529            19      e  CCONJ    0   N/A          N/A   \n","5637        200878            18  raros    ADJ    0   N/A          N/A   \n","6372        202055             7  ordem   NOUN    0   N/A          N/A   \n","3537        202390            13     as    DET    0   N/A          N/A   \n","3422        202892             5  baile   NOUN    0   N/A          N/A   \n","\n","                                             embeddings  \\\n","1682  [tensor(0.0963), tensor(0.6473), tensor(-0.361...   \n","5637  [tensor(0.5475), tensor(-1.6422), tensor(0.157...   \n","6372  [tensor(0.7101), tensor(-0.8725), tensor(-0.26...   \n","3537  [tensor(-0.7243), tensor(0.5087), tensor(-0.57...   \n","3422  [tensor(1.0756), tensor(-0.2495), tensor(0.150...   \n","\n","                                               sentenca                obra  \\\n","1682  A escrava é o que a fazem ser: a sociedade esc...  As Vítimas-Algozes   \n","5637  Nunca em parte alguma do mundo houve senhores ...  As Vítimas-Algozes   \n","6372  O sábio curandeiro, chamado imediatamente por ...  As Vítimas-Algozes   \n","3537  O Hércules dominou o negro malvado, que todavi...  As Vítimas-Algozes   \n","3422  – Minha senhora aturdiu-se no baile, não soube...  As Vítimas-Algozes   \n","\n","                         autor   ano  idObra   movimento  \\\n","1682  Joaquim Manuel de Macedo  1869       2  Romantismo   \n","5637  Joaquim Manuel de Macedo  1869       2  Romantismo   \n","6372  Joaquim Manuel de Macedo  1869       2  Romantismo   \n","3537  Joaquim Manuel de Macedo  1869       2  Romantismo   \n","3422  Joaquim Manuel de Macedo  1869       2  Romantismo   \n","\n","                                               document  tamanho_sentenca  \n","1682  A escrava é o que a fazem ser : a sociedade es...                22  \n","5637  Nunca em parte alguma do mundo houve senhores ...                33  \n","6372  O sábio curandeiro , chamado imediatamente por...                14  \n","3537  O Hércules dominou o negro malvado , que todav...                31  \n","3422  – Minha senhora aturdiu-se no baile , não soub...                20  "],"text/html":["\n","  <div id=\"df-41c5744d-6d3d-4d39-857d-8b9e40715209\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id_documento</th>\n","      <th>posicaoToken</th>\n","      <th>token</th>\n","      <th>posTag</th>\n","      <th>OOV</th>\n","      <th>grupo</th>\n","      <th>palavra_alvo</th>\n","      <th>embeddings</th>\n","      <th>sentenca</th>\n","      <th>obra</th>\n","      <th>autor</th>\n","      <th>ano</th>\n","      <th>idObra</th>\n","      <th>movimento</th>\n","      <th>document</th>\n","      <th>tamanho_sentenca</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1682</th>\n","      <td>204529</td>\n","      <td>19</td>\n","      <td>e</td>\n","      <td>CCONJ</td>\n","      <td>0</td>\n","      <td>N/A</td>\n","      <td>N/A</td>\n","      <td>[tensor(0.0963), tensor(0.6473), tensor(-0.361...</td>\n","      <td>A escrava é o que a fazem ser: a sociedade esc...</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","      <td>A escrava é o que a fazem ser : a sociedade es...</td>\n","      <td>22</td>\n","    </tr>\n","    <tr>\n","      <th>5637</th>\n","      <td>200878</td>\n","      <td>18</td>\n","      <td>raros</td>\n","      <td>ADJ</td>\n","      <td>0</td>\n","      <td>N/A</td>\n","      <td>N/A</td>\n","      <td>[tensor(0.5475), tensor(-1.6422), tensor(0.157...</td>\n","      <td>Nunca em parte alguma do mundo houve senhores ...</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","      <td>Nunca em parte alguma do mundo houve senhores ...</td>\n","      <td>33</td>\n","    </tr>\n","    <tr>\n","      <th>6372</th>\n","      <td>202055</td>\n","      <td>7</td>\n","      <td>ordem</td>\n","      <td>NOUN</td>\n","      <td>0</td>\n","      <td>N/A</td>\n","      <td>N/A</td>\n","      <td>[tensor(0.7101), tensor(-0.8725), tensor(-0.26...</td>\n","      <td>O sábio curandeiro, chamado imediatamente por ...</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","      <td>O sábio curandeiro , chamado imediatamente por...</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>3537</th>\n","      <td>202390</td>\n","      <td>13</td>\n","      <td>as</td>\n","      <td>DET</td>\n","      <td>0</td>\n","      <td>N/A</td>\n","      <td>N/A</td>\n","      <td>[tensor(-0.7243), tensor(0.5087), tensor(-0.57...</td>\n","      <td>O Hércules dominou o negro malvado, que todavi...</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","      <td>O Hércules dominou o negro malvado , que todav...</td>\n","      <td>31</td>\n","    </tr>\n","    <tr>\n","      <th>3422</th>\n","      <td>202892</td>\n","      <td>5</td>\n","      <td>baile</td>\n","      <td>NOUN</td>\n","      <td>0</td>\n","      <td>N/A</td>\n","      <td>N/A</td>\n","      <td>[tensor(1.0756), tensor(-0.2495), tensor(0.150...</td>\n","      <td>– Minha senhora aturdiu-se no baile, não soube...</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","      <td>– Minha senhora aturdiu-se no baile , não soub...</td>\n","      <td>20</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-41c5744d-6d3d-4d39-857d-8b9e40715209')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-41c5744d-6d3d-4d39-857d-8b9e40715209 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-41c5744d-6d3d-4d39-857d-8b9e40715209');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":115}]},{"cell_type":"markdown","source":["# Criar estrutura arquivos visualização"],"metadata":{"id":"WnvIGh38eeTV"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":49,"referenced_widgets":["0c6f0922ec6b4472b0c9d18452e6dd91","64dbe27f91e1412a87fcfce6c5bb762e","1eb52070081e45898d43b318f2cfcd7a","c13695605ae74960bff70c85d3e7f84d","f6380f9ec56c4d1880806ee410df7646","b88d1e4bd625412499dead40fe4bc1b2","bc1e65576a3c48e383cdffb866ab338a","bf212143af334baa8d647975ba9c3825","ea3eb5b067c24f7fb6743be1e7035d4e","d4918c4aba624219a7252db747c5a8f5","97c41bac949c4e7985451abfeed2e2a5"]},"executionInfo":{"elapsed":780397,"status":"ok","timestamp":1669134911459,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"maBbfHFj1VfN","outputId":"18d78778-19b4-4c8f-bc3e-cda967a87a03"},"outputs":[{"output_type":"display_data","data":{"text/plain":["Documentos:   0%|          | 0/6659 [00:00<?, ? documento/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"0c6f0922ec6b4472b0c9d18452e6dd91"}},"metadata":{}}],"source":["# Import das bibliotecas.\n","from tqdm.notebook import tqdm as tqdm_notebook\n","\n","\n","list_intances = []\n","\n","\n","documentos = lista_documentos_filtrados_emb_dataframe\n","\n","# Barra de progresso dos documentos\n","documentos_bar = tqdm_notebook(documentos.iterrows(), desc=f\"Documentos\", unit=f\" documento\", total=len(documentos))  \n","\n","# Percorre os documentos\n","for index, palavra in documentos_bar:\n","   \n","\n","    w1_id_documento         = palavra['id_documento']\n","    w1_posicaoToken         = palavra['posicaoToken']\n","    w1_token                = palavra['token']\n","    w1_posTag               = palavra['posTag']\n","    w1_OOV                  = palavra['OOV']\n","    w1_grupo                = palavra['grupo']\n","    w1_palavra_alvo         = palavra['palavra_alvo']\n","    w1_embeddings           = palavra['embeddings']\n","    w1_sentenca             = palavra['sentenca']\n","    w1_obra                 = palavra['obra']\n","    w1_autor                = palavra['autor']\n","    w1_ano                  = palavra['ano']\n","    w1_idObra               = palavra['idObra']\n","    w1_movimento            = palavra['movimento']\n","    w1_document             = palavra['document']\n","    w1_tamanho_sentenca     = palavra['tamanho_sentenca']\n","\n","\n","    if w1_grupo != 'N/A':\n","        for index2, palavra2 in documentos.iterrows():\n","\n","            w2_id_documento         = palavra2['id_documento']\n","            w2_posicaoToken         = palavra2['posicaoToken']\n","            w2_token                = palavra2['token']\n","            w2_posTag               = palavra2['posTag']\n","            w2_OOV                  = palavra2['OOV']\n","            w2_grupo                = palavra2['grupo']\n","            w2_palavra_alvo         = palavra2['palavra_alvo']\n","            w2_embeddings           = palavra2['embeddings']\n","            w2_sentenca             = palavra2['sentenca']\n","            w2_obra                 = palavra2['obra']\n","            w2_autor                = palavra2['autor']\n","            w2_ano                  = palavra2['ano']\n","            w2_idObra               = palavra2['idObra']\n","            w2_movimento            = palavra2['movimento']\n","            w2_document             = palavra2['document']\n","            w2_tamanho_sentenca     = palavra2['tamanho_sentenca']\n","\n","\n","            if w2_id_documento == w1_id_documento and w2_token == w1_token and w2_posicaoToken == w1_posicaoToken:\n","                continue\n","\n","            cos_mean = 1  \n","            euc_mean = 0\n","            man_mean = 0\n","\n","            cos_mean, euc_mean, man_mean = getMedidasEmbedding(w1_embeddings,w2_embeddings)\n","\n","            list_intances.append([\n","                w1_id_documento,\n","                w1_posicaoToken,\n","                w1_token,\n","                w1_posTag,\n","                w1_OOV,\n","                w1_grupo,\n","                w1_palavra_alvo,\n","                w1_sentenca,\n","                w1_obra,\n","                w1_autor,\n","                w1_ano,\n","                w1_idObra,\n","                w1_movimento,\n","                w1_document,\n","                w1_tamanho_sentenca,\n","                w2_id_documento,\n","                w2_posicaoToken,\n","                w2_token,\n","                w2_posTag,\n","                w2_OOV,\n","                w2_grupo,\n","                w2_palavra_alvo,\n","                w2_sentenca,\n","                w2_obra,\n","                w2_autor,\n","                w2_ano,\n","                w2_idObra,\n","                w2_movimento,\n","                w2_document,\n","                w2_tamanho_sentenca,\n","                cos_mean,                                          # valor de similaridade pelo cosseno\n","                euc_mean,                                          # valor da distencia euclidiana \n","                man_mean                                           # valor da distancia manhattan\n","            ])\n","\n","\n","\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"za-9WAYO1VfQ"},"source":["### 5.2.3 Gera os arquivos para o Embedding Projector"]},{"cell_type":"code","source":["columnsDataframe = [  \n","'w1_id_documento',\n","'w1_posicaoToken',\n","'w1_token',\n","'w1_posTag',\n","'w1_OOV',\n","'w1_grupo',\n","'w1_palavra_alvo',\n","'w1_sentenca',\n","'w1_obra',\n","'w1_autor',\n","'w1_ano',\n","'w1_idObra',\n","'w1_movimento',\n","'w1_document',\n","'w1_tamanho_sentenca',\n","'w2_id_documento',\n","'w2_posicaoToken',\n","'w2_token',\n","'w2_posTag',\n","'w2_OOV',\n","'w2_grupo',\n","'w2_palavra_alvo',\n","'w2_sentenca',\n","'w2_obra',\n","'w2_autor',\n","'w2_ano',\n","'w2_idObra',\n","'w2_movimento',\n","'w2_document',\n","'w2_tamanho_sentenca',\n","'cos_mean',\n","'euc_mean',\n","'man_mean',\n","]    "],"metadata":{"id":"WrwFjtkpgKcR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["list_intances_df = pd.DataFrame(list_intances, columns=columnsDataframe)"],"metadata":{"id":"W4NahM7xgaxE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["del list_intances"],"metadata":{"id":"g9snFh95gdr8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["len(list_intances_df)"],"metadata":{"id":"xWd4qZXFgepi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1669135218003,"user_tz":180,"elapsed":42,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"51ba17d5-0035-42d2-b921-a62d840f376b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2596620"]},"metadata":{},"execution_count":120}]},{"cell_type":"code","source":["list_intances_df.sample() "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":243},"id":"UI7X80_2gfmO","executionInfo":{"status":"ok","timestamp":1669135218004,"user_tz":180,"elapsed":35,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"e0c97cf8-19dd-494b-8291-236676a27ba4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        w1_id_documento  w1_posicaoToken w1_token w1_posTag  w1_OOV w1_grupo  \\\n","793183           201486               24  senhora      NOUN       0   senhor   \n","\n","       w1_palavra_alvo                                        w1_sentenca  \\\n","793183         senhora  Esméria contava desde muitos dias com o nefand...   \n","\n","                   w1_obra                  w1_autor  ...             w2_obra  \\\n","793183  As Vítimas-Algozes  Joaquim Manuel de Macedo  ...  As Vítimas-Algozes   \n","\n","                        w2_autor w2_ano w2_idObra  w2_movimento  \\\n","793183  Joaquim Manuel de Macedo   1869         2    Romantismo   \n","\n","                                              w2_document  \\\n","793183  Quando as senhoras voltaram à sala , trazendo ...   \n","\n","        w2_tamanho_sentenca  cos_mean   euc_mean    man_mean  \n","793183                   46  0.337658  24.300497  610.160706  \n","\n","[1 rows x 33 columns]"],"text/html":["\n","  <div id=\"df-83272d3f-674a-4336-96a2-d11e18bfdfc4\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>w1_id_documento</th>\n","      <th>w1_posicaoToken</th>\n","      <th>w1_token</th>\n","      <th>w1_posTag</th>\n","      <th>w1_OOV</th>\n","      <th>w1_grupo</th>\n","      <th>w1_palavra_alvo</th>\n","      <th>w1_sentenca</th>\n","      <th>w1_obra</th>\n","      <th>w1_autor</th>\n","      <th>...</th>\n","      <th>w2_obra</th>\n","      <th>w2_autor</th>\n","      <th>w2_ano</th>\n","      <th>w2_idObra</th>\n","      <th>w2_movimento</th>\n","      <th>w2_document</th>\n","      <th>w2_tamanho_sentenca</th>\n","      <th>cos_mean</th>\n","      <th>euc_mean</th>\n","      <th>man_mean</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>793183</th>\n","      <td>201486</td>\n","      <td>24</td>\n","      <td>senhora</td>\n","      <td>NOUN</td>\n","      <td>0</td>\n","      <td>senhor</td>\n","      <td>senhora</td>\n","      <td>Esméria contava desde muitos dias com o nefand...</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>...</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","      <td>Quando as senhoras voltaram à sala , trazendo ...</td>\n","      <td>46</td>\n","      <td>0.337658</td>\n","      <td>24.300497</td>\n","      <td>610.160706</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1 rows × 33 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-83272d3f-674a-4336-96a2-d11e18bfdfc4')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-83272d3f-674a-4336-96a2-d11e18bfdfc4 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-83272d3f-674a-4336-96a2-d11e18bfdfc4');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":121}]},{"cell_type":"markdown","metadata":{"id":"-hfUpvKqXoqe"},"source":["#### Corrigir o tipo de dados da coluna\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GecavbpXN5lJ"},"outputs":[],"source":["# Nome do arquivo original\n","NOME_ARQUIVO_PARES_INSTANCIAS = \"pares_medidas_entre_palavras_vitimas_algoz.csv\"\n","# NOME_ARQUIVO_PARES_INSTANCIAS = \"pares_medidas_entre_palavras_\"+str(len(lista_documentos_filtrados_emb))+\".csv\"\n","\n","NOME_ARQUIVO_PARES_INSTANCIAS_COMPACTADO = \"pares_medidas_entre_palavras_vitimas_algoz.zip\"\n","# NOME_ARQUIVO_PARES_INSTANCIAS_COMPACTADO = \"pares_medidas_entre_palavras_\"+str(len(lista_documentos_filtrados_emb))+\".zip\"\n","\n","\n","nome_arquivo_FILTRADO = DIRETORIO_LOCAL + NOME_ARQUIVO_PARES_INSTANCIAS\n","\n","# Salva o arquivo original filtrado\n","list_intances_df.to_csv(nome_arquivo_FILTRADO,  sep=\";\", index=False)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"t8-eWGcqN5lJ"},"outputs":[],"source":["!zip -o -j -q \"$DIRETORIO_LOCAL$NOME_ARQUIVO_PARES_INSTANCIAS_COMPACTADO\" \"$DIRETORIO_LOCAL$NOME_ARQUIVO_PARES_INSTANCIAS\""]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VNK720oLN5lJ","executionInfo":{"status":"ok","timestamp":1669135387736,"user_tz":180,"elapsed":430,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"a5192295-257b-4540-bf76-f54ecd5ab9ef"},"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:root:Terminei a cópia do arquivo.\n"]}],"source":["# Se estiver executando no Google Colaboratory\n","if IN_COLAB:\n","   \n","    # Copia o arquivo das comparações para o google drive\n","    !cp \"$DIRETORIO_LOCAL$NOME_ARQUIVO_PARES_INSTANCIAS_COMPACTADO\" \"$DIRETORIO_DRIVE\"\n","    \n","    logging.info(\"Terminei a cópia do arquivo.\")"]},{"cell_type":"markdown","metadata":{"id":"7YKlCCRH0ZfC"},"source":["Transforma a lista em um dataframe"]},{"cell_type":"code","source":["del list_intances_df"],"metadata":{"id":"yBOy6rjZTrN6"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TkncKDN1i7kq"},"source":["### 3.3.3 Carrega os dados\n","\n","Carrega os dados das documentos a partir do arquivo."]},{"cell_type":"markdown","metadata":{"id":"8FRocbK4_wTk"},"source":["### 5.2.1 Cria o diretório para os arquivos"]},{"cell_type":"markdown","metadata":{"id":"R9zqngHokA0-"},"source":["Gera o sufixo do nome do arquivo"]}],"metadata":{"colab":{"collapsed_sections":["EKOTlwcmxmej","PKUr9Vk4BNLC","GOcN8hK-scnt","iAPVtRXQqDim","_GjYtXcMnSAe","RinFHFesVKis","Pqa-7WXBAw8q","SUxlx7Sx4yxj","L7G3-MOsQ1N_","35GwcgkOlWi3","PWd_9X0nOYnF","Uu_LkF7Nfm8_","XAc1tSwvOc4d","STHT2c89qvwK","3iFBoyWMOgKz","cAk5hHx7OnHn","fzk8VOp7oy8n","AEzytjZi5Iw2","onM1ZApom-_W","6ZVwbmn3Nx2t","Jxe-mh-l6sJY","m4KV_jI-Nx2w","bGaf7bkpAEiX","ZB6bR42PA28c","B4Soqt3fp3Lu","ENvsIER06sJX","b01WgMSSKY_u","TouR4GjNJZD6","_xaeX0oTVQ5t","A7NAe8ogCf1y","MBGTMy8Ic7GK","uiuxdXe9t1BX","rHt4e5pAcEMd","V74WUpHqcfoI","eaneOhAKcO-3","6tKcaIfReqdy","e8n7Z5s-QZF8","GYRV9KfHQE6v","-pZZrUKRhR3e","-uFDhRTZe2Js","x5NTxBRKfAcT","d7KprWqyZBQZ","lCJzsw8T0I-5","s42mgtmSZ8MR","q7nx_eZ8hSlr","Y8MjE0utzlZT","zFd1rse11DpZ","3wvgXwN81RCz","kGL37G6XFcwp","THFhXGGmIO_r","1Ko_of60YuNd","L_vknrk7YSpF","Usr1uRzQeJSb"],"provenance":[{"file_id":"1q3JTcgbWA46Zih94jwddt39KFLhyntww","timestamp":1663731761602},{"file_id":"1MGqfSbWIJImPFuCcPnfbG9-XJNkYsAoP","timestamp":1663257809933},{"file_id":"1fa1ZrVSmNY6tEau6KIW0M3PxcITiS9cs","timestamp":1663065419767},{"file_id":"1ZQvuAVwA3IjybezQOXnrXMGAnMyZRuPU","timestamp":1585340447636},{"file_id":"1FsBCkREOaDopLF3PIYUuQxLR8wRfjQY1","timestamp":1559844903389},{"file_id":"1f_snPs--PVYgZJwT3GwjxqVALFJ0T2-y","timestamp":1554843110227}],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"},"widgets":{"application/vnd.jupyter.widget-state+json":{"2b17e846d3ee4fffb8204ff6beeb6ec8":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_d8975828f9534691b625e79700dcea59","IPY_MODEL_c2bb5bced52b4da9894a2639e28f0d4a","IPY_MODEL_c140e26bbc194419a505c1137b881536"],"layout":"IPY_MODEL_1d0061553ced48f9b84ada0f85529316"}},"d8975828f9534691b625e79700dcea59":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_717f2cb4973b4050927be4b4285b16d6","placeholder":"​","style":"IPY_MODEL_1199a1900c0b431499226b9122dca93e","value":"100%"}},"c2bb5bced52b4da9894a2639e28f0d4a":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_b31ba9881555432cb29738fcfbc0e240","max":577393393,"min":0,"orientation":"horizontal","style":"IPY_MODEL_759a3098e04048fda232afb5bfe6cb27","value":577393393}},"c140e26bbc194419a505c1137b881536":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_078ff7874007406184f00615dad8f5ae","placeholder":"​","style":"IPY_MODEL_15c658415c4d4a8487dcb2ed74b02a6f","value":" 577M/577M [00:17&lt;00:00, 24.1MB/s]"}},"1d0061553ced48f9b84ada0f85529316":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"717f2cb4973b4050927be4b4285b16d6":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1199a1900c0b431499226b9122dca93e":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"b31ba9881555432cb29738fcfbc0e240":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"759a3098e04048fda232afb5bfe6cb27":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"078ff7874007406184f00615dad8f5ae":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"15c658415c4d4a8487dcb2ed74b02a6f":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"7aa33cbd096e4c80abc8fd16dc4fcb38":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_fbf64941236e44fba67bb80b12b8312a","IPY_MODEL_398faa3e866b4b199f67e6e29423ce6e","IPY_MODEL_9135ce00af2c4b0bb81951f1d3dbac70"],"layout":"IPY_MODEL_ef6df07b1db34a5792706eb323440cf1"}},"fbf64941236e44fba67bb80b12b8312a":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_0227e15041a94f84a4157ffdf39d1ce0","placeholder":"​","style":"IPY_MODEL_8b36341fd519415c933519f900a1a9bd","value":"Downloading: 100%"}},"398faa3e866b4b199f67e6e29423ce6e":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_e17a6a9f9dc3455a9e49bebcafa5d8bf","max":648,"min":0,"orientation":"horizontal","style":"IPY_MODEL_57622515b183474c9e153d8646c97f19","value":648}},"9135ce00af2c4b0bb81951f1d3dbac70":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_8da482a5a3d74f0bb581e43ca0093049","placeholder":"​","style":"IPY_MODEL_08cb2357359a4c15835bde3e4b12aab2","value":" 648/648 [00:00&lt;00:00, 17.9kB/s]"}},"ef6df07b1db34a5792706eb323440cf1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0227e15041a94f84a4157ffdf39d1ce0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8b36341fd519415c933519f900a1a9bd":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"e17a6a9f9dc3455a9e49bebcafa5d8bf":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"57622515b183474c9e153d8646c97f19":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"8da482a5a3d74f0bb581e43ca0093049":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"08cb2357359a4c15835bde3e4b12aab2":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"72849c95ee044651b6d4766cb31e498c":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_b8e0b710acc848ed95e1137d550d3656","IPY_MODEL_0deddbcde3284334abbc6b235f30fe7e","IPY_MODEL_3f2971d2cb844a358acba98e296d8aca"],"layout":"IPY_MODEL_61245954483a4266b76e3af50d23be18"}},"b8e0b710acc848ed95e1137d550d3656":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_602055f5ed124b9380ffe81ced2078b2","placeholder":"​","style":"IPY_MODEL_86acbef222964dd587bf87af09afb73a","value":"Downloading: 100%"}},"0deddbcde3284334abbc6b235f30fe7e":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_832536b39be14073add22d78c649b203","max":1342014951,"min":0,"orientation":"horizontal","style":"IPY_MODEL_564498dd006d4a0faf2a1a9e5161591f","value":1342014951}},"3f2971d2cb844a358acba98e296d8aca":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_82766f4e518f49a282f76f33b7e19890","placeholder":"​","style":"IPY_MODEL_af301d2c6d3547e3a734bccb7f683c95","value":" 1.34G/1.34G [00:34&lt;00:00, 48.2MB/s]"}},"61245954483a4266b76e3af50d23be18":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"602055f5ed124b9380ffe81ced2078b2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"86acbef222964dd587bf87af09afb73a":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"832536b39be14073add22d78c649b203":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"564498dd006d4a0faf2a1a9e5161591f":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"82766f4e518f49a282f76f33b7e19890":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"af301d2c6d3547e3a734bccb7f683c95":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"7e21fbc970164df8a8c2fceb0ef48131":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_2606785f448541898b83afe2bc11ad35","IPY_MODEL_e480507bb0664995a8d3a19b4a76b0bf","IPY_MODEL_fad4af5fa3b64d7ab002d00bf2ad43f8"],"layout":"IPY_MODEL_ff149fe978814ffcbab68056519a3166"}},"2606785f448541898b83afe2bc11ad35":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_b313b796ef3d471ab25eddd9ef2be53e","placeholder":"​","style":"IPY_MODEL_b2e6e946c9f5421cbe5d00a396d55ac3","value":"Downloading: 100%"}},"e480507bb0664995a8d3a19b4a76b0bf":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_e7c20f0f3b914aca8a49449600ce8d08","max":209528,"min":0,"orientation":"horizontal","style":"IPY_MODEL_630f9731859049bf9d651e52b942bbe4","value":209528}},"fad4af5fa3b64d7ab002d00bf2ad43f8":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_9128ad958ad14f60823f90a54b795c36","placeholder":"​","style":"IPY_MODEL_d4609acc3be7406d8252a3c95f4473e2","value":" 210k/210k [00:00&lt;00:00, 2.28MB/s]"}},"ff149fe978814ffcbab68056519a3166":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b313b796ef3d471ab25eddd9ef2be53e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b2e6e946c9f5421cbe5d00a396d55ac3":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"e7c20f0f3b914aca8a49449600ce8d08":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"630f9731859049bf9d651e52b942bbe4":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"9128ad958ad14f60823f90a54b795c36":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d4609acc3be7406d8252a3c95f4473e2":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"de9b0a46cb994c8395217a27c9b1cd73":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_6746b08605564b86b465606139a8de8b","IPY_MODEL_c50f4124f867455484a7dd7aa2a3ee33","IPY_MODEL_4c209020923d4d458417d9d0c47888d9"],"layout":"IPY_MODEL_cd74b6c8b5c5459180f04a540e23f4fe"}},"6746b08605564b86b465606139a8de8b":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_0faf0dfa9a614ffc8bfb750ff3886410","placeholder":"​","style":"IPY_MODEL_f9cc11cab95649cc878ece1caaa9ff50","value":"Downloading: 100%"}},"c50f4124f867455484a7dd7aa2a3ee33":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_a4c03c41ad5248f1b7773d60512355e5","max":2,"min":0,"orientation":"horizontal","style":"IPY_MODEL_32b666245a884d81a24fefe94b8ffc2b","value":2}},"4c209020923d4d458417d9d0c47888d9":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_c06670a279e14270b1353995d1d36712","placeholder":"​","style":"IPY_MODEL_c4dbee8481f54e5eb668c50460e78bb4","value":" 2.00/2.00 [00:00&lt;00:00, 44.9B/s]"}},"cd74b6c8b5c5459180f04a540e23f4fe":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0faf0dfa9a614ffc8bfb750ff3886410":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f9cc11cab95649cc878ece1caaa9ff50":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"a4c03c41ad5248f1b7773d60512355e5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"32b666245a884d81a24fefe94b8ffc2b":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"c06670a279e14270b1353995d1d36712":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c4dbee8481f54e5eb668c50460e78bb4":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"d8d671cea390408889afc73841be070e":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_c79cde885c0b475aa5545e50ef81520f","IPY_MODEL_3d8bda2258db479aa431decd13c6aee1","IPY_MODEL_0a5ee1fd381c4bd3acfa0baf8acf6c37"],"layout":"IPY_MODEL_9ffb80f99b814ba98780d4a2d035a829"}},"c79cde885c0b475aa5545e50ef81520f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_bffee4b872684462bd55aff09b6a1cb9","placeholder":"​","style":"IPY_MODEL_66111787c73249719915cb8d83213207","value":"Downloading: 100%"}},"3d8bda2258db479aa431decd13c6aee1":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_53c103f27401422c842e0c87045afa24","max":112,"min":0,"orientation":"horizontal","style":"IPY_MODEL_c60122451d0a442f90e5272342c2b3b4","value":112}},"0a5ee1fd381c4bd3acfa0baf8acf6c37":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_f5b9747bbe92419e8b60d56621feb5c9","placeholder":"​","style":"IPY_MODEL_5f10149cd0134886a9ead9ab213958e5","value":" 112/112 [00:00&lt;00:00, 2.96kB/s]"}},"9ffb80f99b814ba98780d4a2d035a829":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"bffee4b872684462bd55aff09b6a1cb9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"66111787c73249719915cb8d83213207":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"53c103f27401422c842e0c87045afa24":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c60122451d0a442f90e5272342c2b3b4":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"f5b9747bbe92419e8b60d56621feb5c9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5f10149cd0134886a9ead9ab213958e5":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"d4d793408e6f47f4941807b8153de728":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_24fa33f45d37459f9206b98ae6d41f38","IPY_MODEL_5233cb77f9554df9a1b42c1e19ee2b81","IPY_MODEL_e3aba45623e242209c344538f782aab4"],"layout":"IPY_MODEL_6cf3d9d84e554721a814c91de24e5499"}},"24fa33f45d37459f9206b98ae6d41f38":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_ccf8dc74f9bf440495e1024cdf735ec9","placeholder":"​","style":"IPY_MODEL_f895bb2c60b24eb08b8f4034aebce88b","value":"Downloading: 100%"}},"5233cb77f9554df9a1b42c1e19ee2b81":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_0f9738c828974a538617c6b21e1cb2f0","max":155,"min":0,"orientation":"horizontal","style":"IPY_MODEL_f618751679d34d3e91542d25be259c61","value":155}},"e3aba45623e242209c344538f782aab4":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_c1bbc315d34c4bc98daa920072867c5d","placeholder":"​","style":"IPY_MODEL_9e376fb3f394432aa70e4cbfe3b6a242","value":" 155/155 [00:00&lt;00:00, 3.42kB/s]"}},"6cf3d9d84e554721a814c91de24e5499":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ccf8dc74f9bf440495e1024cdf735ec9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f895bb2c60b24eb08b8f4034aebce88b":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"0f9738c828974a538617c6b21e1cb2f0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f618751679d34d3e91542d25be259c61":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"c1bbc315d34c4bc98daa920072867c5d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9e376fb3f394432aa70e4cbfe3b6a242":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ae555655f26a41fe9543c455d584836e":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_a36be9c5ce574acc85f44527dcc2faf2","IPY_MODEL_d606cabf014546cab7ff4693024eb0a7","IPY_MODEL_b043acb4a6f049e88828162b96876582"],"layout":"IPY_MODEL_cf6afa01b7fc441b81392790f8611c81"}},"a36be9c5ce574acc85f44527dcc2faf2":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_b144208b7bb54347af135ff8947db850","placeholder":"​","style":"IPY_MODEL_7ff69ca59c094ce38d4ff9d945237ebe","value":"Documentos: 100%"}},"d606cabf014546cab7ff4693024eb0a7":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_dccf476240394ab6800299333fde9c33","max":300,"min":0,"orientation":"horizontal","style":"IPY_MODEL_552192f348a847328457fdc22e6c0910","value":300}},"b043acb4a6f049e88828162b96876582":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_bb1bf7e5032a4367a4f76a7d1486959c","placeholder":"​","style":"IPY_MODEL_9af0ebf24dbd4f45b0930862aa63da37","value":" 300/300 [03:03&lt;00:00,  1.94 documento/s]"}},"cf6afa01b7fc441b81392790f8611c81":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b144208b7bb54347af135ff8947db850":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"7ff69ca59c094ce38d4ff9d945237ebe":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"dccf476240394ab6800299333fde9c33":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"552192f348a847328457fdc22e6c0910":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"bb1bf7e5032a4367a4f76a7d1486959c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9af0ebf24dbd4f45b0930862aa63da37":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"0c6f0922ec6b4472b0c9d18452e6dd91":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_64dbe27f91e1412a87fcfce6c5bb762e","IPY_MODEL_1eb52070081e45898d43b318f2cfcd7a","IPY_MODEL_c13695605ae74960bff70c85d3e7f84d"],"layout":"IPY_MODEL_f6380f9ec56c4d1880806ee410df7646"}},"64dbe27f91e1412a87fcfce6c5bb762e":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_b88d1e4bd625412499dead40fe4bc1b2","placeholder":"​","style":"IPY_MODEL_bc1e65576a3c48e383cdffb866ab338a","value":"Documentos: 100%"}},"1eb52070081e45898d43b318f2cfcd7a":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_bf212143af334baa8d647975ba9c3825","max":6659,"min":0,"orientation":"horizontal","style":"IPY_MODEL_ea3eb5b067c24f7fb6743be1e7035d4e","value":6659}},"c13695605ae74960bff70c85d3e7f84d":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_d4918c4aba624219a7252db747c5a8f5","placeholder":"​","style":"IPY_MODEL_97c41bac949c4e7985451abfeed2e2a5","value":" 6659/6659 [13:00&lt;00:00,  6.11 documento/s]"}},"f6380f9ec56c4d1880806ee410df7646":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b88d1e4bd625412499dead40fe4bc1b2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"bc1e65576a3c48e383cdffb866ab338a":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"bf212143af334baa8d647975ba9c3825":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ea3eb5b067c24f7fb6743be1e7035d4e":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"d4918c4aba624219a7252db747c5a8f5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"97c41bac949c4e7985451abfeed2e2a5":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"nbformat":4,"nbformat_minor":0}