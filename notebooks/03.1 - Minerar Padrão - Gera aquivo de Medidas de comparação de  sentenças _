{"cells":[{"cell_type":"markdown","metadata":{"id":"EKOTlwcmxmej"},"source":["# Selecionando sentenças dos originais\n","\n","Realiza a seleção de sentenças que possuem as palavras chaves os arquivos:\n","\n","- `original.zip`\n","- `originalpos.zip`\n","\n","Gera o arquivo:\n","\n","- `original_filtrado.zip`"]},{"cell_type":"markdown","metadata":{"id":"OP33KWAtBMWs"},"source":["# 1 Preparação do ambiente\n","\n","Preparação do ambiente para execução do script."]},{"cell_type":"markdown","metadata":{"id":"PKUr9Vk4BNLC"},"source":["## 1.1 Tempo inicial de processamento"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JXclHCRQBSF2"},"outputs":[],"source":["# Import das bibliotecas.\n","import time\n","import datetime\n","\n","# Marca o tempo de início do processamento\n","inicio_processamento = time.time()"]},{"cell_type":"markdown","metadata":{"id":"GOcN8hK-scnt"},"source":["## 1.2 Funções e classes auxiliares"]},{"cell_type":"markdown","metadata":{"id":"OPRnA-mk5-c4"},"source":["Verifica se existe o diretório cohebert no diretório corrente.   \n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Fj5TaAH_5-nB"},"outputs":[],"source":["# Import das bibliotecas.\n","import os # Biblioteca para manipular arquivos\n","\n","# ============================  \n","def verificaDiretorioCoheBERT():\n","    \"\"\"\n","      Verifica se existe o diretório cohebert no diretório corrente.    \n","    \"\"\"\n","    \n","    # Verifica se o diretório existe\n","    if not os.path.exists(DIRETORIO_COHEBERT):  \n","        # Cria o diretório\n","        os.makedirs(DIRETORIO_COHEBERT)\n","        logging.info(\"Diretório Cohebert criado: {}\".format(DIRETORIO_COHEBERT))\n","    \n","    return DIRETORIO_COHEBERT"]},{"cell_type":"markdown","metadata":{"id":"yDCOeh2y5jOH"},"source":["Realiza o download e um arquivo"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5B1mvfAU5jZf"},"outputs":[],"source":["# Import das bibliotecas.\n","import requests # Biblioteca de download\n","from tqdm.notebook import tqdm as tqdm_notebook # Biblioteca para barra de progresso\n","import os # Biblioteca para manipular arquivos\n","\n","def downloadArquivo(url_arquivo, nome_arquivo_destino):\n","    \"\"\"    \n","      Realiza o download de um arquivo de uma url em salva em nome_arquivo_destino.\n","    \n","      Parâmetros:\n","        `url_arquivo` - URL do arquivo a ser feito download.      \n","        `nome_arquivo_destino` - Nome do arquivo a ser salvo.      \n","    \"\"\"\n","    \n","    # Verifica se existe o diretório base\n","    DIRETORIO_COHEBERT = verificaDiretorioCoheBERT()\n","    \n","    # Realiza o download de um arquivo em uma url\n","    data = requests.get(url_arquivo, stream=True)\n","    \n","    # Verifica se o arquivo existe\n","    if data.status_code != 200:\n","        logging.info(\"Exceção ao tentar realizar download {}. Response {}.\".format(url_arquivo, data.status_code))\n","        data.raise_for_status()\n","        return\n","\n","    # Recupera o nome do arquivo a ser realizado o download    \n","    nome_arquivo = nome_arquivo_destino.split(\"/\")[-1]  \n","\n","    # Define o nome e caminho do arquivo temporário    \n","    nome_arquivo_temporario = DIRETORIO_COHEBERT + \"/\" + nome_arquivo + \"_part\"\n","    \n","    logging.info(\"Download do arquivo: {}.\".format(nome_arquivo_destino))\n","    \n","    # Baixa o arquivo\n","    with open(nome_arquivo_temporario, \"wb\") as arquivo_binario:        \n","        tamanho_conteudo = data.headers.get(\"Content-Length\")        \n","        total = int(tamanho_conteudo) if tamanho_conteudo is not None else None\n","        # Barra de progresso de download\n","        progresso_bar = tqdm_notebook(unit=\"B\", total=total, unit_scale=True)                \n","        # Atualiza a barra de progresso\n","        for chunk in data.iter_content(chunk_size=1024):        \n","            if chunk:                \n","                progresso_bar.update(len(chunk))\n","                arquivo_binario.write(chunk)\n","    \n","    # Renomeia o arquivo temporário para o arquivo definitivo\n","    os.rename(nome_arquivo_temporario, nome_arquivo_destino)\n","    \n","    # Fecha a barra de progresso.\n","    progresso_bar.close()"]},{"cell_type":"markdown","metadata":{"id":"ksYnRk7zLGp0"},"source":["Remove tags de um documento"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6qwKjGvyLG4v"},"outputs":[],"source":["def remove_tags(documento):\n","    \"\"\"\n","      Remove tags de um documento\n","    \"\"\"\n","    \n","    import re\n","\n","    documento_limpo = re.compile(\"<.*?>\")\n","    return re.sub(documento_limpo, \"\", documento)"]},{"cell_type":"markdown","metadata":{"id":"4pduTsINLeaz"},"source":["Funções auxiliares de arquivos"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jirIzIstLea0"},"outputs":[],"source":["def carregar(nome_arquivo, encoding=\"Windows-1252\"):\n","    \"\"\"\n","      Carrega um arquivo texto e retorna as linhas como um único parágrafo(texto).\n","    \n","      Parâmetros:\n","        `nome_arquivo` - Nome do arquivo a ser carregado.  \n","    \"\"\"\n","\n","    # Abre o arquivo\n","    arquivo = open(nome_arquivo, \"r\", encoding= encoding)\n","    \n","    paragrafo = \"\"\n","    for linha in arquivo:\n","        linha = linha.splitlines()\n","        linha = \" \".join(linha)\n","        # Remove as tags existentes no final das linhas\n","        linha = remove_tags(linha)\n","        if linha != \"\":\n","          paragrafo = paragrafo + linha.strip() + \" \"\n","    \n","    # Fecha o arquivo\n","    arquivo.close()\n","\n","    # Remove os espaços em branco antes e depois do parágrafo\n","    return paragrafo.strip()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EC9Xppq-_R0w"},"outputs":[],"source":["def carregarLista(nome_arquivo, encoding=\"Windows-1252\"):\n","    \"\"\"\n","      Carrega um arquivo texto e retorna as linhas como uma lista de sentenças(texto).\n","    \n","      Parâmetros:\n","        `nome_arquivo` - Nome do arquivo a ser carregado.   \n","        `encoding` - Codificação dos caracteres do arquivo.\n","    \"\"\"\n","\n","    # Abre o arquivo\n","    arquivo = open(nome_arquivo, \"r\", encoding= encoding)\n","    \n","    sentencas = []\n","    for linha in arquivo:        \n","        linha = linha.splitlines()\n","        linha = \" \".join(linha)\n","        linha = remove_tags(linha)\n","        if linha != \"\":\n","          sentencas.append(linha.strip())\n","    \n","    # Fecha o arquivo\n","    arquivo.close()\n","\n","    return sentencas "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fkVk5LQT_G3f"},"outputs":[],"source":["def salvar(nome_arquivo,texto):                       \n","    \"\"\"\n","      Salva um texto em arquivo.\n","     \n","      Parâmetros:\n","        `nome_arquivo` - Nome do arquivo a ser salvo.\n","        `texto` - Texto a ser salvo.     \n","    \"\"\"\n","\n","    arquivo = open(nome_arquivo, \"w\")\n","    arquivo.write(str(texto))\n","    arquivo.close()"]},{"cell_type":"markdown","metadata":{"id":"603LYIYKBmq5"},"source":["Função auxiliar para formatar o tempo como `hh: mm: ss`"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Guy6B4whsZFR"},"outputs":[],"source":["# Import das bibliotecas.\n","import time\n","import datetime\n","\n","def formataTempo(tempo):\n","    \"\"\"\n","      Pega a tempo em segundos e retorna uma string hh:mm:ss\n","    \"\"\"\n","    # Arredonda para o segundo mais próximo.\n","    tempo_arredondado = int(round((tempo)))\n","    \n","    # Formata como hh:mm:ss\n","    return str(datetime.timedelta(seconds=tempo_arredondado))    "]},{"cell_type":"markdown","metadata":{"id":"zVKAapz7RCxk"},"source":["Classe(ModelArguments) de definição dos parâmetros do modelo"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zgmN6RqDRDZS"},"outputs":[],"source":["# Import das bibliotecas.\n","from dataclasses import dataclass, field\n","from typing import Dict, Optional\n","from typing import List\n","\n","@dataclass\n","class ModeloArgumentosMedida:\n","    max_seq_len: Optional[int] = field(\n","        default=None,\n","        metadata={\"help\": \"max seq len\"},\n","    )    \n","    pretrained_model_name_or_path: str = field(\n","        default=\"neuralmind/bert-base-portuguese-cased\",\n","        metadata={\"help\": \"nome do modelo pré-treinado do BERT.\"},\n","    )\n","    modelo_spacy: str = field(\n","        default=\"pt_core_news_lg\",\n","        metadata={\"help\": \"nome do modelo do spaCy.\"},\n","    )\n","    versao_modelo_spacy: str = field(\n","        default=\"-3.2.0\",\n","        metadata={\"help\": \"versão do nome do modelo no spaCy.\"},\n","    )\n","    sentenciar_documento: bool = field(\n","        default=True,\n","        metadata={\"help\": \"Dividir o documento em sentenças(frases).\"},\n","    )\n","    do_lower_case: bool = field(\n","        default=False,\n","        metadata={\"help\": \"define se o texto do modelo deve ser todo em minúsculo.\"},\n","    )    \n","    output_attentions: bool = field(\n","        default=False,\n","        metadata={\"help\": \"habilita se o modelo retorna os pesos de atenção.\"},\n","    )\n","    output_hidden_states: bool = field(\n","        default=False,\n","        metadata={\"help\": \"habilita gerar as camadas ocultas do modelo.\"},\n","    )\n","    usar_mcl_ajustado : bool = field(\n","        default=False,\n","        metadata={\"help\": \"habilita o carragamento de mcl ajustado.\"},\n","    )"]},{"cell_type":"markdown","metadata":{"id":"rceIwWa7UmFZ"},"source":["Biblioteca de limpeza de tela\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PXTEvmuhUmjO"},"outputs":[],"source":["# Import das bibliotecas.\n","from IPython.display import clear_output"]},{"cell_type":"markdown","metadata":{"id":"iAPVtRXQqDim"},"source":["## 1.3 Tratamento de logs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DcopxbGZqDip"},"outputs":[],"source":["# Import das bibliotecas.\n","import logging # Biblioteca de logging\n","\n","# Formatando a mensagem de logging\n","logging.basicConfig(format=\"%(asctime)s : %(levelname)s : %(message)s\")\n","\n","logger = logging.getLogger()\n","logger.setLevel(logging.INFO)"]},{"cell_type":"markdown","metadata":{"id":"_GjYtXcMnSAe"},"source":["## 1.4 Identificando o ambiente Colab"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YMiH0E3OnRa1"},"outputs":[],"source":["# Import das bibliotecas.\n","import sys # Biblioteca para acessar módulos do sistema\n","\n","# Se estiver executando no Google Colaboratory\n","# Retorna true ou false se estiver no Google Colaboratory\n","IN_COLAB = \"google.colab\" in sys.modules"]},{"cell_type":"markdown","metadata":{"id":"RinFHFesVKis"},"source":["## 1.5 Colaboratory"]},{"cell_type":"markdown","metadata":{"id":"MPngEboiVbfi"},"source":["Usando Colab GPU para Treinamento\n"]},{"cell_type":"markdown","metadata":{"id":"EjWE6WlvVbfj"},"source":["Uma GPU pode ser adicionada acessando o menu e selecionando:\n","\n","`Edit -> Notebook Settings -> Hardware accelerator -> (GPU)`\n","\n","Em seguida, execute a célula a seguir para confirmar que a GPU foi detectada."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":95,"status":"ok","timestamp":1669032442988,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"vtaYZmc3Vbfj","outputId":"0e59f52f-e1e6-400f-f75d-7868a55546b6"},"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:root:Dispositivo GPU não encontrado\n"]}],"source":["# Import das bibliotecas.\n","import tensorflow as tf\n","\n","# Recupera o nome do dispositido da GPU.\n","device_name = tf.test.gpu_device_name()\n","\n","# O nome do dispositivo deve ser parecido com o seguinte:\n","if device_name == \"/device:GPU:0\":\n","    logging.info(\"Encontrei GPU em: {}\".format(device_name))\n","else:\n","    logging.info(\"Dispositivo GPU não encontrado\")\n","    #raise SystemError(\"Dispositivo GPU não encontrado\")"]},{"cell_type":"markdown","metadata":{"id":"iYRrUo2XWa8G"},"source":["Nome da GPU\n","\n","Para que a torch use a GPU, precisamos identificar e especificar a GPU como o dispositivo. Posteriormente, em nosso ciclo de treinamento, carregaremos dados no dispositivo.\n","\n","Vale a pena observar qual GPU você recebeu. A GPU Tesla P100 é muito mais rápido que as outras GPUs, abaixo uma lista ordenada:\n","- 1o Tesla P100\n","- 2o Tesla T4\n","- 3o Tesla P4 (Não tem memória para execução 4 x 8, somente 2 x 4)\n","- 4o Tesla K80 (Não tem memória para execução 4 x 8, somente 2 x 4)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zrjqDO6nWa8J"},"outputs":[],"source":["# Import das bibliotecas.\n","import torch # Biblioteca para manipular os tensores\n","\n","def getDeviceGPU():\n","    \"\"\"\n","    Retorna um dispositivo de GPU se disponível ou CPU.\n","    \n","    Retorno:\n","    `device` - Um device de GPU ou CPU.       \n","    \"\"\"\n","        \n","    # Se existe GPU disponível.\n","    if torch.cuda.is_available():\n","        \n","        # Diz ao PyTorch para usar GPU.    \n","        device = torch.device(\"cuda\")\n","        \n","        logging.info(\"Existem {} GPU(s) disponíveis.\".format(torch.cuda.device_count()))\n","        logging.info(\"Iremos usar a GPU: {}.\".format(torch.cuda.get_device_name(0)))\n","\n","    # Se não.\n","    else:        \n","        logging.info(\"Sem GPU disponível, usando CPU.\")\n","        device = torch.device(\"cpu\")\n","        \n","    return device"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":70,"status":"ok","timestamp":1669032442990,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"ChDxmtXsKwjf","outputId":"2f39c175-c3f5-44fd-8734-457078fe0af2"},"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:root:Sem GPU disponível, usando CPU.\n"]}],"source":["device = getDeviceGPU()"]},{"cell_type":"markdown","metadata":{"id":"kkdlEouHftcJ"},"source":["Conecta o modelo ao device"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a-znVDGyfsVx"},"outputs":[],"source":["# Import das bibliotecas.\n","import torch # Biblioteca para manipular os tensores\n","\n","def conectaGPU(model, device):\n","    \"\"\"\n","      Conecta um modelo BERT a GPU.\n","\n","      Parâmetros:\n","        `model` - Um modelo BERT carregado.       \n","        `device` - Um device de GPU.     \n","    \n","      Retorno:\n","        `model` - Um objeto model BERT conectado a GPU.     \n","    \"\"\"\n","    # Associa a GPU ao modelo.\n","    model.to(device)\n","\n","    # Se existe GPU disponível.\n","    if torch.cuda.is_available():    \n","        # Diga ao pytorch para rodar este modelo na GPU.\n","        logging.info(\"Pytorch rodando o modelo na GPU.\")\n","        model.cuda()\n","        \n","    else:\n","        logging.info(\"Pytorch rodando sem GPU.\")\n","\n","    return model"]},{"cell_type":"markdown","metadata":{"id":"fGf59D0yVNx9"},"source":["Memória\n","\n","Memória disponível no ambiente"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":56,"status":"ok","timestamp":1669032442992,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"1iC5-pSAVh7_","outputId":"b56317a3-3fed-4eea-c78c-642c31b57a81"},"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:root:Seu ambiente de execução tem  13.6 gigabytes de RAM disponível\n","\n","INFO:root:Para habilitar um tempo de execução de RAM alta, selecione menu o ambiente de execução> \"Alterar tipo de tempo de execução\"\n","INFO:root:e selecione High-RAM. Então, execute novamente está célula\n"]}],"source":["# Importando as bibliotecas.\n","from psutil import virtual_memory\n","\n","ram_gb = virtual_memory().total / 1e9\n","logging.info(\"Seu ambiente de execução tem {: .1f} gigabytes de RAM disponível\\n\".format(ram_gb))\n","\n","if ram_gb < 20:\n","  logging.info(\"Para habilitar um tempo de execução de RAM alta, selecione menu o ambiente de execução> \\\"Alterar tipo de tempo de execução\\\"\")\n","  logging.info(\"e selecione High-RAM. Então, execute novamente está célula\")\n","else:\n","  logging.info(\"Você está usando um ambiente de execução de memória RAM alta!\")"]},{"cell_type":"markdown","metadata":{"id":"wijMXooQQLcQ"},"source":["## 1.6 Monta uma pasta no google drive para carregar os arquivos de dados."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4713,"status":"ok","timestamp":1669032447666,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"ysnDDapMQK8K","outputId":"e45098d3-6429-4bb7-c3a1-8ab9f46906d2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["#@title\n","# import necessário\n","from google.colab import drive\n","\n","# Monta o drive na pasta especificada\n","drive.mount(\"/content/drive\")     "]},{"cell_type":"markdown","metadata":{"id":"Pqa-7WXBAw8q"},"source":["## 1.9 Instalação do BERT da Hugging Face"]},{"cell_type":"markdown","metadata":{"id":"eCdqJCtQN52l"},"source":["Instala a interface pytorch para o BERT by Hugging Face. "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3425,"status":"ok","timestamp":1669032451052,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"1RfUN_KolV-f","outputId":"164f4428-31a9-4a84-e9f4-0d92554cf466"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: transformers==4.5.1 in /usr/local/lib/python3.7/dist-packages (4.5.1)\n","Requirement already satisfied: tokenizers<0.11,>=0.10.1 in /usr/local/lib/python3.7/dist-packages (from transformers==4.5.1) (0.10.3)\n","Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from transformers==4.5.1) (4.13.0)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.7/dist-packages (from transformers==4.5.1) (2022.6.2)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from transformers==4.5.1) (2.23.0)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.7/dist-packages (from transformers==4.5.1) (4.64.1)\n","Requirement already satisfied: sacremoses in /usr/local/lib/python3.7/dist-packages (from transformers==4.5.1) (0.0.53)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from transformers==4.5.1) (1.21.6)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from transformers==4.5.1) (3.8.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from transformers==4.5.1) (21.3)\n","Requirement already satisfied: typing-extensions>=3.6.4 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->transformers==4.5.1) (4.1.1)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->transformers==4.5.1) (3.10.0)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->transformers==4.5.1) (3.0.9)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->transformers==4.5.1) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->transformers==4.5.1) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->transformers==4.5.1) (2022.9.24)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->transformers==4.5.1) (1.24.3)\n","Requirement already satisfied: click in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers==4.5.1) (7.1.2)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers==4.5.1) (1.2.0)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers==4.5.1) (1.15.0)\n"]}],"source":["!pip install -U transformers==4.5.1"]},{"cell_type":"markdown","metadata":{"id":"8bGda5JgMtQe"},"source":["# 2 Parametrização"]},{"cell_type":"markdown","metadata":{"id":"ifrYNTwGwKal"},"source":["## Gerais"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5uiH9pNpwI6g"},"outputs":[],"source":["# Definição dos parâmetros a serem avaliados\n","\n","#Realiza o pooling dos tokens de palavras fora do vocabulário do BERT\n","POOLING_TOKENS = 1 # 1 - Sem pooling / 1 - Com pooling \n","\n","#Estratégia de recuperação dos embeddings: (1 - Embeddings da última camada, \n","#                                           2 - Embeddings da concatenação das 4 últimas camadas)\n","ESTRATEGIA_EMBEDDING = 1"]},{"cell_type":"markdown","metadata":{"id":"mhByVujAwNAU"},"source":["## Específicos"]},{"cell_type":"markdown","metadata":{"id":"FhMuEM1o1Aq3"},"source":["Parâmetros do modelo"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oJ15-ylRRRdD"},"outputs":[],"source":["# Definição dos parâmetros do Modelo.\n","model_args = ModeloArgumentosMedida(     \n","    max_seq_len = 512,\n","    #pretrained_model_name_or_path = \"https://neuralmind-ai.s3.us-east-2.amazonaws.com/nlp/bert-large-portuguese-cased/bert-large-portuguese-cased_pytorch_checkpoint.zip\",\n","    #pretrained_model_name_or_path = \"https://neuralmind-ai.s3.us-east-2.amazonaws.com/nlp/bert-base-portuguese-cased/bert-base-portuguese-cased_pytorch_checkpoint.zip\",\n","    pretrained_model_name_or_path = \"neuralmind/bert-large-portuguese-cased\",\n","    #pretrained_model_name_or_path = \"neuralmind/bert-base-portuguese-cased\",    \n","    #pretrained_model_name_or_path = \"bert-base-multilingual-cased\",\n","    #pretrained_model_name_or_path = \"bert-base-multilingual-uncased\",\n","    modelo_spacy = \"pt_core_news_lg\",\n","    #modelo_spacy = \"pt_core_news_md\",\n","    #modelo_spacy = \"pt_core_news_sm\",\n","    versao_modelo_spacy = \"3.2.0\",\n","    sentenciar_documento = True,\n","    do_lower_case = False,   # default True  \n","    output_attentions = False,  # default False\n","    output_hidden_states = True, # default False, se True retorna todas as camadas do modelo para as operações de soma e concatenação\n","    usar_mcl_ajustado = False, # Especifica se deve ser carregado um MCL ajustado ou pré-treinado. Necessário especificar o tipo do modelo em pretrained_model_name_or_path. \n",")"]},{"cell_type":"markdown","metadata":{"id":"BLOqjcIzImVo"},"source":["## Nome do diretório dos arquivos de dados"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xJEiTPnKImVp"},"outputs":[],"source":["# Diretório do cohebert\n","DIRETORIO_COHEBERT = \"MODERNIST\""]},{"cell_type":"markdown","metadata":{"id":"SUxlx7Sx4yxj"},"source":["## Define o caminho para os arquivos de dados"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-gQpxAO74yxj"},"outputs":[],"source":["# Diretório local para os arquivos pré-processados\n","DIRETORIO_LOCAL = \"/content/\" + DIRETORIO_COHEBERT + \"/\"\n","\n","# Diretório no google drive com os arquivos pré-processados\n","DIRETORIO_DRIVE = \"/content/drive/MyDrive/Colab Notebooks/Data/\" + DIRETORIO_COHEBERT + \"/\""]},{"cell_type":"markdown","metadata":{"id":"tDgJTbPOZ8SW"},"source":["## Inicialização diretórios"]},{"cell_type":"markdown","metadata":{"id":"qpSERA9TC4WU"},"source":["Diretório base local"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"edg7eW2cDflg"},"outputs":[],"source":["# Importando as bibliotecas.\n","import os\n","\n","def criaDiretorioLocal():\n","\n","  # Cria o diretório para receber os arquivos Originais e Permutados\n","  # Diretório a ser criado\n","  dirbase = DIRETORIO_LOCAL[:-1]\n","\n","  if not os.path.exists(dirbase):  \n","      # Cria o diretório\n","      os.makedirs(dirbase)    \n","      logging.info(\"Diretório criado: {}.\".format(dirbase))\n","  else:    \n","      logging.info(\"Diretório já existe: {}.\".format(dirbase))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":395,"status":"ok","timestamp":1669032451430,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"xge0ar9MJoKy","outputId":"c02c859a-1984-4ad7-ffcf-c92db22093a9"},"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:root:Diretório já existe: /content/MODERNIST.\n"]}],"source":["criaDiretorioLocal()"]},{"cell_type":"markdown","metadata":{"id":"L7G3-MOsQ1N_"},"source":["# 3 spaCy"]},{"cell_type":"markdown","metadata":{"id":"35GwcgkOlWi3"},"source":["## 3.1 Download arquivo modelo\n","\n","https://spacy.io/models/pt"]},{"cell_type":"markdown","metadata":{"id":"PWd_9X0nOYnF"},"source":["### Função download modelo spaCy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DjWGu-9D5URZ"},"outputs":[],"source":["def downloadSpacy(model_args):\n","    \"\"\"\n","      Realiza o download do arquivo do modelo para o diretório corrente.\n","    \n","      Parâmetros:\n","        `model_args` - Objeto com os argumentos do modelo.       \n","    \"\"\"\n","    # Verifica se existe o diretório base\n","    DIRETORIO_COHEBERT = verificaDiretorioCoheBERT()\n","        \n","    # Nome arquivo spacy\n","    ARQUIVO_MODELO_SPACY = model_args.modelo_spacy\n","    # Versão spaCy\n","    VERSAO_SPACY = \"-\" + model_args.versao_modelo_spacy\n","    # Nome arquivo compactado\n","    NOME_ARQUIVO_MODELO_COMPACTADO = ARQUIVO_MODELO_SPACY + VERSAO_SPACY + \".tar.gz\"\n","    \n","    # Url do arquivo\n","    URL_ARQUIVO_MODELO_COMPACTADO = \"https://github.com/explosion/spacy-models/releases/download/\" + ARQUIVO_MODELO_SPACY + VERSAO_SPACY + \"/\" + NOME_ARQUIVO_MODELO_COMPACTADO\n","\n","    # Realiza o download do arquivo do modelo\n","    logging.info(\"Download do arquivo do modelo do spaCy.\")\n","    downloadArquivo(URL_ARQUIVO_MODELO_COMPACTADO, DIRETORIO_COHEBERT + \"/\" + NOME_ARQUIVO_MODELO_COMPACTADO)"]},{"cell_type":"markdown","metadata":{"id":"Uu_LkF7Nfm8_"},"source":["## 3.2 Descompacta o arquivo do modelo"]},{"cell_type":"markdown","metadata":{"id":"XAc1tSwvOc4d"},"source":["### Função descompacta modelo spaCy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Dq9PnXO77bPQ"},"outputs":[],"source":["# Import das bibliotecas.\n","import tarfile # Biblioteca de descompactação\n","\n","def descompactaSpacy(model_args):\n","    \"\"\"\n","      Descompacta o arquivo do modelo.\n","    \n","      Parâmetros:\n","        `model_args` - Objeto com os argumentos do modelo.       \n","    \"\"\"\n","    \n","    # Verifica se existe o diretório base do cohebert e retorna o nome do diretório\n","    DIRETORIO_COHEBERT = verificaDiretorioCoheBERT()\n","    \n","    # Nome arquivo spacy\n","    ARQUIVO_MODELO_SPACY = model_args.modelo_spacy\n","    # Versão spaCy\n","    VERSAO_SPACY = \"-\" + model_args.versao_modelo_spacy\n","    \n","    # Nome do arquivo a ser descompactado\n","    NOME_ARQUIVO_MODELO_COMPACTADO = DIRETORIO_COHEBERT + \"/\" + ARQUIVO_MODELO_SPACY + VERSAO_SPACY + \".tar.gz\"\n","    \n","    logging.info(\"Descompactando o arquivo do modelo do spaCy.\")\n","    arquivo_tar = tarfile.open(NOME_ARQUIVO_MODELO_COMPACTADO, \"r:gz\")    \n","    arquivo_tar.extractall(DIRETORIO_COHEBERT)    \n","    arquivo_tar.close()\n","    \n","    # Apaga o arquivo compactado\n","    if os.path.isfile(NOME_ARQUIVO_MODELO_COMPACTADO):        \n","        os.remove(NOME_ARQUIVO_MODELO_COMPACTADO)"]},{"cell_type":"markdown","metadata":{"id":"STHT2c89qvwK"},"source":["## 3.3 Carrega o modelo"]},{"cell_type":"markdown","metadata":{"id":"3iFBoyWMOgKz"},"source":["### Função carrega modelo spaCy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ePOccj0s8WMg"},"outputs":[],"source":["# Import das bibliotecas.\n","import spacy # Biblioteca do spaCy\n","\n","def carregaSpacy(model_args):\n","    \"\"\"\n","    Realiza o carregamento do Spacy.\n","    \n","    Parâmetros:\n","      `model_args` - Objeto com os argumentos do modelo.           \n","    \"\"\"\n","    \n","    # Verifica se existe o diretório base\n","    DIRETORIO_COHEBERT = verificaDiretorioCoheBERT()\n","                  \n","    # Nome arquivo spacy\n","    ARQUIVO_MODELO_SPACY = model_args.modelo_spacy\n","    # Versão spaCy\n","    VERSAO_SPACY = \"-\" + model_args.versao_modelo_spacy\n","    # Caminho raoz do modelo do spaCy\n","    DIRETORIO_MODELO_SPACY =  DIRETORIO_COHEBERT + \"/\" + ARQUIVO_MODELO_SPACY + VERSAO_SPACY\n","\n","    # Verifica se o diretório existe\n","    if os.path.exists(DIRETORIO_MODELO_SPACY) == False:\n","        # Realiza o download do arquivo modelo do spaCy\n","        downloadSpacy(model_args)\n","        # Descompacta o spaCy\n","        descompactaSpacy(model_args)\n","\n","    # Diretório completo do spaCy\n","    DIRETORIO_MODELO_SPACY = DIRETORIO_COHEBERT + \"/\" + ARQUIVO_MODELO_SPACY + VERSAO_SPACY + \"/\" + ARQUIVO_MODELO_SPACY + \"/\" + ARQUIVO_MODELO_SPACY + VERSAO_SPACY + \"/\"\n","\n","    # Carrega o spaCy. Necessário somente \"tagger\" para encontrar os substantivos\n","    nlp = spacy.load(DIRETORIO_MODELO_SPACY)\n","    logging.info(\"spaCy carregado.\")\n","\n","    # Retorna o spacy carregado\n","    return nlp "]},{"cell_type":"markdown","metadata":{"id":"cAk5hHx7OnHn"},"source":["### Carrega o modelo spaCy\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11970,"status":"ok","timestamp":1669032463395,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"nbELnrpgA4T1","outputId":"7119471e-ec2e-4f7a-e090-1fb98d8f1cf9"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/spacy/util.py:877: UserWarning: [W095] Model 'pt_core_news_lg' (3.2.0) was trained with spaCy v3.2 and may not be 100% compatible with the current version (3.4.2). If you see errors or degraded performance, download a newer compatible model or retrain your custom model with the current spaCy version. For more details and available updates, run: python -m spacy validate\n","  warnings.warn(warn_msg)\n","INFO:root:spaCy carregado.\n"]}],"source":["# Carrega o modelo spaCy\n","nlp = carregaSpacy(model_args)"]},{"cell_type":"markdown","metadata":{"id":"fzk8VOp7oy8n"},"source":["## 3.4 Funções auxiliares spaCy"]},{"cell_type":"markdown","metadata":{"id":"AEzytjZi5Iw2"},"source":["### getStopwords\n","\n","Recupera as stopwords do spaCy"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zKg-_XyWoy8o"},"outputs":[],"source":["def getStopwords(nlp):\n","    \"\"\"\n","      Recupera as stop words do nlp(Spacy).\n","    \n","      Parâmetros:\n","        `nlp` - Um modelo spaCy carregado.           \n","    \"\"\"\n","    \n","    spacy_stopwords = nlp.Defaults.stop_words\n","\n","    return spacy_stopwords "]},{"cell_type":"markdown","metadata":{"id":"qZdNFrC3oy8p"},"source":["Lista dos stopwords"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":26,"status":"ok","timestamp":1669032463396,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"s1o8jevtoy8p","outputId":"db56c446-7c70-48e9-af12-21546814b71b"},"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:root:Quantidade de stopwords: 416.\n"]},{"output_type":"stream","name":"stdout","text":["{'tempo', 'ao', 'das', 'sexta', 'ele', 'estes', 'novos', 'pela', 'bastante', 'também', 'daquela', 'obrigado', 'sei', 'tente', 'nenhuma', 'tua', 'naquele', 'ambos', 'sobre', 'zero', 'tentei', 'vão', 'fará', 'elas', 'partir', 'mal', 'usa', 'todas', 'me', 'treze', 'quarta', 'quando', 'estiveram', 'são', 'fora', 'está', 'devem', 'grupo', 'quanto', 'numa', 'outros', 'qual', 'nossos', 'algo', 'ainda', 'tens', 'esteve', 'minha', 'outra', 'neste', 'eu', 'estava', 'terceiro', 'vêm', 'esse', 'pode', 'maior', 'pois', 'dezassete', 'quê', 'porquanto', 'nova', 'maioria', 'fostes', 'como', 'vezes', 'nível', 'tivemos', 'isto', 'nessa', 'do', 'depois', 'apoio', 'fazer', 'estas', 'comprida', 'tuas', 'fazes', 'se', 'parte', 'estará', 'já', 'tão', 'até', 'certeza', 'sim', 'sétima', 'saber', 'dois', 'estivemos', 'ter', 'dar', 'só', 'após', 'vinda', 'grandes', 'inclusive', 'querem', 'debaixo', 'de', 'um', 'exemplo', 'nem', 'podia', 'deve', 'podem', 'corrente', 'relação', 'teu', 'posso', 'nas', 'conselho', 'novo', 'tentaram', 'veja', 'meus', 'ademais', 'aquilo', 'inicio', 'dá', 'teus', 'lá', 'uns', 'vindo', 'meses', 'nesta', 'vós', 'primeiro', 'ali', 'lugar', 'lhe', 'acerca', 'segundo', 'doze', 'vários', 'fez', 'contra', 'cujo', 'boa', 'cedo', 'umas', 'oito', 'dez', 'eventual', 'custa', 'falta', 'três', 'cada', 'fim', 'meu', 'porém', 'posição', 'des', 'breve', 'põe', 'aquelas', 'essa', 'mas', 'cuja', 'cá', 'favor', 'tiveram', 'pouca', 'dão', 'for', 'sua', 'tanto', 'não', 'aquele', 'onde', 'quinto', 'porque', 'sois', 'antes', 'aquela', 'nesse', 'logo', 'maiorias', 'sistema', 'mais', 'todos', 'esses', 'próprio', 'estiveste', 'deste', 'quinta', 'número', 'local', 'usar', 'têm', 'alguns', 'no', 'algumas', 'estou', 'somente', 'conhecido', 'diante', 'seu', 'vossa', 'poder', 'nada', 'muito', 'oitava', 'dessa', 'fazia', 'catorze', 'seus', 'pelos', 'desde', 'num', 'por', 'nuns', 'quatro', 'aqueles', 'segunda', 'quinze', 'tanta', 'vinte', 'novas', 'tal', 'sem', 'poderá', 'daquele', 'menor', 'sempre', 'vosso', 'muitos', 'vossas', 'baixo', 'pelas', 'deverá', 'as', 'nosso', 'tive', 'entre', 'isso', 'possivelmente', 'demais', 'obrigada', 'duas', 'certamente', 'à', 'dentro', 'estado', 'uma', 'onze', 'faz', 'sob', 'apenas', 'às', 'ligado', 'ou', 'põem', 'portanto', 'fomos', 'outras', 'nossa', 'o', 'tenho', 'iniciar', 'pelo', 'faço', 'era', 'que', 'foi', 'primeira', 'tivestes', 'tudo', 'seis', 'estivestes', 'temos', 'fazemos', 'tais', 'quieto', 'aos', 'te', 'tipo', 'minhas', 'comprido', 'tem', 'pouco', 'para', 'área', 'dezanove', 'foram', 'vai', 'último', 'ontem', 'disso', 'aí', 'naquela', 'és', 'estive', 'agora', 'tentar', 'valor', 'aqui', 'tendes', 'dezasseis', 'vos', 'embora', 'próxima', 'você', 'ver', 'então', 'através', 'bom', 'quero', 'somos', 'números', 'dezoito', 'puderam', 'desta', 'sou', 'suas', 'próximo', 'mil', 'nove', 'quieta', 'coisa', 'parece', 'vais', 'forma', 'oitavo', 'vossos', 'final', 'conhecida', 'cinco', 'direita', 'eles', 'vem', 'menos', 'tarde', 'tiveste', 'sexto', 'questão', 'meio', 'foste', 'mesmo', 'fui', 'nossas', 'seria', 'nunca', 'assim', 'essas', 'na', 'ora', 'é', 'pegar', 'longe', 'irá', 'talvez', 'tu', 'e', 'este', 'dos', 'fazeis', 'momento', 'possível', 'além', 'dizer', 'estás', 'terceira', 'ponto', 'ir', 'pontos', 'quem', 'quer', 'desse', 'mês', 'bem', 'apoia', 'nós', 'nos', 'todo', 'contudo', 'qualquer', 'sétimo', 'dizem', 'teve', 'adeus', 'diz', 'vocês', 'caminho', 'em', 'os', 'sabe', 'grande', 'cima', 'ela', 'a', 'geral', 'toda', 'esta', 'vens', 'estar', 'da', 'apontar', 'quarto', 'enquanto', 'pôde', 'atrás', 'fazem', 'porquê', 'vez', 'cento', 'máximo', 'sete', 'perto', 'ambas', 'quais', 'lado', 'estão', 'ser', 'com', 'povo'}\n"]}],"source":["logging.info(\"Quantidade de stopwords: {}.\".format(len(getStopwords(nlp))))\n","\n","print(getStopwords(nlp))"]},{"cell_type":"markdown","metadata":{"id":"onM1ZApom-_W"},"source":["### getVerbos\n","Localiza os verbos da sentença"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6hdqVdfxm-_W"},"outputs":[],"source":["# Import das bibliotecas.\n","import spacy   \n","from spacy.util import filter_spans\n","from spacy.matcher import Matcher\n","\n","# (verbo normal como auxilar ou auxilar) + vários verbos auxiliares +verbo principal ou verbo auxiliar\n","gramaticav1 =  [\n","                {\"POS\": \"AUX\", \"OP\": \"?\", \"DEP\": {\"IN\": [\"aux\",\"aux:pass\"]}},  #verbo auxiliar                                  \n","                {\"POS\": \"VERB\", \"OP\": \"?\", \"DEP\": {\"IN\": [\"ROOT\",\"aux\",\"xcomp\",\"aux:pass\"]}},  #verbo normal como auxiliar\n","                {\"POS\": \"AUX\", \"OP\": \"*\", \"DEP\": {\"IN\": [\"aux\",\"xcomp\",\"aux:pass\"]}},  #verbo auxiliar   \n","                {\"POS\": \"VERB\", \"OP\": \"+\"}, #verbo principal\n","                {\"POS\": \"AUX\", \"OP\": \"?\", \"DEP\": {\"IN\": [\"cop\",\"aux\",\"xcomp\",\"aux:pass\"]}},  #verbo auxiliar\n","               ] \n","\n","# verbo auxiliar + verbo normal como auxiliar + conjunção com preposição + verbo\n","gramaticav2 =  [               \n","                {\"POS\": \"AUX\", \"OP\": \"?\", \"DEP\": {\"IN\": [\"aux\",\"aux:pass\"]}},  #verbo auxiliar                   \n","                {\"POS\": \"VERB\", \"OP\": \"+\", \"DEP\": {\"IN\": [\"ROOT\"]}},  #verbo principal       \n","                {\"POS\": \"SCONJ\", \"OP\": \"+\", \"DEP\": {\"IN\": [\"mark\"]}}, #conjunção com preposição\n","                {\"POS\": \"VERB\", \"OP\": \"+\", \"DEP\": {\"IN\": [\"xcomp\"]}}, #verbo normal como complementar\n","               ] \n","\n","#Somente verbos auxiliares\n","gramaticav3 =  [\n","                {\"POS\": \"AUX\", \"OP\": \"?\"},  #Verbos auxiliar \n","                {\"POS\": \"AUX\", \"OP\": \"?\", \"DEP\": {\"IN\": [\"cop\"]}},  #Verbos auxiliar de ligação (AUX+(cop))\n","                {\"POS\": \"ADJ\", \"OP\": \"+\", \"DEP\": {\"IN\": [\"ROOT\"]}}, \n","                {\"POS\": \"AUX\", \"OP\": \"?\"}  #Verbos auxiliar \n","               ] \n","\n","matcherv = Matcher(nlp.vocab)\n","         \n","matcherv.add(\"frase verbal\", [gramaticav1])\n","matcherv.add(\"frase verbal\", [gramaticav2])\n","matcherv.add(\"frase verbal\", [gramaticav3])\n","\n","#Retorna a Frase Verbal\n","def getVerbos(periodo):    \n","  #Processa o período\n","  doc1 = nlp(periodo.text)\n","  \n","  # Chama o mather para encontrar o padrão\n","  matches = matcherv(doc1)\n","\n","  padrao = [doc1[start:end] for _, start, end in matches]\n","\n","  #elimina as repetições e sobreposições\n","  #return filter_spans(padrao)\n","  lista1 = filter_spans(padrao)\n","\n","  # Converte os itens em string\n","  lista2 = []\n","  for x in lista1:\n","      lista2.append(str(x))\n","  \n","  return lista2"]},{"cell_type":"markdown","metadata":{"id":"6ZVwbmn3Nx2t"},"source":["### getDicPOSQtde\n","\n","Conta as POS Tagging de uma sentença"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3j3VF4NOSPbq"},"outputs":[],"source":["def getDicPOSQtde(sentenca):\n","\n","    # Verifica se o sentenca não foi processado pelo spaCy  \n","  if type(sentenca) is not spacy.tokens.doc.Doc:\n","      # Realiza o parsing no spacy\n","      doc = nlp(sentenca)\n","  else:\n","      doc = sentenca\n","\n","  # Retorna inteiros que mapeiam para classes gramaticais\n","  conta_dicionarios = doc.count_by(spacy.attrs.IDS[\"POS\"])\n","\n","  # Dicionário com as tags e quantidades\n","  novodic = dict()\n","  \n","  for pos, qtde in conta_dicionarios.items():\n","    classe_gramatical = doc.vocab[pos].text\n","    novodic[classe_gramatical] = qtde\n","\n","  return novodic"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0uPDYU4KBC5q"},"outputs":[],"source":["def getDicTodasPOSQtde(sentenca):\n","\n","    # Verifica se o sentenca não foi processado pelo spaCy  \n","  if type(sentenca) is not spacy.tokens.doc.Doc:\n","      # Realiza o parsing no spacy\n","      doc = nlp(sentenca)\n","  else:\n","      doc = sentenca\n","\n","  # Retorna inteiros que mapeiam para classes gramaticais\n","  conta_dicionarios = doc.count_by(spacy.attrs.IDS[\"POS\"])\n","\n","  # Dicionário com as tags e quantidades    \n","  novodic = {\"PRON\":0, \"VERB\":0, \"PUNCT\":0, \"DET\":0, \"NOUN\":0, \"AUX\":0, \"CCONJ\":0, \"ADP\":0, \"PROPN\":0, \"ADJ\":0, \"ADV\":0, \"NUM\":0, \"SCONJ\":0, \"SYM\":0, \"SPACE\":0, \"INTJ\":0, \"X\": 0}\n","    \n","  for pos, qtde in conta_dicionarios.items():\n","    classe_gramatical = doc.vocab[pos].text\n","    novodic[classe_gramatical] = qtde\n","\n","  return novodic"]},{"cell_type":"markdown","metadata":{"id":"Jxe-mh-l6sJY"},"source":["### getDicTodasPOSQtde\n","\n","Conta as POS Tagging de uma sentença"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"j9SA61kD6sJY"},"outputs":[],"source":["def getDicTodasPOSQtde(lista):\n","\n","  # Dicionário com as tags e quantidades\n","  conjunto = {\"PRON\":0, \"VERB\":0, \"PUNCT\":0, \"DET\":0, \"NOUN\":0, \"AUX\":0, \"CCONJ\":0, \"ADP\":0, \"PROPN\":0, \"ADJ\":0, \"ADV\":0, \"NUM\":0, \"SCONJ\":0, \"SYM\":0, \"SPACE\":0, \"INTJ\": 0}\n","\n","  for x in lista:\n","    valor = conjunto.get(x)\n","    if valor != None:\n","      conjunto[x] = valor + 1\n","    else:\n","      conjunto[x] = 1\n","\n","  return conjunto"]},{"cell_type":"markdown","metadata":{"id":"m4KV_jI-Nx2w"},"source":["### getSomaDic\n","\n","Soma os valores de dicionários com as mesmas chaves."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mGduPM6HNx2w"},"outputs":[],"source":["from collections import Counter\n","from functools import reduce\n","\n","def atualizaValor(a,b):\n","    a.update(b)\n","    return a\n","\n","def getSomaDic(lista):\n","    \n","  # Soma os dicionários da lista\n","  novodic = reduce(atualizaValor, (Counter(dict(x)) for x in lista))\n"," \n","  return novodic"]},{"cell_type":"markdown","metadata":{"id":"bGaf7bkpAEiX"},"source":["### getTokensSentenca\n","\n","Retorna a lista de tokens da sentenca."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gWxyAo54AOHU"},"outputs":[],"source":["def getTokensSentenca(sentenca):\n","\n","    # Verifica se o sentenca não foi processado pelo spaCy  \n","  if type(sentenca) is not spacy.tokens.doc.Doc:\n","      # Realiza o parsing no spacy\n","      doc = nlp(sentenca)\n","  else:\n","      doc = sentenca\n","\n","  # Lista dos tokens\n","  lista = []\n","\n","  # Percorre a sentença adicionando os tokens\n","  for token in doc:    \n","    lista.append(token.text)\n","\n","  return lista"]},{"cell_type":"markdown","metadata":{"id":"ZB6bR42PA28c"},"source":["### getPOSTokensSentenca\n","\n","Retorna a lista das POS-Tagging dos tokens da sentenca."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"awaqjNIZA3Fk"},"outputs":[],"source":["def getPOSTokensSentenca(sentenca):\n","\n","  # Verifica se o sentenca não foi processado pelo spaCy  \n","  if type(sentenca) is not spacy.tokens.doc.Doc:\n","      # Realiza o parsing no spacy\n","      doc = nlp(sentenca)\n","  else:\n","      doc = sentenca\n","\n","  # Lista dos tokens\n","  lista = []\n","\n","  # Percorre a sentença adicionando os tokens\n","  for token in doc:    \n","    lista.append(token.pos_)\n","\n","  return lista"]},{"cell_type":"markdown","metadata":{"id":"B4Soqt3fp3Lu"},"source":["### getListaTokensPOSSentenca\n","\n","Retorna duas listas uma com os tokens e a outra com a POS-Tagging dos tokens da sentenca."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Gvd99wd_pwmt"},"outputs":[],"source":["def getListaTokensPOSSentenca(sentenca):\n","  # Verifica se o sentenca não foi processado pelo spaCy  \n","  if type(sentenca) is not spacy.tokens.doc.Doc:\n","      # Realiza o parsing no spacy\n","      doc = nlp(sentenca)\n","  else:\n","      doc = sentenca\n","\n","  # Lista dos tokens\n","  lista_tokens = []\n","  lista_pos = []\n","\n","  # Percorre a sentença adicionando os tokens e as POS\n","  for token in doc:    \n","    lista_tokens.append(token.text)\n","    lista_pos.append(token.pos_)\n","    \n","  return lista_tokens, lista_pos"]},{"cell_type":"markdown","metadata":{"id":"ENvsIER06sJX"},"source":["### Tadução das tags"]},{"cell_type":"markdown","metadata":{"id":"kwSb3ECU6sJY"},"source":["Tags de palavras universal\n","\n","https://universaldependencies.org/u/pos/\n","\n","Detalhes das tags em português:\n","http://www.dbd.puc-rio.br/pergamum/tesesabertas/1412298_2016_completo.pdf"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NpCUpOs06sJY"},"outputs":[],"source":["#dicionário que contêm pos tag universal e suas explicações\n","palavra_universal_dict = {\n","  \"X\"    : \"Outro\",\n","  \"VERB\" : \"Verbo \",\n","  \"SYM\"  : \"Símbolo\",\n","  \"CONJ\" : \"Conjunção\",\n","  \"SCONJ\": \"Conjunção subordinativa\",\n","  \"PUNCT\": \"Pontuação\",\n","  \"PROPN\": \"Nome próprio\",\n","  \"PRON\" : \"Pronome substativo\",\n","  \"PART\" : \"Partícula, morfemas livres\",\n","  \"NUM\"  : \"Numeral\",\n","  \"NOUN\" : \"Substantivo\",\n","  \"INTJ\" : \"Interjeição\",\n","  \"DET\"  : \"Determinante, Artigo e pronomes adjetivos\",\n","  \"CCONJ\": \"Conjunção coordenativa\",\n","  \"AUX\"  : \"Verbo auxiliar\",\n","  \"ADV\"  : \"Advérbio\",\n","  \"ADP\"  : \"Preposição\",\n","  \"ADJ\"  : \"Adjetivo\"\n","}\n","  \n","#Explica a POS\n","def getPOSPalavraUniversalTraduzido(palavra):\n","  if palavra in palavra_universal_dict.keys():\n","      traduzido = palavra_universal_dict[palavra]\n","  else:\n","      traduzido = \"NA\" \n","  return traduzido"]},{"cell_type":"markdown","metadata":{"id":"b01WgMSSKY_u"},"source":["### getSentencaSemStopWord\n","\n","Retorna uma lista dos tokens sem as stopwords."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rMb0uDWzKZXP"},"outputs":[],"source":["def getSentencaSemStopWord(sentenca, stopwords):\n","\n","  # Lista dos tokens\n","  lista = []\n","\n","  # Percorre os tokens da sentença\n","  for i, token in enumerate(sentenca):\n","\n","    # Verifica se o token é uma stopword\n","    if token.lower() not in stopwords:\n","      lista.append(token)\n","\n","  # Retorna o documento\n","  return lista"]},{"cell_type":"markdown","metadata":{"id":"TouR4GjNJZD6"},"source":["### getSentencaSalientePOS\n","\n","Retorna uma lista das palavras do tipo especificado."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zxTCYFzcJZD6"},"outputs":[],"source":["def getSentencaSalientePOS(sentenca, pos, tipo_saliente=\"NOUN\"):\n","  \n","  # Lista dos tokens\n","  lista = []\n","\n","  # Percorre a sentença\n","  for i, token in enumerate(sentenca):\n","\n","    # Verifica se o token é do tipo especeficado\n","    if pos[i] == tipo_saliente:\n","      lista.append(token)\n","\n","  # Retorna o documento\n","  return lista"]},{"cell_type":"markdown","metadata":{"id":"_xaeX0oTVQ5t"},"source":["###removeStopWords\n","\n","Remove as stopwords de um documento ou senteça."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NIaQ9bzBVQ5t"},"outputs":[],"source":["def removeStopWord(documento, stopwords):\n","  \n","  # Remoção das stopwords do documento\n","  documento_sem_stopwords = [palavra for palavra in documento.split() if palavra.lower() not in stopwords]\n","\n","  # Concatena o documento sem os stopwords\n","  documento_limpo = \" \".join(documento_sem_stopwords)\n","\n","  # Retorna o documento\n","  return documento_limpo"]},{"cell_type":"markdown","metadata":{"id":"A7NAe8ogCf1y"},"source":["### retornaRelevante\n","\n","Retorna somente os palavras do documento ou sentença do tipo especificado."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UNNfykypChn-"},"outputs":[],"source":["def retornaRelevante(documento, classe_relevante=\"NOUN\"):\n","\n","  # Corrigir!\n","  # Utilizar o documento já tokenizado pelo spacy!!!!\n","  # Existe uma lista com o documento e a sentença tokenizada pelo spacy\n","  \n","  # Realiza o parsing no spacy\n","  doc = nlp(documento)\n","\n","  # Retorna a lista das palavras relevantes\n","  documento_com_substantivos = []\n","  for token in doc:\n","    #print(\"token:\", token.pos_)\n","    if token.pos_ == classe_relevante:\n","      documento_com_substantivos.append(token.text)\n","\n","  # Concatena o documento com os substantivos\n","  documento_concatenado = \" \".join(documento_com_substantivos)\n","\n","  # Retorna o documento\n","  return documento_concatenado"]},{"cell_type":"markdown","metadata":{"id":"IBY7q_uH8JSE"},"source":["# 4 BERT"]},{"cell_type":"markdown","metadata":{"id":"MBGTMy8Ic7GK"},"source":["## 4.1 Modelo Pré-treinado BERT"]},{"cell_type":"markdown","metadata":{"id":"uiuxdXe9t1BX"},"source":["### Funções Auxiliares"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9Huw0x5kt1Le"},"outputs":[],"source":["def getNomeModeloBERT(model_args):\n","    '''    \n","    Recupera uma string com uma descrição do modelo BERT para nomes de arquivos e diretórios.\n","    \n","    Parâmetros:\n","    `model_args` - Objeto com os argumentos do modelo.       \n","    \n","    Retorno:\n","    `MODELO_BERT` - Nome do modelo BERT.\n","    '''\n","\n","    # Verifica o nome do modelo(default SEM_MODELO_BERT)\n","    MODELO_BERT = \"SEM_MODELO_BERT\"\n","    \n","    if 'neuralmind' in model_args.pretrained_model_name_or_path:\n","        MODELO_BERT = \"_BERTimbau\"\n","        \n","    else:\n","        if 'multilingual' in model_args.pretrained_model_name_or_path:\n","            MODELO_BERT = \"_BERTmultilingual\"\n","            \n","    return MODELO_BERT"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jYJB4ik7t5xe"},"outputs":[],"source":["def getTamanhoBERT(model_args):\n","    '''    \n","    Recupera uma string com o tamanho(dimensão) do modelo BERT para nomes de arquivos e diretórios.\n","    \n","    Parâmetros:\n","    `model_args` - Objeto com os argumentos do modelo.       \n","    \n","    Retorno:\n","    `TAMANHO_BERT` - Nome do tamanho do modelo BERT.\n","    '''\n","    \n","    # Verifica o tamanho do modelo(default large)\n","    TAMANHO_BERT = \"_large\"\n","    \n","    if 'base' in model_args.pretrained_model_name_or_path:\n","        TAMANHO_BERT = \"_base\"\n","        \n","    return TAMANHO_BERT  "]},{"cell_type":"markdown","metadata":{"id":"rHt4e5pAcEMd"},"source":["### Função download Modelo Pre-treinado BERT"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"peDUrV2ccEXA"},"outputs":[],"source":["# Import das bibliotecas.\n","import zipfile # Biblioteca para descompactar\n","import shutil # iblioteca de manipulação arquivos de alto nível\n","\n","def downloadModeloPretreinado(model_args):\n","    \"\"\"\n","      Realiza o download do modelo BERT(MODELO) e retorna o diretório onde o modelo BERT(MODELO) foi descompactado.\n","    \n","      Parâmetros:\n","        `model_args` - Objeto com os argumentos do modelo.\n","    \n","      Retorno:\n","        `DIRETORIO_MODELO` - Diretório de download do modelo.\n","    \"\"\" \n","    \n","    # Nome diretório base modelo BERT\n","    NOME_DIRETORIO_BASE_MODELO = \"modeloBERT\"\n","    \n","    # Verifica se existe o diretório base do cohebert e retorna o nome do diretório\n","    DIRETORIO_COHEBERT = verificaDiretorioCoheBERT()\n","    \n","    # Recupera o nome ou caminho do modelo\n","    MODELO = model_args.pretrained_model_name_or_path\n","\n","    # Variável para setar o arquivo.\n","    URL_MODELO = None\n","\n","    if \"http\" in MODELO:\n","        URL_MODELO = MODELO\n","\n","    # Se a variável foi setada.\n","    if URL_MODELO:\n","\n","        # Diretório do modelo.\n","        DIRETORIO_MODELO = DIRETORIO_COHEBERT + \"/\" + NOME_DIRETORIO_BASE_MODELO\n","        \n","        # Recupera o nome do arquivo do modelo da url.\n","        NOME_ARQUIVO = URL_MODELO.split(\"/\")[-1]\n","\n","        # Nome do arquivo do vocabulário.\n","        ARQUIVO_VOCAB = \"vocab.txt\"\n","        \n","        # Caminho do arquivo na url.\n","        CAMINHO_ARQUIVO = URL_MODELO[0:len(URL_MODELO)-len(NOME_ARQUIVO)]\n","\n","        # Verifica se o diretório de descompactação existe no diretório corrente\n","        if os.path.exists(DIRETORIO_MODELO):\n","            logging.info(\"Apagando diretório existente do modelo!\")\n","            # Apaga o diretório e os arquivos existentes                     \n","            shutil.rmtree(DIRETORIO_MODELO)\n","        \n","        # Realiza o download do arquivo do modelo        \n","        downloadArquivo(URL_MODELO, NOME_ARQUIVO)\n","\n","        # Descompacta o arquivo no diretório de descompactação.                \n","        arquivo_zip = zipfile.ZipFile(NOME_ARQUIVO, \"r\")\n","        arquivo_zip.extractall(DIRETORIO_MODELO)\n","\n","        # Baixa o arquivo do vocabulário.\n","        # O vocabulário não está no arquivo compactado acima, mesma url mas arquivo diferente.\n","        URL_MODELO_VOCAB = CAMINHO_ARQUIVO + ARQUIVO_VOCAB\n","        # Coloca o arquivo do vocabulário no diretório do modelo.        \n","        downloadArquivo(URL_MODELO_VOCAB, DIRETORIO_MODELO + \"/\" + ARQUIVO_VOCAB)\n","        \n","        # Apaga o arquivo compactado\n","        os.remove(NOME_ARQUIVO)\n","\n","        logging.info(\"Diretório {} do modelo BERT pronta!\".format(DIRETORIO_MODELO))\n","\n","    else:\n","        DIRETORIO_MODELO = MODELO\n","        logging.info(\"Variável URL_MODELO não setada!\")\n","\n","    return DIRETORIO_MODELO"]},{"cell_type":"markdown","metadata":{"id":"V74WUpHqcfoI"},"source":["### Copia o modelo do BERT ajustado"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iQMpf9yycf8f"},"outputs":[],"source":["# Import das bibliotecas.\n","import shutil # iblioteca de manipulação arquivos de alto nível\n","\n","def copiaModeloAjustado(model_args):\n","    \"\"\" \n","      Copia o modelo ajustado BERT do GoogleDrive para o projeto.\n","    \n","      Parâmetros:\n","        `model_args` - Objeto com os argumentos do modelo.\n","    \n","      Retorno:\n","        `DIRETORIO_LOCAL_MODELO_AJUSTADO` - Diretório de download ajustado do modelo.\n","    \"\"\"\n","\n","    # Verifica o nome do modelo BERT a ser utilizado\n","    MODELO_BERT = getNomeModeloBERT(model_args)\n","\n","    # Verifica o tamanho do modelo(default large)\n","    TAMANHO_BERT = getTamanhoBERT(model_args)\n","\n","    # Verifica se existe o diretório base do cohebert e retorna o nome do diretório\n","    DIRETORIO_COHEBERT = verificaDiretorioCoheBERT()\n","\n","    # Diretório local de salvamento do modelo.\n","    DIRETORIO_LOCAL_MODELO_AJUSTADO = DIRETORIO_COHEBERT + \"/modelo_ajustado/\"\n","\n","    # Diretório remoto de salvamento do modelo no google drive.\n","    DIRETORIO_REMOTO_MODELO_AJUSTADO = \"/content/drive/MyDrive/Colab Notebooks/Data/\" + DIRETORIO_COHEBERT + \"/validacao_classificacao_palavra/holdout/modelo/\" + MODELO_BERT + TAMANHO_BERT\n","\n","    # Copia o arquivo do modelo para o diretório no Google Drive.\n","    shutil.copytree(DIRETORIO_REMOTO_MODELO_AJUSTADO, DIRETORIO_LOCAL_MODELO_AJUSTADO) \n","   \n","    logging.info(\"Modelo BERT ajustado copiado!\")\n","\n","    return DIRETORIO_LOCAL_MODELO_AJUSTADO"]},{"cell_type":"markdown","metadata":{"id":"eaneOhAKcO-3"},"source":["### Verifica de onde utilizar o modelo do BERT"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TTy1TXz3cPKS"},"outputs":[],"source":["def verificaModelo(model_args):\n","    \"\"\" \n","    Verifica de onde utilizar o modelo.\n","    \n","    Parâmetros:\n","    `model_args` - Objeto com os argumentos do modelo.\n","    \n","    Retorno:\n","    `DIRETORIO_MODELO` - Diretório de download do modelo.\n","    \"\"\" \n","\n","    DIRETORIO_MODELO = None\n","    \n","    if model_args.usar_mcl_ajustado == True:        \n","        # Diretório do modelo\n","        DIRETORIO_MODELO = copiaModeloAjustado()\n","        \n","        logging.info(\"Usando modelo BERT ajustado.\")\n","        \n","    else:\n","        DIRETORIO_MODELO = downloadModeloPretreinado(model_args)\n","        logging.info(\"Usando modelo BERT pré-treinado.\")        \n","        \n","    return DIRETORIO_MODELO"]},{"cell_type":"markdown","metadata":{"id":"6tKcaIfReqdy"},"source":["## 4.2 Tokenizador BERT"]},{"cell_type":"markdown","metadata":{"id":"e8n7Z5s-QZF8"},"source":["### Função carrega Tokenizador BERT\n","\n","O tokenizador utiliza WordPiece, veja em [artigo original](https://arxiv.org/pdf/1609.08144.pdf).\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mzAuptkwQZR3"},"outputs":[],"source":["# Import das bibliotecas.\n","from transformers import BertTokenizer # Importando as bibliotecas do tokenizador BERT.\n","\n","def carregaTokenizadorModeloPretreinado(DIRETORIO_MODELO, model_args):\n","    \"\"\"\n","      Carrega o tokenizador do DIRETORIO_MODELO.\n","      O tokenizador utiliza WordPiece.\n","      Carregando o tokenizador do diretório \"./modelo/\" do diretório padrão se variável `DIRETORIO_MODELO` setada.\n","      Caso contrário carrega da comunidade\n","      Por default(`do_lower_case=True`) todas as letras são colocadas para minúsculas. Para ignorar a conversão para minúsculo use o parâmetro `do_lower_case=False`. Esta opção também considera as letras acentuadas(ãçéí...), que são necessárias a língua portuguesa.\n","      O parâmetro `do_lower_case` interfere na quantidade tokens a ser gerado a partir de um texto. Quando igual a `False` reduz a quantidade de tokens gerados.\n","    \n","      Parâmetros:\n","        `DIRETORIO_MODELO` - Diretório a ser utilizado pelo modelo BERT.           \n","        `model_args` - Objeto com os argumentos do modelo.       \n","    \n","      Retorno:\n","        `tokenizer` - Tokenizador BERT.\n","    \"\"\"\n","\n","    tokenizer = None\n","    \n","    # Se a variável DIRETORIO_MODELO foi setada.\n","    if DIRETORIO_MODELO:\n","        # Carregando o Tokenizador.\n","        logging.info(\"Carregando o tokenizador BERT do diretório {}.\".format(DIRETORIO_MODELO))\n","\n","        tokenizer = BertTokenizer.from_pretrained(DIRETORIO_MODELO, do_lower_case=model_args.do_lower_case)\n","\n","    else:\n","        # Carregando o Tokenizador da comunidade.\n","        logging.info(\"Carregando o tokenizador BERT da comunidade.\")\n","\n","        tokenizer = BertTokenizer.from_pretrained(model_args.pretrained_model_name_or_path, do_lower_case=model_args.do_lower_case)\n","\n","    return tokenizer"]},{"cell_type":"markdown","metadata":{"id":"GYRV9KfHQE6v"},"source":["## 4.3 Carrega o modelo e tokenizador BERT\n","\n","Lista de modelos da comunidade:\n","* https://huggingface.co/models\n","\n","Português(https://github.com/neuralmind-ai/portuguese-bert):  \n","* **\"neuralmind/bert-base-portuguese-cased\"**\n","* **\"neuralmind/bert-large-portuguese-cased\"**"]},{"cell_type":"markdown","metadata":{"id":"-pZZrUKRhR3e"},"source":["### Função carrega modelo BERT medida\n","\n","A implementação do huggingface pytorch inclui um conjunto de interfaces projetadas para uma variedade de tarefas de PNL. Embora essas interfaces sejam todas construídas sobre um modelo treinado de BERT, cada uma possui diferentes camadas superiores e tipos de saída projetados para acomodar suas tarefas específicas de PNL.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1JUEyjCChUQh"},"outputs":[],"source":["# Import das bibliotecas.\n","from transformers import BertModel # Importando as bibliotecas do Modelo BERT.\n","\n","def carregaModeloMedida(DIRETORIO_MODELO, model_args):\n","    \"\"\"\n","      Carrega o modelo e retorna o modelo.\n","    \n","      Parâmetros:\n","        `DIRETORIO_MODELO` - Diretório a ser utilizado pelo modelo BERT.           \n","        `model_args` - Objeto com os argumentos do modelo.   \n","    \n","      Retorno:\n","        `model` - Um objeto do modelo BERT carregado.\n","    \"\"\"\n","\n","    # Variável para setar o arquivo.\n","    URL_MODELO = None\n","\n","    if \"http\" in model_args.pretrained_model_name_or_path:\n","        URL_MODELO = model_args.pretrained_model_name_or_path\n","\n","    # Se a variável URL_MODELO foi setada\n","    if URL_MODELO:        \n","        # Carregando o Modelo BERT\n","        logging.info(\"Carregando o modelo BERT do diretório {} para cálculo de medidas.\".format(DIRETORIO_MODELO))\n","\n","        model = BertModel.from_pretrained(DIRETORIO_MODELO,\n","                                          output_attentions=model_args.output_attentions,\n","                                          output_hidden_states=model_args.output_hidden_states)\n","        \n","    else:\n","        # Carregando o Modelo BERT da comunidade\n","        logging.info(\"Carregando o modelo BERT da comunidade {} para cálculo de medidas.\".format(model_args.pretrained_model_name_or_path))\n","\n","        model = BertModel.from_pretrained(model_args.pretrained_model_name_or_path,\n","                                          output_attentions=model_args.output_attentions,\n","                                          output_hidden_states=model_args.output_hidden_states)\n","\n","    return model"]},{"cell_type":"markdown","metadata":{"id":"-uFDhRTZe2Js"},"source":["### Função carrega o BERT"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QVtAUbUBe2iS"},"outputs":[],"source":["def carregaBERT(model_args):\n","    \"\"\" \n","      Carrega o BERT para cálculo de medida ou classificação e retorna o modelo e o tokenizador.\n","      O tipo do model retornado pode ser BertModel ou BertForSequenceClassification, depende do tipo de model_args.\n","    \n","      Parâmetros:\n","        `model_args` - Objeto com os argumentos do modelo.       \n","          - Se model_args = ModeloArgumentosClassificacao deve ser carregado o BERT para classificação(BertForSequenceClassification).\n","          - Se model_args = ModeloArgumentosMedida deve ser carregado o BERT para cálculo de medida(BertModel).\n","\n","      Retorno:    \n","        `model` - Um objeto do modelo BERT carregado.       \n","        `tokenizer` - Um objeto tokenizador BERT carregado.       \n","    \"\"\"\n","            \n","    # Verifica a origem do modelo\n","    DIRETORIO_MODELO = verificaModelo(model_args)\n","    \n","    # Variável para conter o modelo\n","    model = None\n","    \n","    # Carrega o modelo para cálculo da medida\n","    model = carregaModeloMedida(DIRETORIO_MODELO, model_args)\n","                \n","    # Carrega o tokenizador. \n","    # O tokenizador é o mesmo para o classificador e medidor.\n","    tokenizer = carregaTokenizadorModeloPretreinado(DIRETORIO_MODELO, model_args)\n","    \n","    return model, tokenizer"]},{"cell_type":"markdown","metadata":{"id":"x5NTxBRKfAcT"},"source":["### Carrega o BERT"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16232,"status":"ok","timestamp":1669032480439,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"ZYMLJJYSQHY3","outputId":"2655f382-2c38-4b36-c6c7-c95295aa1a0b"},"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:root:Variável URL_MODELO não setada!\n","INFO:root:Usando modelo BERT pré-treinado.\n","INFO:root:Carregando o modelo BERT da comunidade neuralmind/bert-large-portuguese-cased para cálculo de medidas.\n","INFO:root:Carregando o tokenizador BERT do diretório neuralmind/bert-large-portuguese-cased.\n"]}],"source":["# Carrega o modelo e tokenizador do BERT\n","model, tokenizer = carregaBERT(model_args)"]},{"cell_type":"markdown","metadata":{"id":"d7KprWqyZBQZ"},"source":["### Recupera detalhes do BERT"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"D6sPjTQnuQV2"},"outputs":[],"source":["# Verifica o nome do modelo BERT a ser utilizado\n","MODELO_BERT = getNomeModeloBERT(model_args)\n","\n","# Verifica o tamanho do modelo(default large)\n","TAMANHO_BERT = getTamanhoBERT(model_args)"]},{"cell_type":"markdown","metadata":{"id":"khTFfBVbnsx9"},"source":["## 4.4 Funções auxiliares do BERT"]},{"cell_type":"markdown","metadata":{"id":"lCJzsw8T0I-5"},"source":["### concatenaListas"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IpmDZ1mI0JHR"},"outputs":[],"source":["def concatenaListas(lista, pos=1):\n","  lista_concat = []\n","\n","  for x in lista:\n","      lista_concat = lista_concat + x[pos]\n","  \n","  return lista_concat"]},{"cell_type":"markdown","metadata":{"id":"s42mgtmSZ8MR"},"source":["### getEmbeddingsCamadas\n","\n","Funções que recuperam os embeddings das camadas:\n","- Primeira camada;\n","- Penúltima camada;\n","- Ùltima camada;\n","- Soma das 4 últimas camadas;\n","- Concatenação das 4 últimas camadas;\n","- Soma de todas as camadas."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sgo3EBTRZ9-3"},"outputs":[],"source":["def getEmbeddingPrimeiraCamada(output):\n","  # outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","  # hidden_states é uma lista python, e cada elemento um tensor pytorch no formado <lote> x <qtde_tokens> x <768 ou 1024>.\n","      \n","  # Retorna todas a primeira(-1) camada\n","  # Entrada: List das camadas(13 ou 25) (<1(lote)> x <qtde_tokens> <768 ou 1024>)  \n","  resultado = output[2][0]\n","  # Saída: (<1(lote)> x <qtde_tokens> <768 ou 1024>)  \n","  \n","  return resultado\n","\n","def getEmbeddingPenultimaCamada(output):\n","  # outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","  # hidden_states é uma lista python, e cada elemento um tensor pytorch no formado <lote> x <qtde_tokens> x <768 ou 1024>.\n","      \n","  # Retorna todas a primeira(-1) camada\n","  # Entrada: List das camadas(13 ou 25) (<1(lote)> x <qtde_tokens> <768 ou 1024>)  \n","  resultado = output[2][-2]\n","  # Saída: (<1(lote)> x <qtde_tokens> <768 ou 1024>)  \n","  \n","  return resultado\n","\n","def getEmbeddingUltimaCamada(output):\n","  # outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","  # hidden_states é uma lista python, e cada elemento um tensor pytorch no formado <lote> x <qtde_tokens> x <768 ou 1024>.\n","     \n","  # Retorna todas a primeira(-1) camada\n","  # Entrada: List das camadas(13 ou 25) (<1(lote)> x <qtde_tokens> <768 ou 1024>)  \n","  resultado = output[2][-1]\n","  # Saída: (<1(lote)> x <qtde_tokens> <768 ou 1024>)  \n","  \n","  return resultado    \n","\n","def getEmbeddingSoma4UltimasCamadas(output):\n","  # outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","  # hidden_states é uma lista python, e cada elemento um tensor pytorch no formado <lote> x <qtde_tokens> x <768 ou 1024>.\n","      \n","  # Retorna todas a primeira(-1) camada\n","  # Entrada: List das camadas(13 ou 25) (<1(lote)> x <qtde_tokens> <768 ou 1024>)  \n","  embedding_camadas = output[2][-4:]\n","  # Saída: List das camadas(4) (<1(lote)> x <qtde_tokens> <768 ou 1024>)  \n","\n","  # Usa o método `stack` para criar uma nova dimensão no tensor \n","  # com a concateção dos tensores dos embeddings.        \n","  #Entrada: List das camadas(4) (<1(lote)> x <qtde_tokens> <768 ou 1024>)  \n","  resultado_stack = torch.stack(embedding_camadas, dim=0)\n","  # Saída: <4> x <1(lote)> x <qtde_tokens> x <768 ou 1024>\n","  \n","  # Realiza a soma dos embeddings de todos os tokens para as camadas\n","  # Entrada: <4> x <1(lote)> x <qtde_tokens> x <768 ou 1024>\n","  resultado = torch.sum(resultado_stack, dim=0)\n","  # Saida: <1(lote)> x <qtde_tokens> x <768 ou 1024>\n","  \n","  return resultado\n","\n","def getEmbeddingConcat4UltimasCamadas(output):  \n","  # outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","  # hidden_states é uma lista python, e cada elemento um tensor pytorch no formado <lote> x <qtde_tokens> x <768 ou 1024>.\n","      \n","  # Cria uma lista com os tensores a serem concatenados\n","  # Entrada: List das camadas(13 ou 25) (<1(lote)> x <qtde_tokens> x <768 ou 1024>)  \n","  # Lista com os tensores a serem concatenados  \n","  lista_concat = []\n","\n","  # Percorre os 4 últimos\n","  for i in [-1,-2,-3,-4]:\n","      # Concatena da lista\n","      lista_concat.append(output[2][i])\n","\n","  # Saída: Entrada: List das camadas(4) (<1(lote)> x <qtde_tokens> x <768 ou 1024>)    \n","  # Realiza a concatenação dos embeddings de todos as camadas\n","  # Saída: Entrada: List das camadas(4) (<1(lote)> x <qtde_tokens> x <768 ou 1024>)  \n","  resultado = torch.cat(lista_concat, dim=-1)\n","  \n","  # Saída: Entrada: (<1(lote)> x <qtde_tokens> x <3072 ou 4096>)    \n","  return resultado   \n","\n","def getEmbeddingSomaTodasAsCamada(output):\n","  # outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","  # hidden_states é uma lista python, e cada elemento um tensor pytorch no formado <lote> x <qtde_tokens> x <768 ou 1024>.\n","   \n","  # Retorna todas as camadas descontando a primeira(0)\n","  # Entrada: List das camadas(13 ou 25) (<1(lote)> x <qtde_tokens> <768 ou 1024>)  \n","  embedding_camadas = output[2][1:]\n","  # Saída: List das camadas(12 ou 24) (<1(lote)> x <qtde_tokens> <768 ou 1024>)  \n","  \n","  # Usa o método `stack` para criar uma nova dimensão no tensor \n","  # com a concateção dos tensores dos embeddings.        \n","  #Entrada: List das camadas(12 ou 24) (<1(lote)> x <qtde_tokens> <768 ou 1024>)  \n","  resultado_stack = torch.stack(embedding_camadas, dim=0)\n","  # Saída: <12 ou 24> x <1(lote)> x <qtde_tokens> x <768 ou 1024>\n","    \n","  # Realiza a soma dos embeddings de todos os tokens para as camadas\n","  # Entrada: <12 ou 24> x <1(lote)> x <qtde_tokens> x <768 ou 1024>\n","  resultado = torch.sum(resultado_stack, dim=0)\n","  # Saida: <1(lote)> x <qtde_tokens> x <768 ou 1024>\n","    \n","  return resultado"]},{"cell_type":"markdown","metadata":{"id":"q7nx_eZ8hSlr"},"source":["### getEmbeddingsVisual\n","\n","Função para gerar as coordenadas de plotagem a partir das sentenças de embeddings.\n","\n","Existe uma função para os tipos de camadas utilizadas:\n","- Ùltima camada;\n","- Soma das 4 últimas camadas;\n","- Concatenação das 4 últimas camadas;\n","- Soma de todas as camadas."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pLdbOT8-g43V"},"outputs":[],"source":["def getEmbeddingsVisualUltimaCamada(documento, modelo, tokenizer):\n","    \n","    # Adiciona os tokens especiais\n","    documento_marcado = \"[CLS] \" + documento + \" [SEP]\"\n","\n","    # Divide a sentença em tokens\n","    documento_tokenizado = tokenizer.tokenize(documento_marcado)\n","\n","    # Mapeia as strings dos tokens em seus índices do vocabuário    \n","    tokens_indexados = tokenizer.convert_tokens_to_ids(documento_tokenizado)\n","    \n","    # Marca cada um dos tokens como pertencentes à sentença \"1\".\n","    mascara_atencao = [1] * len(documento_tokenizado)\n","\n","    # Converte a entrada em tensores\n","    tokens_tensores = torch.as_tensor([tokens_indexados])\n","    mascara_atencao_tensores = torch.as_tensor([mascara_atencao])\n","    \n","    # Prediz os atributos dos estados ocultos para cada camada\n","    with torch.no_grad():        \n","        # Retorno de model quando ´output_hidden_states=True´ é setado:  \n","        #outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","        outputs = modelo(tokens_tensores, mascara_atencao_tensores)\n","\n","    # Camada embedding    \n","    camada = getEmbeddingUltimaCamada(outputs)\n","\n","    # Remove a dimensão 1, o lote \"batches\".\n","    token_embeddings = torch.squeeze(camada, dim=0)\n","\n","    # Recupera os embeddings dos tokens como um vetor\n","    embeddings = token_embeddings.numpy()\n","\n","    # Converte para um array\n","    W = np.array(embeddings)\n","    # Transforma em um array\n","    B = np.array([embeddings[0], embeddings[-1]])\n","    # Invertee B.T\n","    Bi = np.linalg.pinv(B.T)\n","\n","    #Projeta a palavra no espaço\n","    Wp = np.matmul(Bi,W.T)\n","\n","    return Wp, documento_tokenizado"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eAf9lJJ2hZbt"},"outputs":[],"source":["def getEmbeddingsVisualSoma4UltimasCamadas(documento, modelo, tokenizer):\n","    \n","    # Adiciona os tokens especiais\n","    documento_marcado = \"[CLS] \" + documento + \" [SEP]\"\n","\n","    # Divide a sentença em tokens\n","    documento_tokenizado = tokenizer.tokenize(documento_marcado)\n","\n","    # Mapeia as strings dos tokens em seus índices do vocabuário    \n","    tokens_indexados = tokenizer.convert_tokens_to_ids(documento_tokenizado)\n","    \n","    # Marca cada um dos tokens como pertencentes à sentença \"1\".\n","    mascara_atencao = [1] * len(documento_tokenizado)\n","\n","    # Converte a entrada em tensores\n","    tokens_tensores = torch.as_tensor([tokens_indexados])\n","    mascara_atencao_tensores = torch.as_tensor([mascara_atencao])\n","    \n","    # Prediz os atributos dos estados ocultos para cada camada\n","    with torch.no_grad():        \n","        # Retorno de model quando ´output_hidden_states=True´ é setado:  \n","        #outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","        outputs = modelo(tokens_tensores, mascara_atencao_tensores)\n","\n","    # Camada embedding    \n","    camada = getEmbeddingSoma4UltimasCamadas(outputs)\n","\n","    # Remove a dimensão 1, o lote \"batches\".\n","    token_embeddings = torch.squeeze(camada, dim=0)\n","\n","    # Recupera os embeddings dos tokens como um vetor\n","    embeddings = token_embeddings.numpy()\n","\n","    # Converte para um array\n","    W = np.array(embeddings)\n","    # Transforma em um array\n","    B = np.array([embeddings[0], embeddings[-1]])\n","    # Invertee B.T\n","    Bi = np.linalg.pinv(B.T)\n","\n","    #Projeta a palavra no espaço\n","    Wp = np.matmul(Bi,W.T)\n","\n","    return Wp, documento_tokenizado"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4XpwSN1ghpnz"},"outputs":[],"source":["def getEmbeddingsVisualConcat4UltimasCamadas(documento, modelo, tokenizer):\n","    \n","    # Adiciona os tokens especiais\n","    documento_marcado = \"[CLS] \" + documento + \" [SEP]\"\n","\n","    # Divide a sentença em tokens\n","    documento_tokenizado = tokenizer.tokenize(documento_marcado)\n","\n","    # Mapeia as strings dos tokens em seus índices do vocabuário    \n","    tokens_indexados = tokenizer.convert_tokens_to_ids(documento_tokenizado)\n","    \n","    # Marca cada um dos tokens como pertencentes à sentença \"1\".\n","    mascara_atencao = [1] * len(documento_tokenizado)\n","\n","    # Converte a entrada em tensores\n","    tokens_tensores = torch.as_tensor([tokens_indexados])\n","    mascara_atencao_tensores = torch.as_tensor([mascara_atencao])\n","    \n","    # Prediz os atributos dos estados ocultos para cada camada\n","    with torch.no_grad():        \n","        # Retorno de model quando ´output_hidden_states=True´ é setado:  \n","        #outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","        outputs = modelo(tokens_tensores, mascara_atencao_tensores)\n","\n","    # Camada embedding        \n","    camada = getEmbeddingConcat4UltimasCamadas(outputs)\n","\n","    # Remove a dimensão 1, o lote \"batches\".\n","    token_embeddings = torch.squeeze(camada, dim=0)\n","\n","    # Recupera os embeddings dos tokens como um vetor\n","    embeddings = token_embeddings.numpy()\n","\n","    # Converte para um array\n","    W = np.array(embeddings)\n","    # Transforma em um array\n","    B = np.array([embeddings[0], embeddings[-1]])\n","    # Invertee B.T\n","    Bi = np.linalg.pinv(B.T)\n","\n","    #Projeta a palavra no espaço\n","    Wp = np.matmul(Bi,W.T)\n","\n","    return Wp, documento_tokenizado"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L3KU1EFrnSPK"},"outputs":[],"source":["def getEmbeddingsVisualSomaTodasAsCamadas(documento, modelo, tokenizer):\n","    \n","    # Adiciona os tokens especiais\n","    documento_marcado = \"[CLS] \" + documento + \" [SEP]\"\n","\n","    # Divide a sentença em tokens\n","    documento_tokenizado = tokenizer.tokenize(documento_marcado)\n","\n","    # Mapeia as strings dos tokens em seus índices do vocabuário    \n","    tokens_indexados = tokenizer.convert_tokens_to_ids(documento_tokenizado)\n","    \n","    # Marca cada um dos tokens como pertencentes à sentença \"1\".\n","    mascara_atencao = [1] * len(documento_tokenizado)\n","\n","    # Converte a entrada em tensores\n","    tokens_tensores = torch.as_tensor([tokens_indexados])\n","    mascara_atencao_tensores = torch.as_tensor([mascara_atencao])\n","    \n","    # Prediz os atributos dos estados ocultos para cada camada\n","    with torch.no_grad():        \n","        # Retorno de model quando ´output_hidden_states=True´ é setado:  \n","        #outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","        outputs = modelo(tokens_tensores, mascara_atencao_tensores)\n","\n","    # Camada embedding    \n","    camada = getEmbeddingSomaTodasAsCamada(outputs)\n","\n","    # Remove a dimensão 1, o lote \"batches\".\n","    token_embeddings = torch.squeeze(camada, dim=0)\n","\n","    # Recupera os embeddings dos tokens como um vetor\n","    embeddings = token_embeddings.numpy()\n","\n","    # Converte para um array\n","    W = np.array(embeddings)\n","    # Transforma em um array\n","    B = np.array([embeddings[0], embeddings[-1]])\n","    # Invertee B.T\n","    Bi = np.linalg.pinv(B.T)\n","\n","    #Projeta a palavra no espaço\n","    Wp = np.matmul(Bi,W.T)\n","\n","    return Wp, documento_tokenizado"]},{"cell_type":"markdown","metadata":{"id":"Y8MjE0utzlZT"},"source":["### getEmbeddings\n","\n","Função para gerar os embeddings de sentenças.\n","\n","Existe uma função para os tipos de camadas utilizadas:\n","- Ùltima camada;\n","- Soma das 4 últimas camadas;\n","- Concatenação das 4 últimas camadas;\n","- Soma de todas as camadas."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2QcqOuwS067Q"},"outputs":[],"source":["def getEmbeddingsUltimaCamada(documento, modelo, tokenizer):\n","    \n","    # Adiciona os tokens especiais\n","    documento_marcado = \"[CLS] \" + documento + \" [SEP]\"\n","\n","    # Divide a sentença em tokens\n","    documento_tokenizado = tokenizer.tokenize(documento_marcado)\n","\n","    # Mapeia as strings dos tokens em seus índices do vocabuário    \n","    tokens_indexados = tokenizer.convert_tokens_to_ids(documento_tokenizado)\n","    \n","    # Marca cada um dos tokens como pertencentes à sentença \"1\".\n","    mascara_atencao = [1] * len(documento_tokenizado)\n","\n","    # Converte a entrada em tensores\n","    tokens_tensores = torch.as_tensor([tokens_indexados])\n","    mascara_atencao_tensores = torch.as_tensor([mascara_atencao])\n","    \n","    # Prediz os atributos dos estados ocultos para cada camada\n","    with torch.no_grad():        \n","        # Retorno de model quando ´output_hidden_states=True´ é setado:  \n","        #outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","        outputs = modelo(tokens_tensores, mascara_atencao_tensores)\n","\n","    # Camada embedding    \n","    camada = getEmbeddingUltimaCamada(outputs)\n","\n","    # Remove a dimensão 1, o lote \"batches\".\n","    token_embeddings = torch.squeeze(camada, dim=0)\n"," \n","    return token_embeddings, documento_tokenizado"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BK1wDGBl067Y"},"outputs":[],"source":["def getEmbeddingsSoma4UltimasCamadas(documento, modelo, tokenizer):\n","    \n","    # Adiciona os tokens especiais\n","    documento_marcado = \"[CLS] \" + documento + \" [SEP]\"\n","\n","    # Divide a sentença em tokens\n","    documento_tokenizado = tokenizer.tokenize(documento_marcado)\n","\n","    # Mapeia as strings dos tokens em seus índices do vocabuário    \n","    tokens_indexados = tokenizer.convert_tokens_to_ids(documento_tokenizado)\n","    \n","    # Marca cada um dos tokens como pertencentes à sentença \"1\".\n","    mascara_atencao = [1] * len(documento_tokenizado)\n","\n","    # Converte a entrada em tensores\n","    tokens_tensores = torch.as_tensor([tokens_indexados])\n","    mascara_atencao_tensores = torch.as_tensor([mascara_atencao])\n","    \n","    # Prediz os atributos dos estados ocultos para cada camada\n","    with torch.no_grad():        \n","        # Retorno de model quando ´output_hidden_states=True´ é setado:  \n","        #outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","        outputs = modelo(tokens_tensores, mascara_atencao_tensores)\n","\n","    # Camada embedding    \n","    camada = getEmbeddingSoma4UltimasCamadas(outputs)\n","\n","    # Remove a dimensão 1, o lote \"batches\".\n","    token_embeddings = torch.squeeze(camada, dim=0)\n","   \n","    return token_embeddings, documento_tokenizado"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Hym19Hxr067Y"},"outputs":[],"source":["def getEmbeddingsConcat4UltimasCamadas(documento, modelo, tokenizer):\n","    # Adiciona os tokens especiais\n","    documento_marcado = \"[CLS] \" + documento + \" [SEP]\"\n","\n","    # Divide a sentença em tokens\n","    documento_tokenizado = tokenizer.tokenize(documento_marcado)\n","\n","    # Mapeia as strings dos tokens em seus índices do vocabuário    \n","    tokens_indexados = tokenizer.convert_tokens_to_ids(documento_tokenizado)\n","\n","    # Marca cada um dos tokens como pertencentes à sentença \"1\".\n","    mascara_atencao = [1] * len(documento_tokenizado)\n","    \n","    # Converte a entrada em tensores\n","    tokens_tensores = torch.as_tensor([tokens_indexados])\n","    mascara_atencao_tensores = torch.as_tensor([mascara_atencao])\n","\n","    # Prediz os atributos dos estados ocultos para cada camada\n","    with torch.no_grad():        \n","        # Retorno de model quando ´output_hidden_states=True´ é setado:  \n","        #outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","        outputs = modelo(tokens_tensores, mascara_atencao_tensores)\n","\n","    # Camada embedding    \n","    camada = getEmbeddingConcat4UltimasCamadas(outputs)\n","\n","    # Remove a dimensão 1, o lote \"batches\".\n","    token_embeddings = torch.squeeze(camada, dim=0)\n","\n","    return token_embeddings, documento_tokenizado"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U-PLZiUR067Z"},"outputs":[],"source":["def getEmbeddingsSomaTodasAsCamadas(documento, modelo, tokenizer):\n","    \n","    # Adiciona os tokens especiais\n","    documento_marcado = \"[CLS] \" + documento + \" [SEP]\"\n","\n","    # Divide a sentença em tokens\n","    documento_tokenizado = tokenizer.tokenize(documento_marcado)\n","\n","    # Mapeia as strings dos tokens em seus índices do vocabuário    \n","    tokens_indexados = tokenizer.convert_tokens_to_ids(documento_tokenizado)\n","    \n","    # Marca cada um dos tokens como pertencentes à sentença \"1\".\n","    mascara_atencao = [1] * len(documento_tokenizado)\n","\n","    # Converte a entrada em tensores\n","    tokens_tensores = torch.as_tensor([tokens_indexados])\n","    mascara_atencao_tensores = torch.as_tensor([mascara_atencao])\n","    \n","    # Prediz os atributos dos estados ocultos para cada camada\n","    with torch.no_grad():        \n","        # Retorno de model quando ´output_hidden_states=True´ é setado:  \n","        #outputs[0] = last_hidden_state, outputs[1] = pooler_output, outputs[2] = hidden_states\n","        outputs = modelo(tokens_tensores, mascara_atencao_tensores)\n","\n","    # Camada embedding    \n","    camada = getEmbeddingSomaTodasAsCamada(outputs)\n","\n","    # Remove a dimensão 1, o lote \"batches\".\n","    token_embeddings = torch.squeeze(camada, dim=0)\n","\n","    return token_embeddings, documento_tokenizado"]},{"cell_type":"markdown","metadata":{"id":"Pyra3_pECsoJ"},"source":["### getEmbeddingsDocumento\n","\n","Recupara os embeddings e tokens do documento sem buffer."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XdDBSRDcCxHp"},"outputs":[],"source":["def getEmbeddingsDocumento(documento, modelo, tokenizer):\n","\n","    return getEmbeddingsUltimaCamada(documento, modelo, tokenizer)\n","    # return getEmbeddingsConcat4UltimasCamadas(documento, modelo, tokenizer)\n","    # return getEmbeddingsConcat4UltimasCamadas(documento, modelo, tokenizer)"]},{"cell_type":"markdown","metadata":{"id":"-rLcMuDHC-F5"},"source":["### getEmbeddingsDocumentoBuffer\n","\n","Recupara os embeddings e tokens do documento com buffer."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OogUm0kuC7wK"},"outputs":[],"source":["buffer_token_embeddings = {}\n","\n","def getEmbeddingsDocumentoBuffer(documento, modelo, tokenizer):\n","\n","    # Se documento está no dicionário retorna o embedding e os tokens\n","    if documento in buffer_token_embeddings:\n","        registro_buffer = buffer_token_embeddings.get(documento)\n","        return registro_buffer[0], registro_buffer[1]\n","    else:\n","        # Gera o embedding\n","        token_embeddings, documento_tokenizado = getEmbeddingsDocumento(documento, modelo, tokenizer)        \n","        buffer_token_embeddings.update({documento: [token_embeddings, documento_tokenizado]})\n","\n","        return  token_embeddings, documento_tokenizado"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iTRcghhuet76"},"outputs":[],"source":["def limpaBufferEmbedding():\n","    buffer_token_embeddings.clear()"]},{"cell_type":"markdown","metadata":{"id":"zFd1rse11DpZ"},"source":["### getDocumentoTokenizado \n","\n","Retorna o documento tokenizado"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gvWIBFTLJ7z9"},"outputs":[],"source":["def getDocumentoTokenizado(documento, tokenizer):\n","    \"\"\"\n","      Retorna o documento tokenizado pelo BERT.\n","    \n","      Parâmetros:\n","      `documento` - Documento a ser tokenizado.\n","      `tokenizer` - Tokenizador do BERT.\n","    \"\"\"    \n","\n","    # Adiciona os tokens especiais.\n","    documento_marcado = \"[CLS] \" + documento + \" [SEP]\"\n","\n","    # Documento tokenizado\n","    documento_tokenizado = tokenizer.tokenize(documento_marcado)\n","\n","    del tokenizer\n","\n","    return documento_tokenizado    "]},{"cell_type":"markdown","metadata":{"id":"3wvgXwN81RCz"},"source":["### encontrarIndiceSubLista \n","\n","Retorna os índices de início e fim da sublista na lista"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"abS44M4yvFxf"},"outputs":[],"source":["# Localiza os índices de início e fim de uma sublista em uma lista\n","def encontrarIndiceSubLista(lista, sublista):\n","\n","    \"\"\"\n","      Localiza os índices de início e fim de uma sublista em uma lista.\n","    \n","      Parâmetros:\n","      `lista` - Uma lista.\n","      `sublista` - Uma sublista a ser localizada na lista.\n","    \"\"\"    \n","    # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore%E2%80%93Horspool_algorithm\n","\n","    # Recupera o tamanho da lista \n","    h = len(lista)\n","    # Recupera o tamanho da sublista\n","    n = len(sublista)    \n","    skip = {sublista[i]: n - i - 1 for i in range(n - 1)}\n","    i = n - 1\n","    while i < h:\n","        for j in range(n):\n","            if lista[i - j] != sublista[-j - 1]:\n","                i += skip.get(lista[i], n)\n","                break\n","        else:\n","            indice_inicio = i - n + 1\n","            indice_fim = indice_inicio + len(sublista)-1\n","            return indice_inicio, indice_fim\n","    return -1, -1"]},{"cell_type":"markdown","metadata":{"id":"kGL37G6XFcwp"},"source":["### getEmbeddingSentencaEmbeddingDocumentoComTodasPalavras\n","\n","A partir dos embeddings do documento, localiza o indíce de início e fim de uma sentença no documento e retorna os embeddings da sentença."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uI07Y_M8__HG"},"outputs":[],"source":["def getEmbeddingSentencaEmbeddingDocumentoComTodasPalavras(embedding_documento, \n","                                                           token_BERT_documento, \n","                                                           sentenca, \n","                                                           tokenizer):\n","\n","  # Tokeniza a sentença\n","  sentenca_tokenizada_BERT = getDocumentoTokenizado(sentenca, tokenizer)\n","  print(sentenca_tokenizada_BERT)\n","\n","  # Remove os tokens de início e fim da sentença\n","  sentenca_tokenizada_BERT.remove(\"[CLS]\")\n","  sentenca_tokenizada_BERT.remove(\"[SEP]\")    \n","  print(len(sentenca_tokenizada_BERT))\n","  \n","  # Localiza os índices dos tokens da sentença no documento\n","  inicio, fim = encontrarIndiceSubLista(token_BERT_documento, sentenca_tokenizada_BERT)\n","  print(inicio,fim) \n"," \n","  # Recupera os embeddings dos tokens da sentença a partir dos embeddings do documento\n","  embedding_sentenca = embedding_documento[inicio:fim+1]\n","  #print(\"embedding_sentenca=\", embedding_sentenca.shape)\n","\n","  del embedding_documento\n","  del token_BERT_documento  \n","  del sentenca\n","  del tokenizer\n","  \n","  # Retorna o embedding da sentença no documento\n","  return embedding_sentenca, sentenca_tokenizada_BERT"]},{"cell_type":"markdown","metadata":{"id":"THFhXGGmIO_r"},"source":["### getEmbeddingDocumentoComTodasPalavrasMean"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IhW_OiEsIPJI"},"outputs":[],"source":["# Importa a biblioteca\n","import torch\n","\n","def getEmbeddingDocumentoComTodasPalavrasMean(embedding_documento):\n","  \"\"\"\n","    Calcula a média dos embeddings do documento excluindo os tokens \n","    especiais [CLS] do início e [SEP] do fim.\n","    Remove primeira dimensão devido ao cálculo da média.\n","    \n","    Parâmetros:\n","    `embedding_documento` - Embedding do documento.\n","  \"\"\"\n","\n","  # Calcula a média dos embeddings para os tokens de embedding_documento, removendo a primeira dimensão.\n","  # Entrada: <qtde_tokens> x <768 ou 1024>  \n","  #print(\"embedding_documento1=\", embedding_documento.shape)\n","  media_embedding_documento = torch.mean(embedding_documento[1:-1], dim=0)    \n","  # Saída: <768 ou 1024>\n","\n","  del embedding_documento\n","\n","  return media_embedding_documento"]},{"cell_type":"markdown","metadata":{"id":"i7C6tZjpkuQz"},"source":["### getEmbeddingDocumentoSemStopWordMean"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sT1NB5zDkub1"},"outputs":[],"source":["# Importa a biblioteca\n","import torch\n","\n","def getEmbeddingDocumentoSemStopWordMean(id_documento,\n","                                         index_sentenca, \n","                                         embedding_documento, \n","                                         token_BERT_documento, \n","                                         documento, \n","                                         tokenizer,\n","                                         token_documento, \n","                                         postagging_documento):\n","  \"\"\"\n","    Calcula a média dos embeddings do documento considerando tokens do tipo \n","    especificado no filtro\n","    Remove primeira dimensão devido ao cálculo da média.\n","    \n","    Parâmetros:    \n","    `embedding_documento` - Embeddings do documento gerados pelo BERT.\n","    `token_BERT_documento` - Lista com os tokens do documento gerados pelo tokenizador BERT.\n","    `documento` - Texto com o documento.\n","    `tokenizer` - Tokenizador do BERT.\n","    `token_documento` - Lista com os tokens do documento.\n","    `postagging_documento` - Lista com as POS-Tagging do documento.\n","  \"\"\"  \n","   \n","  # Recupera a lista de tokens do documento, a lista dos postagging e a lista dos seus embeddings com um mesmo tamanho\n","  lista_tokens, lista_postagging, lista_embeddings_mean, lista_embeddings_max = getTokensEmbeddingsPOSSentenca(id_documento, \n","                                                                                                               index_sentenca, \n","                                                                                                               embedding_documento, \n","                                                                                                               token_BERT_documento, \n","                                                                                                               documento,\n","                                                                                                               tokenizer, \n","                                                                                                               token_documento, \n","                                                                                                               postagging_documento)\n","\n","  #print(\"len(token_BERT_documento):\", len(token_BERT_documento))\n","  #print(\"token_BERT_documento:\", token_BERT_documento)\n","  #print(\"len(postagging_documento):\", len(postagging_documento))\n","  #print(\"postagging_documento:\", postagging_documento)\n","  #print(\"filtro:\", filtro)\n","  #print()  \n","  # Lista com os tensores selecionados\n","  lista_tokens_selecionados_mean = []\n","\n","  # Localizar os embeddings dos tokens da sentença tokenizada sem stop word no documento  \n","  for i, token_documento in enumerate(lista_tokens):           \n","      if lista_tokens[i].lower() not in getStopwords(nlp):  \n","          #print(\"Adicionando palavra do embedding:\", lista_tokens[i])\n","          lista_tokens_selecionados_mean.append(lista_embeddings_mean[i])\n","    \n","  if  len(lista_tokens_selecionados_mean) != 0:\n","      # Empilha os embeddings da lista pela dimensão 0\n","      embedding_sem_stopword = torch.stack(lista_tokens_selecionados_mean, dim=0)\n","      #print(\"embedding_sem_stopword.shape:\",embedding_sem_stopword.shape)\n","\n","      # Calcula a média dos embeddings para os tokens de Si, removendo a primeira dimensão.\n","      # Entrada: <qtde_tokens> x <768 ou 1024>  \n","      media_embedding_sem_stopword = torch.mean(embedding_sem_stopword, dim=0)    \n","      # Saída: <768 ou 1024>\n","      #print(\"media_embedding_sem_stopword.shape:\", media_embedding_sem_stopword.shape)\n","  else:\n","      media_embedding_sem_stopword = None\n","\n","  del embedding_documento\n","  del token_BERT_documento\n","  del documento\n","  del tokenizer\n","  del token_documento\n","  del postagging_documento\n","\n","  return media_embedding_sem_stopword"]},{"cell_type":"markdown","metadata":{"id":"1Ko_of60YuNd"},"source":["### getEmbeddingDocumentoRelevanteMean"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wDokSSODY0Sf"},"outputs":[],"source":["# Importa a biblioteca\n","import torch\n","\n","def getEmbeddingDocumentoRelevanteMean(id_documento, \n","                                       index_sentenca, \n","                                       embedding_documento, \n","                                       token_BERT_documento, \n","                                       documento, \n","                                       tokenizer,\n","                                       token_documento, \n","                                       postagging_documento, \n","                                       filtro):\n","  \"\"\"\n","    Calcula a média dos embeddings do documento considerando tokens do tipo \n","    especificado no filtro\n","    Remove primeira dimensão devido ao cálculo da média.\n","    \n","    Parâmetros:    \n","    `embedding_documento` - Embeddings do documento gerados pelo BERT.\n","    `token_BERT_documento` - Lista com os tokens do documento gerados pelo tokenizador BERT.\n","    `documento` - Texto com o documento.\n","    `tokenizer` - Tokenizador do BERT.\n","    `token_documento` - Lista com os tokens do documento.\n","    `postagging_documento` - Lista com as POS-Tagging do documento.\n","    `filtro` - Filtro dos embeddings.\n","\n","  \"\"\"  \n","   \n","  # Recupera a lista de tokens do documento, a lista dos postagging e a lista dos seus embeddings com um mesmo tamanho\n","  lista_tokens, lista_postagging, lista_embeddings_mean, lista_embeddings_max = getTokensEmbeddingsPOSSentenca(id_documento, \n","                                                                                                               index_sentenca, \n","                                                                                                               embedding_documento, \n","                                                                                                               token_BERT_documento, \n","                                                                                                               documento,\n","                                                                                                               tokenizer, \n","                                                                                                               token_documento, \n","                                                                                                               postagging_documento)\n","\n","  #print(\"len(token_BERT_documento):\", len(token_BERT_documento))\n","  #print(\"token_BERT_documento:\", token_BERT_documento)\n","  #print(\"len(postagging_documento):\", len(postagging_documento))\n","  #print(\"postagging_documento:\", postagging_documento)\n","  #print(\"filtro:\", filtro)\n","  #print()\n","\n","  # Lista com os tensores selecionados\n","  lista_tokens_selecionados = []\n","  # Localizar os embeddings dos tokens da sentença tokenizada sem stop word no documento  \n","  for i, token_documento in enumerate(lista_tokens):     \n","    if (lista_postagging[i] in filtro):          \n","      #print(\"Adicionando palavra do embedding:\", lista_tokens[i])\n","      lista_tokens_selecionados.append(lista_embeddings_mean[i])\n","\n","  if len(lista_tokens_selecionados) != 0:\n","      # Empila os embeddings da lista pela dimensão 0\n","      embedding_relevante = torch.stack(lista_tokens_selecionados, dim=0)\n","      #print(\"embedding_relevante.shape:\",embedding_relevante.shape)\n","\n","      # Calcula a média dos embeddings para os tokens de Si, removendo a primeira dimensão.\n","      # Entrada: <qtde_tokens> x <768 ou 1024>  \n","      media_embedding_relevante = torch.mean(embedding_relevante, dim=0)    \n","      # Saída: <768 ou 1024>\n","      #print(\"media_embedding_relevante.shape:\", media_embedding_relevante.shape)\n","  else:\n","      media_embedding_relevante = None\n","\n","  del embedding_documento\n","  del token_BERT_documento\n","  del documento\n","  del tokenizer\n","  del token_documento\n","  del postagging_documento\n","\n","  return media_embedding_relevante"]},{"cell_type":"markdown","metadata":{"id":"L_vknrk7YSpF"},"source":["### getEmbeddingDocumentoMean\n","\n","Filtros:\n","- ALL - Sentença com todas as palavras\n","- CLEAN - Sentença com todas as palavras menos as stopwords\n","- VERB,AUX - Sentença somente com verbos(VERB e AUX)\n","- NOUN - Sentença somente com substantivos\n","- VERB,NOUN,AUX - Sentença somente com verbos(VERB e AUX) e substantivos"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Pd8B76YyYS02"},"outputs":[],"source":["def getEmbeddingDocumentoMean(id_documento, \n","                              index_sentenca, \n","                              embedding_documento, \n","                              token_BERT_documento, \n","                              documento, \n","                              tokenizer,\n","                              token_documento, \n","                              postagging_documento, \n","                              filtro=[\"ALL\"]):  \n","  \"\"\"\n","    Rediciona o cálculo da média dos embeddings de acordo com o filtro especificado.\n","    \n","    Parâmetros:    \n","    `embedding_documento` - Embeddings do documento gerados pelo BERT.\n","    `token_BERT_documento` - Lista com os tokens do documento gerados pelo tokenizador BERT.\n","    `documento` - Texto com o documento.\n","    `tokenizer` - Tokenizador do BERT.\n","    `token_documento` - Lista com os tokens do documento.\n","    `postagging_documento` - Lista com as POS-Tagging do documento.\n","    `filtro` - Filtro dos embeddings.\n","  \"\"\"\n","\n","  if \"ALL\" in filtro:\n","    return getEmbeddingDocumentoComTodasPalavrasMean(embedding_documento)\n","  else:\n","    if \"CLEAN\" in filtro:\n","      return getEmbeddingDocumentoSemStopWordMean(id_documento, \n","                                                  index_sentenca, \n","                                                  embedding_documento, \n","                                                  token_BERT_documento, \n","                                                  documento, \n","                                                  tokenizer,\n","                                                  token_documento,\n","                                                  postagging_documento)\n","    else:\n","      return getEmbeddingDocumentoRelevanteMean(id_documento, \n","                                                index_sentenca, \n","                                                embedding_documento, \n","                                                token_BERT_documento, \n","                                                documento, \n","                                                tokenizer,\n","                                                token_documento, \n","                                                postagging_documento, \n","                                                filtro)"]},{"cell_type":"markdown","metadata":{"id":"t1PgxcL01VfF"},"source":["### getTokensEmbeddingsPOSSentenca\n","Gera os tokens, POS e embeddings de cada sentença."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rBkcF2ve1VfG"},"outputs":[],"source":["# Dicionário de tokens de exceções e seus deslocamentos para considerar mais tokens do BERT em relação ao spaCy\n","# A tokenização do BERT gera mais tokens que a tokenização das palavras do spaCy\n","dic_excecao_maior = {\"\":-1,\n","                    }"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fXJk5Od51VfI"},"outputs":[],"source":["def getExcecaoDicMaior(token, dic_excecao_maior):   \n","    \n","  valor = dic_excecao_maior.get(token)\n","  if valor != None:\n","      return valor\n","  else:\n","      return -1"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M6TSm62Y1VfI"},"outputs":[],"source":["# Dicionário de tokens de exceções e seus deslocamentos para considerar menos tokens do BERT em relação ao spaCy\n","# A tokenização do BERT gera menos tokens que a tokenização das palavras do spaCy\n","dic_excecao_menor = {\"1°\":1,\n","                    }"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7OYmoFVk1VfJ"},"outputs":[],"source":["def getExcecaoDicMenor(token, dic_excecao_menor):   \n","    \n","  valor = dic_excecao_menor.get(token)\n","  if valor != None:\n","      return valor\n","  else:\n","      return -1"]},{"cell_type":"markdown","metadata":{"id":"JzYA5pPE1VfJ"},"source":["Função que retorna os embeddings, tokens e POS da sentença com um mesmo tamanho."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"W9H1JlTt1VfK"},"outputs":[],"source":["# Importa a biblioteca\n","import torch\n","\n","def getTokensEmbeddingsPOSSentenca(id_documento, \n","                                   index_sentenca, \n","                                   embedding_documento, \n","                                   token_BERT_documento, \n","                                   sentenca, \n","                                   tokenizer, \n","                                   sentenca_token = None, \n","                                   sentenca_postagging = None, \n","                                   estrategia_medida = 0):\n","    \"\"\"    \n","      Retorna os tokens, as POS-Tagging e os embeddings dos tokens igualando a quantidade de tokens do spaCy com a tokenização do BERT de acordo com a estratégia de pooling para palavras fora do vocabulário do BERT. \n","      Usa a estratégia MEAN para calcular a média dos embeddings dos tokens que formam uma palavra fora do vocabulário do BERT.\n","      Usa a estratégia MAX para calcular o valor máximo dos embeddings dos tokens que formam uma palavra fora do vocabulário do BERT.\n","    \"\"\"\n","   \n","    #Guarda os tokens e embeddings\n","    lista_tokens = []\n","    lista_embeddings_mean = []\n","    lista_embeddings_max = []\n","\n","    # Se a sentença não for tokenizada \n","    if sentenca_token == None:\n","      # Gera a tokenização e POS-Tagging da sentença    \n","      sentenca_token, sentenca_postagging = getListaTokensPOSSentenca(sentenca)\n","\n","    # print(\"\\nsentenca                :\",sentenca)    \n","    # print(\"id_documento                :\",id_documento)\n","    # print(\"index_sentenca              :\",index_sentenca)    \n","    # print(\"sentenca_token              :\",sentenca_token)\n","    # print(\"len(sentenca_token)         :\",len(sentenca_token))    \n","    # print(\"sentenca_postagging         :\",sentenca_postagging)\n","    # print(\"len(sentenca_postagging)    :\",len(sentenca_postagging))\n","\n","    print(\"token_BERT_documento\", token_BERT_documento)\n","    print(\"sentenca\", sentenca)\n","\n","    \n","    # Recupera os embeddings da sentença dos embeddings dentro dos embeddings do documento    \n","    embedding_sentenca, sentenca_tokenizada_BERT = getEmbeddingSentencaEmbeddingDocumentoComTodasPalavras(embedding_documento, \n","                                                                                                       token_BERT_documento, \n","                                                                                                       sentenca, \n","                                                                                                       tokenizer)\n","    \n","    # embedding <qtde_tokens x 4096>        \n","    #print(\"embedding_sentenca          :\",embedding_sentenca.shape)\n","    #print(\"sentenca_tokenizada_BERT     :\",sentenca_tokenizada_BERT)\n","    #print(\"len(sentenca_tokenizada_BERT):\",len(sentenca_tokenizada_BERT))\n","\n","    # Seleciona os pares de palavra a serem avaliadas\n","    pos_wi = 0 # Posição do token da palavra gerado pelo spaCy\n","    pos_wj = pos_wi # Posição do token da palavra gerado pelo BERT\n","    pos2 = -1\n","\n","    # Enquanto o indíce da palavra pos_wj(2a palavra) não chegou ao final da quantidade de tokens do BERT\n","    while pos_wj < len(sentenca_tokenizada_BERT):  \n","\n","      # Seleciona os tokens da sentença\n","      wi = sentenca_token[pos_wi] # Recupera o token da palavra gerado pelo spaCy\n","      wi1 = \"\"\n","      pos2 = -1\n","      if pos_wi+1 < len(sentenca_token):\n","        wi1 = sentenca_token[pos_wi+1] # Recupera o próximo token da palavra gerado pelo spaCy\n","  \n","        # Localiza o deslocamento da exceção\n","        pos2 = getExcecaoDicMenor(wi+wi1, dic_excecao_menor)  \n","        #print(\"Exceção pos2:\", pos2)\n","\n","      wj = sentenca_tokenizada_BERT[pos_wj] # Recupera o token da palavra gerado pelo BERT\n","      #print(\"wi[\",pos_wi,\"]=\", wi)\n","      #print(\"wj[\",pos_wj,\"]=\", wj)\n","\n","      # Tratando exceções\n","      # Localiza o deslocamento da exceção      \n","      pos = getExcecaoDicMaior( wi, dic_excecao_maior)  \n","      #print(\"Exceção pos:\", pos)\n","            \n","      if pos != -1 or pos2 != -1:      \n","        if pos != -1:\n","          #print(\"Adiciona 1 Exceção palavra == wi or palavra = [UNK]:\",wi)\n","          lista_tokens.append(wi)          \n","          # Verifica se tem mais de um token\n","          if pos != 1:\n","            indice_token = pos_wj + pos\n","            #print(\"Calcula a média de :\", pos_wj , \"até\", indice_token)\n","            embeddings_tokens_palavra = embedding_sentenca[pos_wj:indice_token]\n","            #print(\"embeddings_tokens_palavra:\",embeddings_tokens_palavra.shape)\n","            # calcular a média dos embeddings dos tokens do BERT da palavra\n","            embedding_estrategia_mean = torch.mean(embeddings_tokens_palavra, dim=0)\n","            #print(\"embedding_estrategia_mean:\",embedding_estrategia_mean.shape)\n","            lista_embeddings_mean.append(embedding_estrategia_mean)\n","\n","            # calcular o máximo dos embeddings dos tokens do BERT da palavra\n","            embedding_estrategia_max, linha = torch.max(embeddings_tokens_palavra, dim=0)\n","            #print(\"embedding_estrategia_max:\",embedding_estrategia_max.shape)\n","            lista_embeddings_max.append(embedding_estrategia_max)\n","          else:\n","            # Adiciona o embedding do token a lista de embeddings\n","            lista_embeddings_mean.append(embedding_sentenca[pos_wj])            \n","            lista_embeddings_max.append(embedding_sentenca[pos_wj])\n","         \n","          # Avança para a próxima palavra e token do BERT\n","          pos_wi = pos_wi + 1\n","          pos_wj = pos_wj + pos\n","          #print(\"Proxima:\")            \n","          #print(\"wi[\",pos_wi,\"]=\", sentenca_token[pos_wi])\n","          #print(\"wj[\",pos_wj,\"]=\", sentenca_tokenizada_BERT[pos_wj])\n","        else:\n","          if pos2 != -1:\n","            #print(\"Adiciona 1 Exceção palavra == wi or palavra = [UNK]:\",wi)\n","            lista_tokens.append(wi+wi1)          \n","            # Verifica se tem mais de um token\n","            if pos2 == 1: \n","              # Adiciona o embedding do token a lista de embeddings\n","              lista_embeddings_mean.append(embedding_sentenca[pos_wj])\n","              lista_embeddings_max.append(embedding_sentenca[pos_wj])\n","          \n","            # Avança para a próxima palavra e token do BERT\n","            pos_wi = pos_wi + 2\n","            pos_wj = pos_wj + pos2\n","            #print(\"Proxima:\")            \n","            #print(\"wi[\",pos_wi,\"]=\", sentenca_token[pos_wi])\n","            #print(\"wj[\",pos_wj,\"]=\", sentenca_tokenizada_BERT[pos_wj])\n","      else:  \n","        # Tokens iguais adiciona a lista, o token não possui subtoken\n","        if (wi == wj or wj==\"[UNK]\"):\n","          # Adiciona o token a lista de tokens\n","          #print(\"Adiciona 2 wi==wj or wj==[UNK]:\", wi )\n","          lista_tokens.append(wi)          \n","          # Adiciona o embedding do token a lista de embeddings\n","          lista_embeddings_mean.append(embedding_sentenca[pos_wj])\n","          lista_embeddings_max.append(embedding_sentenca[pos_wj])\n","          #print(\"embedding1[pos_wj]:\", embedding_sentenca[pos_wj].shape)\n","          # Avança para a próxima palavra e token do BERT\n","          pos_wi = pos_wi + 1\n","          pos_wj = pos_wj + 1   \n","              \n","        else:          \n","          # A palavra foi tokenizada pelo Wordpice com ## ou diferente do spaCy ou desconhecida\n","          # Inicializa a palavra a ser montada          \n","          palavra_postagging = wj\n","          indice_token = pos_wj + 1                 \n","          while  ((palavra_postagging != wi) and indice_token < len(sentenca_tokenizada_BERT)):\n","              if \"##\" in sentenca_tokenizada_BERT[indice_token]:\n","                # Remove os caracteres \"##\" do token\n","                parte = sentenca_tokenizada_BERT[indice_token][2:]\n","              else:                \n","                parte = sentenca_tokenizada_BERT[indice_token]\n","              \n","              palavra_postagging = palavra_postagging + parte\n","              #print(\"palavra_postagging:\",palavra_postagging)\n","              # Avança para o próximo token do BERT\n","              indice_token = indice_token + 1\n","\n","          #print(\"\\nMontei palavra:\",palavra_postagging)\n","          if (palavra_postagging == wi or palavra_postagging == \"[UNK]\"):\n","              # Adiciona o token a lista\n","              #print(\"Adiciona 3 palavra == wi or palavra_postagging = [UNK]:\",wi)\n","              lista_tokens.append(wi)\n","              # Calcula a média dos tokens da palavra\n","              #print(\"Calcula o máximo :\", pos_wj , \"até\", indice_token)\n","              embeddings_tokens_palavra = embedding_sentenca[pos_wj:indice_token]\n","              #print(\"embeddings_tokens_palavra2:\",embeddings_tokens_palavra)\n","              #print(\"embeddings_tokens_palavra2:\",embeddings_tokens_palavra.shape)\n","              \n","              # calcular a média dos embeddings dos tokens do BERT da palavra\n","              embedding_estrategia_mean = torch.mean(embeddings_tokens_palavra, dim=0)        \n","              #print(\"embedding_estrategia_mean:\",embedding_estrategia_mean)\n","              #print(\"embedding_estrategia_mean.shape:\",embedding_estrategia_mean.shape)      \n","              lista_embeddings_mean.append(embedding_estrategia_mean)\n","             \n","              # calcular o valor máximo dos embeddings dos tokens do BERT da palavra\n","              embedding_estrategia_max, linha = torch.max(embeddings_tokens_palavra, dim=0)\n","              #print(\"embedding_estrategia_max:\",embedding_estrategia_max)\n","              #print(\"embedding_estrategia_max.shape:\",embedding_estrategia_max.shape)     \n","              lista_embeddings_max.append(embedding_estrategia_max)\n","\n","          # Avança para o próximo token do spaCy\n","          pos_wi = pos_wi + 1\n","          # Pula para o próximo token do BERT\n","          pos_wj = indice_token\n","    \n","    # Verificação se as listas estão com o mesmo tamanho\n","    #if (len(lista_tokens) != len(sentenca_token)) or (len(lista_embeddings_mean) != len(sentenca_token)):\n","    if (len(lista_tokens) !=  len(lista_embeddings_mean)):\n","       print(\"\\nsentenca                  :\",sentenca)  \n","       print(\"id_documento              :\",id_documento)     \n","       print(\"index_sentenca            :\",index_sentenca)\n","       print(\"sentenca_postagging       :\",sentenca_postagging)\n","       print(\"sentenca_token            :\",sentenca_token)\n","       print(\"sentenca_tokenizada_BERT  :\",sentenca_tokenizada_BERT)\n","       print(\"lista_tokens              :\",lista_tokens)        \n","       print(\"len(lista_tokens)         :\",len(lista_tokens))       \n","       print(\"lista_embeddings_mean     :\",lista_embeddings_mean)\n","       print(\"len(lista_embeddings_mean):\",len(lista_embeddings_mean))\n","       print(\"lista_embeddings_max      :\",lista_embeddings_max)\n","       print(\"len(lista_embeddings_max) :\",len(lista_embeddings_max))\n","\n","    del embedding_sentenca\n","    del token_BERT_documento\n","    del tokenizer\n","    del sentenca_tokenizada_BERT\n","    del sentenca_token\n","\n","    return lista_tokens, sentenca_postagging, lista_embeddings_mean, lista_embeddings_max"]},{"cell_type":"markdown","metadata":{"id":"JplTToZvDLiX"},"source":["## Similaridade de cosseno entre os embeddings das sentenças"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eERVKqh2uk6S"},"outputs":[],"source":["# Import das bibliotecas.\n","from scipy.spatial.distance import cosine\n","\n","def similaridadeCoseno(embeddings1, embeddings2):\n","    \"\"\"\n","    Similaridade do cosseno dos embeddgins dos textos.\n","    \n","    Parâmetros:\n","    `embeddings1` - Um embedding a ser medido.\n","    `embeddings2` - Um embedding a ser medido.\n","    \"\"\"\n","    \n","    similaridade = 1 - cosine(embeddings1, embeddings2)\n","    \n","    return similaridade"]},{"cell_type":"markdown","metadata":{"id":"xKaqQPs8VQ5u"},"source":["### 5.2.1 Medidas de similaridade \n"]},{"cell_type":"markdown","metadata":{"id":"jt06PTN5idrg"},"source":["Similaridade do cosseno entre os embeddings.\n","\n","https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.cosine.html#scipy.spatial.distance.cosine\n","\n","A função spatial.distance.cosine do módulo scipy calcula a distância em vez da similaridade do cosseno, mas para conseguir isso, podemos subtrair o valor da distância de 1.\n","\n","Intervalo de [-1,1] \n","\n","Vetores iguais a distância é igual 1.\n","\n","Vetores diferentes medida próxima de -1."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6vbXj-brOlMF"},"outputs":[],"source":["# Import das bibliotecas.\n","from scipy.spatial.distance import cosine\n","\n","def similaridadeCosseno(embeddings1, embeddings2):\n","    \"\"\"\n","      Similaridade do cosseno dos embeddings dos textos.\n","    \n","      Parâmetros:\n","      `embeddings1` - Um embedding a ser medido.\n","      `embeddings2` - Um embedding a ser medido.\n","    \"\"\"\n","    \n","    similaridade = 1 - cosine(embeddings1, embeddings2)\n","    \n","    return similaridade"]},{"cell_type":"markdown","metadata":{"id":"fazAuLMUr_c0"},"source":["### 5.2.2 Medidas de distância "]},{"cell_type":"markdown","metadata":{"id":"_IcrjAbhwake"},"source":["Distância euclidiana entre os embeddings.\n","\n","Possui outros nomes como distância L2 ou norma L2.\n","\n","https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.euclidean.html#scipy.spatial.distance.euclidean"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mIrTId9jwakh"},"outputs":[],"source":["# Import das bibliotecas.\n","from scipy.spatial.distance import euclidean\n","\n","def distanciaEuclidiana(embeddings1, embeddings2):\n","    \"\"\"\n","    Distância euclidiana entre os embeddings dos textos.\n","    Possui outros nomes como distância L2 ou norma L2.\n","    \n","    Parâmetros:\n","    `embeddings1` - Um embedding a ser medido.\n","    `embeddings2` - Um embedding a ser medido.\n","    \"\"\"\n","    \n","    distancia = euclidean(embeddings1, embeddings2)\n","    \n","    return distancia"]},{"cell_type":"markdown","metadata":{"id":"-uJlqYCSXdVk"},"source":["Distância Manhattan entre os embeddings.\n","\n","Possui outros nomes como distância Cityblock, distância L1, norma L1 e métrica do táxi.\n","\n","https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.cityblock.html#scipy.spatial.distance.cityblock"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jFG5UT_SXdVn"},"outputs":[],"source":["# Import das bibliotecas.\n","from scipy.spatial.distance import cityblock\n","\n","def distanciaManhattan(embeddings1, embeddings2):\n","    \"\"\"\n","    Distância Manhattan entre os embeddings dos textos \n","    Possui outros nomes como distância Cityblock, distância L1, norma L1 e métrica do táxi.\n","    \n","    Parâmetros:\n","    `embeddings1` - Um embedding a ser medido.\n","    `embeddings2` - Um embedding a ser medido.\n","    \"\"\"\n","    \n","    distancia = cityblock(embeddings1, embeddings2)\n","\n","    return distancia"]},{"cell_type":"markdown","metadata":{"id":"S6A6-Xwg8GJw"},"source":["### 5.2.3 Retorna as medidas dos embeddings"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qHzQ98zg8GWJ"},"outputs":[],"source":["def getMedidasEmbedding(embedding_wi, embedding_wj):\n","\n","  \"\"\"\n","    Retorna as medidas de similaridade do cosseno(cos), distância Euclidiana(euc) e \n","    distância de Manhattan(man) entre os embeddings.\n","        \n","    Parâmetros:\n","    `embeddings_wi` - Um embedding de uma palavra a ser medido.\n","    `embeddings_wj` - Um embedding de uma palavra a ser medido.\n","  \"\"\"\n"," \n","  #print(\"embedding_wi=\", embedding_wi.shape) \n","  #print(\"embedding_wj=\", embedding_wj.shape)\n","\n","  # Similaridade do cosseno entre os embeddings wi e wj\n","  # Entrada: (<768 ou 1024>) x (<768 ou 1024>)\n","  cos = similaridadeCosseno(embedding_wi, embedding_wj)\n","  # Saída: Número real\n","\n","  # Distância euclidiana entre os embeddings wi e wj\n","  # Entrada: (<768 ou 1024>) x (<768 ou 1024>)\n","  euc = distanciaEuclidiana(embedding_wi, embedding_wj)\n","  # Saída: Número real\n","\n","  # Distância de manhattan entre os embeddings wi e wj\n","  # Entrada: (<768 ou 1024>) x (<768 ou 1024>)\n","  man = distanciaManhattan(embedding_wi, embedding_wj)\n","  # Saída: Número real\n","  \n","  del embedding_wi\n","  del embedding_wj\n","\n","  # Retorno das medidas das sentenças\n","  return cos, euc, man"]},{"cell_type":"markdown","metadata":{"id":"Y7W-7V3QFbpR"},"source":["\n","# 3 Carrega dados"]},{"cell_type":"markdown","metadata":{"id":"oQUy9Tat2EF_"},"source":["## 3.1 Carregamento dos arquivos de dados originais e permutados"]},{"cell_type":"markdown","metadata":{"id":"bD_tNbBGPrnE"},"source":["### 3.1.1 Especifica os nomes dos arquivos de dados\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bNgwJRC2uGJb"},"outputs":[],"source":["# Nome do arquivo\n","# Nome do arquivo original\n","NOME_ARQUIVO_DOCUMENTO_FILTRADO = \"original_filtrado1.csv\"\n","NOME_ARQUIVO_DOCUMENTO_FILTRADO = \"original_filtrado2.csv\"\n","\n","NOME_ARQUIVO_DOCUMENTO_FILTRADO_COMPACTADO = \"original_filtrado1.zip\"\n","NOME_ARQUIVO_DOCUMENTO_FILTRADO_COMPACTADO = \"original_filtrado2.zip\""]},{"cell_type":"markdown","metadata":{"id":"I0LsmsBlJeeV"},"source":["### 3.1.2 Cria o diretório local para receber os dados"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":31,"status":"ok","timestamp":1669032481655,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"gFYIHcIHE985","outputId":"15bf1d4b-717a-47fa-882f-704a45722943"},"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:root:Diretório já existe: /content/MODERNIST\n"]}],"source":["# Importando as bibliotecas.\n","import os\n","\n","# Cria o diretório para receber os arquivos Originais e Permutados\n","# Diretório a ser criado\n","dirbase = DIRETORIO_LOCAL[:-1]\n","\n","if not os.path.exists(dirbase):  \n","    # Cria o diretório\n","    os.makedirs(dirbase)    \n","    logging.info(\"Diretório criado: {}\".format(dirbase))\n","else:    \n","    logging.info(\"Diretório já existe: {}\".format(dirbase))"]},{"cell_type":"markdown","metadata":{"id":"D8A9syejCsD2"},"source":["### 3.1.3 Copia os arquivos do Google Drive para o Colaboratory"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":265,"status":"ok","timestamp":1669032481911,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"pviuxToMCxQw","outputId":"a27f7700-2709-4507-9ff1-35e87cd1264c"},"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:root:Terminei a cópia.\n"]}],"source":["# Se estiver executando no Google Colaboratory\n","if IN_COLAB:\n","\n","  !cp \"$DIRETORIO_DRIVE$NOME_ARQUIVO_DOCUMENTO_FILTRADO_COMPACTADO\" \"$DIRETORIO_LOCAL\"\n","\n","  logging.info(\"Terminei a cópia.\")"]},{"cell_type":"markdown","metadata":{"id":"rFCvZ6CUmt-9"},"source":["Descompacta os arquivos.\n","\n","Usa o unzip para descompactar:\n","*   `-o` sobrescreve o arquivo se existir\n","*   `-j` Não cria nenhum diretório\n","*   `-q` Desliga as mensagens \n","*   `-d` Diretório de destino\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":793,"status":"ok","timestamp":1669032482696,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"dbHl3d88mouc","outputId":"3958a26c-e3a8-4408-d587-32a1aeb678ea"},"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:root:Terminei a descompactação.\n"]}],"source":["# Se estiver executando no Google Colaboratory\n","if IN_COLAB:\n","  !unzip -o -j -q \"$DIRETORIO_LOCAL$NOME_ARQUIVO_DOCUMENTO_FILTRADO_COMPACTADO\" -d \"$DIRETORIO_LOCAL\"\n","\n","  logging.info(\"Terminei a descompactação.\")"]},{"cell_type":"markdown","metadata":{"id":"qzhYJNWJm1z4"},"source":["### 3.1.4 Carregamento das lista com os dados dos arquivos originais"]},{"cell_type":"markdown","metadata":{"id":"Usr1uRzQeJSb"},"source":["#### Carrega o arquivo dos dados originais e POS"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":34,"status":"ok","timestamp":1669032482698,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"QRHlixdHEDTb","outputId":"b6eb5022-71c1-41fb-8770-e505d25e6a50"},"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:root:TERMINADO ORIGINAIS: 1844.\n"]}],"source":["# Import das bibliotecas.\n","import pandas as pd\n","\n","# Abre o arquivo e retorna o DataFrame\n","lista_documentos_originais_filtrados = pd.read_csv(DIRETORIO_LOCAL + NOME_ARQUIVO_DOCUMENTO_FILTRADO, sep=\";\", encoding=\"UTF-8\")\n","\n","\n","logging.info(\"TERMINADO ORIGINAIS: {}.\".format(len(lista_documentos_originais_filtrados)))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mzl2SUe7N4QM"},"outputs":[],"source":["# lista_documentos_originais = lista_documentos_originais[:5]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16,"status":"ok","timestamp":1669032482700,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"jJ5STBZPLlie","outputId":"9ca1ee74-69f8-4773-cab9-ebeebf6fd691"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["          id                                          documento  \\\n","889   201718         meu senhor não poderá depois queixar-se...   \n","115   200123                   – Este não será de outro senhor.   \n","69    200100  Fora absurdo pretender que a ingratidão às vez...   \n","1194  202375  A decisão da luta pareceu então depender da po...   \n","325   200802  Simeão, o crioulo mimoso, perdido, malcriado p...   \n","\n","                                        documentoTokens  \\\n","889   ['meu', 'senhor', 'não', 'poderá', 'depois', '...   \n","115   ['–', 'Este', 'não', 'será', 'de', 'outro', 's...   \n","69    ['Fora', 'absurdo', 'pretender', 'que', 'a', '...   \n","1194  ['A', 'decisão', 'da', 'luta', 'pareceu', 'ent...   \n","325   ['Simeão', ',', 'o', 'crioulo', 'mimoso', ',',...   \n","\n","                                           posDocumento  idOcorrencia  \\\n","889   ['DET', 'NOUN', 'ADV', 'VERB', 'ADV', 'VERB', ...             1   \n","115   ['PUNCT', 'PRON', 'ADV', 'AUX', 'ADP', 'DET', ...             6   \n","69    ['ADV', 'ADJ', 'VERB', 'SCONJ', 'DET', 'NOUN',...            14   \n","1194  ['DET', 'NOUN', 'ADP', 'NOUN', 'VERB', 'ADV', ...            14   \n","325   ['PROPN', 'PUNCT', 'DET', 'NOUN', 'ADJ', 'PUNC...            34   \n","\n","     palavraAlvo    grupo                obra                     autor   ano  \\\n","889       senhor   senhor  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","115       senhor   senhor  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","69       criados   criado  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","1194      negros    negro  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","325      escravo  escravo  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","\n","      idObra   movimento  \n","889        2  Romantismo  \n","115        2  Romantismo  \n","69         2  Romantismo  \n","1194       2  Romantismo  \n","325        2  Romantismo  "],"text/html":["\n","  <div id=\"df-395058b0-3258-4f03-8cf7-6dde07ce3302\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>documento</th>\n","      <th>documentoTokens</th>\n","      <th>posDocumento</th>\n","      <th>idOcorrencia</th>\n","      <th>palavraAlvo</th>\n","      <th>grupo</th>\n","      <th>obra</th>\n","      <th>autor</th>\n","      <th>ano</th>\n","      <th>idObra</th>\n","      <th>movimento</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>889</th>\n","      <td>201718</td>\n","      <td>meu senhor não poderá depois queixar-se...</td>\n","      <td>['meu', 'senhor', 'não', 'poderá', 'depois', '...</td>\n","      <td>['DET', 'NOUN', 'ADV', 'VERB', 'ADV', 'VERB', ...</td>\n","      <td>1</td>\n","      <td>senhor</td>\n","      <td>senhor</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","    <tr>\n","      <th>115</th>\n","      <td>200123</td>\n","      <td>– Este não será de outro senhor.</td>\n","      <td>['–', 'Este', 'não', 'será', 'de', 'outro', 's...</td>\n","      <td>['PUNCT', 'PRON', 'ADV', 'AUX', 'ADP', 'DET', ...</td>\n","      <td>6</td>\n","      <td>senhor</td>\n","      <td>senhor</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","    <tr>\n","      <th>69</th>\n","      <td>200100</td>\n","      <td>Fora absurdo pretender que a ingratidão às vez...</td>\n","      <td>['Fora', 'absurdo', 'pretender', 'que', 'a', '...</td>\n","      <td>['ADV', 'ADJ', 'VERB', 'SCONJ', 'DET', 'NOUN',...</td>\n","      <td>14</td>\n","      <td>criados</td>\n","      <td>criado</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","    <tr>\n","      <th>1194</th>\n","      <td>202375</td>\n","      <td>A decisão da luta pareceu então depender da po...</td>\n","      <td>['A', 'decisão', 'da', 'luta', 'pareceu', 'ent...</td>\n","      <td>['DET', 'NOUN', 'ADP', 'NOUN', 'VERB', 'ADV', ...</td>\n","      <td>14</td>\n","      <td>negros</td>\n","      <td>negro</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","    <tr>\n","      <th>325</th>\n","      <td>200802</td>\n","      <td>Simeão, o crioulo mimoso, perdido, malcriado p...</td>\n","      <td>['Simeão', ',', 'o', 'crioulo', 'mimoso', ',',...</td>\n","      <td>['PROPN', 'PUNCT', 'DET', 'NOUN', 'ADJ', 'PUNC...</td>\n","      <td>34</td>\n","      <td>escravo</td>\n","      <td>escravo</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-395058b0-3258-4f03-8cf7-6dde07ce3302')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-395058b0-3258-4f03-8cf7-6dde07ce3302 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-395058b0-3258-4f03-8cf7-6dde07ce3302');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":346}],"source":["lista_documentos_originais_filtrados.sample(5)"]},{"cell_type":"markdown","metadata":{"id":"0PPCl45c_Fys"},"source":["#### Corrigir os tipos de colunas dos dados originais_filtrados\n","\n","Em dados originais_filtrados:\n","- coluna 1 - `documentoTokens` carregadas do arquivo vem como string e não como lista.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":451,"status":"ok","timestamp":1669032483138,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"uSmIpa1Q_Fys","outputId":"45aaef66-a23f-4cf2-b1eb-c2fa19038586"},"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:root:TERMINADO CORREÇÃO ORIGINAIS_FILTRADOS: 1844.\n"]}],"source":["# Import das bibliotecas.\n","import ast # Biblioteca para conversão de string em lista\n","\n","# Verifica se o tipo da coluna não é list e converte\n","lista_documentos_originais_filtrados[\"documentoTokens\"] = lista_documentos_originais_filtrados[\"documentoTokens\"].apply(lambda x: ast.literal_eval(x) if type(x)!=list else x)\n","lista_documentos_originais_filtrados[\"posDocumento\"] = lista_documentos_originais_filtrados[\"posDocumento\"].apply(lambda x: ast.literal_eval(x) if type(x)!=list else x)\n","\n","\n","logging.info(\"TERMINADO CORREÇÃO ORIGINAIS_FILTRADOS: {}.\".format(len(lista_documentos_originais_filtrados)))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":717,"status":"ok","timestamp":1669032483847,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"RyF2Q8H4_Fyt","outputId":"3a90e2c8-8687-4ec3-846e-fb35debe010c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["          id                                          documento  \\\n","1438  203191  – Uma palavra descuidada de minha senhora pode...   \n","1720  204812  – Que tolice de minha senhora! – repetiu a mis...   \n","153   200201  As cartas contrariaram a pressa de Simeão, equ...   \n","1433  203182  – Minha senhora que tem já dezesseis anos, há ...   \n","1468  203524  deve entender-se comigo, que sou a mucama de m...   \n","\n","                                        documentoTokens  \\\n","1438  [–, Uma, palavra, descuidada, de, minha, senho...   \n","1720  [–, Que, tolice, de, minha, senhora, !, –, rep...   \n","153   [As, cartas, contrariaram, a, pressa, de, Sime...   \n","1433  [–, Minha, senhora, que, tem, já, dezesseis, a...   \n","1468  [deve, entender-se, comigo, ,, que, sou, a, mu...   \n","\n","                                           posDocumento  idOcorrencia  \\\n","1438  [PUNCT, DET, NOUN, VERB, ADP, DET, NOUN, VERB,...             6   \n","1720  [PUNCT, DET, NOUN, ADP, DET, NOUN, PUNCT, PUNC...            11   \n","153   [DET, NOUN, VERB, DET, NOUN, ADP, PROPN, PUNCT...            22   \n","1433  [PUNCT, PROPN, NOUN, PRON, VERB, ADV, NUM, NOU...             2   \n","1468  [VERB, VERB, PRON, PUNCT, SCONJ, AUX, DET, NOU...            10   \n","\n","     palavraAlvo    grupo                obra                     autor   ano  \\\n","1438     senhora   senhor  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","1720     escrava  escravo  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","153      crioulo  crioulo  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","1433     senhora   senhor  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","1468     senhora   senhor  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","\n","      idObra   movimento  \n","1438       2  Romantismo  \n","1720       2  Romantismo  \n","153        2  Romantismo  \n","1433       2  Romantismo  \n","1468       2  Romantismo  "],"text/html":["\n","  <div id=\"df-a6b77a60-ba85-4bde-8dab-cceb39947c2f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>documento</th>\n","      <th>documentoTokens</th>\n","      <th>posDocumento</th>\n","      <th>idOcorrencia</th>\n","      <th>palavraAlvo</th>\n","      <th>grupo</th>\n","      <th>obra</th>\n","      <th>autor</th>\n","      <th>ano</th>\n","      <th>idObra</th>\n","      <th>movimento</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1438</th>\n","      <td>203191</td>\n","      <td>– Uma palavra descuidada de minha senhora pode...</td>\n","      <td>[–, Uma, palavra, descuidada, de, minha, senho...</td>\n","      <td>[PUNCT, DET, NOUN, VERB, ADP, DET, NOUN, VERB,...</td>\n","      <td>6</td>\n","      <td>senhora</td>\n","      <td>senhor</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","    <tr>\n","      <th>1720</th>\n","      <td>204812</td>\n","      <td>– Que tolice de minha senhora! – repetiu a mis...</td>\n","      <td>[–, Que, tolice, de, minha, senhora, !, –, rep...</td>\n","      <td>[PUNCT, DET, NOUN, ADP, DET, NOUN, PUNCT, PUNC...</td>\n","      <td>11</td>\n","      <td>escrava</td>\n","      <td>escravo</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","    <tr>\n","      <th>153</th>\n","      <td>200201</td>\n","      <td>As cartas contrariaram a pressa de Simeão, equ...</td>\n","      <td>[As, cartas, contrariaram, a, pressa, de, Sime...</td>\n","      <td>[DET, NOUN, VERB, DET, NOUN, ADP, PROPN, PUNCT...</td>\n","      <td>22</td>\n","      <td>crioulo</td>\n","      <td>crioulo</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","    <tr>\n","      <th>1433</th>\n","      <td>203182</td>\n","      <td>– Minha senhora que tem já dezesseis anos, há ...</td>\n","      <td>[–, Minha, senhora, que, tem, já, dezesseis, a...</td>\n","      <td>[PUNCT, PROPN, NOUN, PRON, VERB, ADV, NUM, NOU...</td>\n","      <td>2</td>\n","      <td>senhora</td>\n","      <td>senhor</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","    <tr>\n","      <th>1468</th>\n","      <td>203524</td>\n","      <td>deve entender-se comigo, que sou a mucama de m...</td>\n","      <td>[deve, entender-se, comigo, ,, que, sou, a, mu...</td>\n","      <td>[VERB, VERB, PRON, PUNCT, SCONJ, AUX, DET, NOU...</td>\n","      <td>10</td>\n","      <td>senhora</td>\n","      <td>senhor</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a6b77a60-ba85-4bde-8dab-cceb39947c2f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a6b77a60-ba85-4bde-8dab-cceb39947c2f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a6b77a60-ba85-4bde-8dab-cceb39947c2f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":348}],"source":["lista_documentos_originais_filtrados.sample(5)"]},{"cell_type":"markdown","metadata":{"id":"8yyRt4jnYxsU"},"source":["#### Analise dos dados originais com janela"]},{"cell_type":"markdown","metadata":{"id":"pOzDVi7PR6RE"},"source":["### **adicionar indice da palavra chave, indice sup e inf da jenala, palavra chave**\n","\n","utilizar a posição originão sem o acrecimo do + 1 no indice superior\n","\n","criar uma lista d onde "]},{"cell_type":"markdown","metadata":{"id":"kV4ZjkGDWeLl"},"source":["#### filtra as coisas \n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TOx5vfZtS4Wm"},"outputs":[],"source":["data = {\n","    0:{\"label\":\"negro\", \"alvo\":[\"negro\",\"negros\",\"negrinho\",\"negrinhos\",\"negra\",\"negras\",\"negrinha\",\"negrinhas\"]},\n","    1:{\"label\":\"crioulo\", \"alvo\": [\"crioulo\",\"crioulos\",\"crioulinho\",\"crioulinhos\",\"crioula\",\"crioulas\",\"crioulinha\",\"crioulinhas\"]},\n","    2:{\"label\":\"mulato\", \"alvo\":[\"mulato\",\"mulatos\",\"mulatinho\",\"mulatinhos\",\"mulata\",\"mulatas\",\"mulatinha\",\"mulatinhas\"]},\n","    3:{\"label\":\"criado\", \"alvo\":[\"criado\",\"criados\",\"criadinho\",\"criadinhos\",\"criada\",\"criadas\",\"criadinha\",\"criadinhas\"]},\n","    4:{\"label\":\"escravo\", \"alvo\":[\"escravo\",\"escravos\",\"escravinho\",\"escravinhos\",\"escrava\",\"escravas\",\"escravinha\",\"escravinhas\"]},\n","    5:{\"label\":\"senhor\", \"alvo\":[\"senhor\",\"senhores\",\"senhora\",\"senhoras\",]},\n","    6:{\"label\":\"branco\", \"alvo\":[\"branco\",\"brancos\",\"branca\",\"brancas\",]},\n","}"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":60,"status":"ok","timestamp":1669032483848,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"1MtjtalaToM8","outputId":"0b52c03a-5d10-4d35-e113-6afa4262154a"},"outputs":[{"output_type":"stream","name":"stdout","text":["{'label': 'negro', 'alvo': ['negro', 'negros', 'negrinho', 'negrinhos', 'negra', 'negras', 'negrinha', 'negrinhas']}\n"]}],"source":["print(data[0])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":50,"status":"ok","timestamp":1669032483849,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"dSyALL0UM6L1","outputId":"11e8ee96-a878-4da8-9c18-48fa44c32dda"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['escravos', 'senhores', 'escravo', 'senhor', 'negro', 'crioulo',\n","       'escrava', 'crioulinho', 'senhora', 'criado', 'negra', 'crioulos',\n","       'criados', 'negros', 'escravas', 'branca', 'branco', 'senhoras',\n","       'brancos', 'crioula', 'negras', 'crioulas', 'criada',\n","       'crioulinhos'], dtype=object)"]},"metadata":{},"execution_count":351}],"source":["lista_documentos_originais_filtrados['palavraAlvo'].unique()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":43,"status":"ok","timestamp":1669032483849,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"xDuz26qmNAzW","outputId":"4fd630c2-2798-427c-893d-5829e42cc786"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['escravo', 'senhor', 'negro', 'crioulo', 'criado', 'branco'],\n","      dtype=object)"]},"metadata":{},"execution_count":352}],"source":["lista_documentos_originais_filtrados['grupo'].unique()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":38,"status":"ok","timestamp":1669032483850,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"pKvgWN0gNVJL","outputId":"66aa4651-c17e-4cec-cea5-f2983c6e4b19"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["1844"]},"metadata":{},"execution_count":353}],"source":["len(lista_documentos_originais_filtrados)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5puokWdWPwxR"},"outputs":[],"source":["palavras_alvo = data[0]['alvo'][0]\n","labels = data[0]['label']"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":35,"status":"ok","timestamp":1669032483852,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"2B8JtOBTUegt","outputId":"a95a8732-a847-4cdf-aa4d-42340350eefb"},"outputs":[{"output_type":"stream","name":"stdout","text":["labels negro palavras_alvo negro\n"]}],"source":["print(\"labels\",labels,\"palavras_alvo\",palavras_alvo)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9JGuFuP5MidR"},"outputs":[],"source":["lista_documentos_filtrados = lista_documentos_originais_filtrados "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":31,"status":"ok","timestamp":1669032483853,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"k5pLFDvyNXT7","outputId":"db3aec37-3124-4c19-c6e7-65a6df78c172"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["1844"]},"metadata":{},"execution_count":357}],"source":["len(lista_documentos_filtrados)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":28,"status":"ok","timestamp":1669032483854,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"uvVO_dOrAwmP","outputId":"73849804-99f7-4c88-8e7e-bd67c918eeb3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 49,  60,  52,   3,  32,  28,  22,  62, 105,  59,  45,   6,  10,\n","         5,  15,  18,  64,   2,  20,  35,   1,  14,  57, 100,  23,  34,\n","        38,   4,   7,  40,  13,  26,  12,  27,  17,  67,  48,  24,   8,\n","        36,  95,  33,  56,  51, 133,  41,  42,  65,  47,  53,  55,  73,\n","        94,  19,  25,  68,   9,  21,  54,  31,  78,  11,  37,  86,  16,\n","        30,  61,  76,  39,  50,   0,  66,  75, 158, 103, 131, 141,  58,\n","       118,  44, 104,  70,  93,  29,  43,  63,  92,  83, 112,  84,  71,\n","        72,  77,  69,  46, 102, 116, 204,  87, 107, 165, 101, 108, 115,\n","        80])"]},"metadata":{},"execution_count":358}],"source":["lista_documentos_filtrados[\"idOcorrencia\"].unique()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":25,"status":"ok","timestamp":1669032483854,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"},"user_tz":180},"id":"oKw-Zo2koYsy","outputId":"3425c02d-96c8-448b-8b85-4c164b11908e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["       id                                          documento  \\\n","0  200016  Explorador das trevas protetoras dos vícios e ...   \n","1  200016  Explorador das trevas protetoras dos vícios e ...   \n","2  200016  Explorador das trevas protetoras dos vícios e ...   \n","3  200018  vêm os quilombolas escravos fugidos e acoitado...   \n","4  200019  E o vendelhão é em regra a vigilância protetor...   \n","\n","                                     documentoTokens  \\\n","0  [Explorador, das, trevas, protetoras, dos, víc...   \n","1  [Explorador, das, trevas, protetoras, dos, víc...   \n","2  [Explorador, das, trevas, protetoras, dos, víc...   \n","3  [vêm, os, quilombolas, escravos, fugidos, e, a...   \n","4  [E, o, vendelhão, é, em, regra, a, vigilância,...   \n","\n","                                        posDocumento  idOcorrencia  \\\n","0  [NOUN, ADP, NOUN, ADJ, ADP, NOUN, CCONJ, ADP, ...            49   \n","1  [NOUN, ADP, NOUN, ADJ, ADP, NOUN, CCONJ, ADP, ...            60   \n","2  [NOUN, ADP, NOUN, ADJ, ADP, NOUN, CCONJ, ADP, ...            52   \n","3  [VERB, DET, NOUN, ADJ, VERB, CCONJ, VERB, ADP,...             3   \n","4  [CCONJ, DET, NOUN, AUX, ADP, NOUN, DET, NOUN, ...            32   \n","\n","  palavraAlvo    grupo                obra                     autor   ano  \\\n","0    escravos  escravo  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","1    escravos  escravo  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","2    senhores   senhor  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","3    escravos  escravo  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","4    escravos  escravo  As Vítimas-Algozes  Joaquim Manuel de Macedo  1869   \n","\n","   idObra   movimento  \n","0       2  Romantismo  \n","1       2  Romantismo  \n","2       2  Romantismo  \n","3       2  Romantismo  \n","4       2  Romantismo  "],"text/html":["\n","  <div id=\"df-2adafacb-c420-4cef-922c-47d35469f697\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>documento</th>\n","      <th>documentoTokens</th>\n","      <th>posDocumento</th>\n","      <th>idOcorrencia</th>\n","      <th>palavraAlvo</th>\n","      <th>grupo</th>\n","      <th>obra</th>\n","      <th>autor</th>\n","      <th>ano</th>\n","      <th>idObra</th>\n","      <th>movimento</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>200016</td>\n","      <td>Explorador das trevas protetoras dos vícios e ...</td>\n","      <td>[Explorador, das, trevas, protetoras, dos, víc...</td>\n","      <td>[NOUN, ADP, NOUN, ADJ, ADP, NOUN, CCONJ, ADP, ...</td>\n","      <td>49</td>\n","      <td>escravos</td>\n","      <td>escravo</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>200016</td>\n","      <td>Explorador das trevas protetoras dos vícios e ...</td>\n","      <td>[Explorador, das, trevas, protetoras, dos, víc...</td>\n","      <td>[NOUN, ADP, NOUN, ADJ, ADP, NOUN, CCONJ, ADP, ...</td>\n","      <td>60</td>\n","      <td>escravos</td>\n","      <td>escravo</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>200016</td>\n","      <td>Explorador das trevas protetoras dos vícios e ...</td>\n","      <td>[Explorador, das, trevas, protetoras, dos, víc...</td>\n","      <td>[NOUN, ADP, NOUN, ADJ, ADP, NOUN, CCONJ, ADP, ...</td>\n","      <td>52</td>\n","      <td>senhores</td>\n","      <td>senhor</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>200018</td>\n","      <td>vêm os quilombolas escravos fugidos e acoitado...</td>\n","      <td>[vêm, os, quilombolas, escravos, fugidos, e, a...</td>\n","      <td>[VERB, DET, NOUN, ADJ, VERB, CCONJ, VERB, ADP,...</td>\n","      <td>3</td>\n","      <td>escravos</td>\n","      <td>escravo</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>200019</td>\n","      <td>E o vendelhão é em regra a vigilância protetor...</td>\n","      <td>[E, o, vendelhão, é, em, regra, a, vigilância,...</td>\n","      <td>[CCONJ, DET, NOUN, AUX, ADP, NOUN, DET, NOUN, ...</td>\n","      <td>32</td>\n","      <td>escravos</td>\n","      <td>escravo</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2adafacb-c420-4cef-922c-47d35469f697')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-2adafacb-c420-4cef-922c-47d35469f697 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-2adafacb-c420-4cef-922c-47d35469f697');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":359}],"source":["lista_documentos_filtrados.head()"]},{"cell_type":"markdown","metadata":{"id":"v9vT0xFZv3Dw"},"source":["###  3.2.1 gera embeddings"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":49,"referenced_widgets":["38d99c10b1f74db8aa43e51e29c0386f","5512a09d3dd74acd90c441e6423c90c1","c944b9a2fd9b429491830b659e6866c4","6645fb462da7429ba7165139f41321cf","77d0a5747dfb4c84957a1316ec33dbb2","9593d1c17ebf46f2b92b6dbe7e86ff02","2c909b7520b540b096abc817858e3ebd","9a665d5e4c5646d2ae559300ffe37b03","cda3430cbc164895a0150fc92ada4a35","cfc4801051a445a38750aae37a327344","5dcd717f328d4300961a652fced8506c"]},"id":"NMrd5JtU6UNB","executionInfo":{"status":"ok","timestamp":1669034068694,"user_tz":180,"elapsed":1584863,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"b3561e63-f4ce-44d4-a8cf-e990bf9b0826"},"outputs":[{"output_type":"display_data","data":{"text/plain":["Documentos:   0%|          | 0/1844 [00:00<?, ? documento/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"38d99c10b1f74db8aa43e51e29c0386f"}},"metadata":{}}],"source":["# Import das bibliotecas.\n","from tqdm.notebook import tqdm as tqdm_notebook\n","\n","lista_documentos_filtrados_emb = [];\n","\n","# perccore a lista de documento inicio ate final-1\n","documentos_bar = tqdm_notebook(lista_documentos_filtrados.iterrows(), desc=f\"Documentos\", unit=f\" documento\", total=len(lista_documentos_filtrados))  \n","for index, row in documentos_bar:\n","    \n","    \n","    sw1_id = row[\"id\"]\n","    sw1_documento = row[\"documento\"]\n","    sw1_documentoTokens = row[\"documentoTokens\"]\n","    sw1_posDocumento = row[\"posDocumento\"]\n","    sw1_idOcorrencia = row[\"idOcorrencia\"]\n","    sw1_palavraAlvo = row[\"palavraAlvo\"]\n","    sw1_grupo = row['grupo']\n","    sw1_obra = row[\"obra\"]\n","    sw1_autor = row[\"autor\"]\n","    sw1_ano = row[\"ano\"]\n","    sw1_idObra = row[\"idObra\"]\n","    sw1_movimento = row[\"movimento\"]\n","    sw1_document = \" \".join(sw1_documentoTokens)\n","    sw1_length = len(sw1_documentoTokens)\n","    \n","    # alteração 16/09/2022 10:11\n","    sw1_document = \" \".join(sw1_documentoTokens)\n","\n","    # gerar os embeddings do documento sw1\n","    sw1_embedding_documento, sw1_token_BERT_documento = getEmbeddingsDocumento(sw1_document, model, tokenizer) \n","\n","    sw1_sentenca_token = sw1_documentoTokens    \n","    sw1_sentenca_postagging = sw1_posDocumento\n","\n","    # Realiza uma contenação dos tokens da sentença\n","    sw1_sentenca_concatenada = \" \".join(sw1_sentenca_token)\n","    # print(\"sentenca_concatenada:\", sentenca_concatenada)\n","\n","\n","\n","    similaridade = 1\n","\n","    cos_mean = 1  \n","    euc_mean = 0\n","    man_mean = 0\n","    \n","    # print(sw1_sentenca_concatenada)\n","    # print(sw1_embedding_documento[1:-1])\n","    # sw1_mean_stack = torch.stack(sw1_lista_embeddings_mean, dim=0)\n","    \n","\n","    sw1_mean = torch.mean(sw1_embedding_documento[1:-1],dim=0)\n","    \n","    \n","    sw1_embeddings_mean = sw1_mean\n","    \n","    \n","    # sw1_embeddings_mean = sw1_mean.numpy().tolist()\n","    # print(sw1_embeddings_mean)\n","    \n","\n","    sw_similaridade_cached = cos_mean\n","    sw_cos_mean_cached = cos_mean\n","    sw_euc_mean_cached = euc_mean\n","    sw_man_mean_cached = man_mean\n","    \n","    # print(\"medidas :\",sw_cos_mean_cached,sw_euc_mean_cached,sw_man_mean_cached)\n","\n","    lista_documentos_filtrados_emb.append([\n","        sw1_id,\n","        sw1_documento,\n","        sw1_documentoTokens,\n","        sw1_posDocumento,\n","        sw1_idOcorrencia,\n","        sw1_palavraAlvo,\n","        sw1_grupo,\n","        sw1_obra,\n","        sw1_autor,\n","        sw1_ano,\n","        sw1_idObra,\n","        sw1_movimento,\n","        sw1_document,\n","        sw1_length,\n","        sw1_embeddings_mean  \n","    ])\n","\n","    \n","\n","\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RMncPjJUwQ8i"},"outputs":[],"source":["columnsDataframe = [  \n","'sw1_id',\n","'sw1_documento',\n","'sw1_documentoTokens',\n","'sw1_posDocumento',\n","'sw1_idOcorrencia',\n","'sw1_palavraAlvo',\n","'sw1_grupo',\n","'sw1_obra',\n","'sw1_autor',\n","'sw1_ano',\n","'sw1_idObra',\n","'sw1_movimento',\n","'sw1_document',\n","'sw1_length',  \n","'sw1_embeddings'   \n","]    "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jK9x6CkxwkIv","executionInfo":{"status":"error","timestamp":1669175877598,"user_tz":180,"elapsed":450,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"colab":{"base_uri":"https://localhost:8080/","height":183},"outputId":"402861ef-90bb-47b1-98e3-001ff48b7001"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-f83fb988bf08>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mlista_documentos_filtrados_emb_dataframe\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlista_documentos_filtrados_emb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcolumnsDataframe\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'pd' is not defined"]}],"source":["lista_documentos_filtrados_emb_dataframe = pd.DataFrame(lista_documentos_filtrados_emb, columns=columnsDataframe)\n","\n"]},{"cell_type":"code","source":["del lista_documentos_filtrados_emb"],"metadata":{"id":"eYd8lc3nQsJY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["lista_documentos_filtrados_emb_dataframe.sample()"],"metadata":{"id":"40CxFjCqPV6r","colab":{"base_uri":"https://localhost:8080/","height":159},"executionInfo":{"status":"ok","timestamp":1669034068700,"user_tz":180,"elapsed":71,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"0af963de-26d3-4069-c24c-2cd4bb4e601a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      sw1_id                                      sw1_documento  \\\n","1434  203185  Lucinda saboreou a impressão que produzira no ...   \n","\n","                                    sw1_documentoTokens  \\\n","1434  [Lucinda, saboreou, a, impressão, que, produzi...   \n","\n","                                       sw1_posDocumento  sw1_idOcorrencia  \\\n","1434  [PROPN, VERB, DET, NOUN, PRON, VERB, ADP, NOUN...                 9   \n","\n","     sw1_palavraAlvo sw1_grupo            sw1_obra                 sw1_autor  \\\n","1434         senhora    senhor  As Vítimas-Algozes  Joaquim Manuel de Macedo   \n","\n","      sw1_ano  sw1_idObra sw1_movimento  \\\n","1434     1869           2    Romantismo   \n","\n","                                           sw1_document  sw1_length  \\\n","1434  Lucinda saboreou a impressão que produzira no ...          16   \n","\n","                                         sw1_embeddings  \n","1434  [tensor(0.0367), tensor(0.4250), tensor(-0.210...  "],"text/html":["\n","  <div id=\"df-84ed219a-5ae2-4dfc-969e-c8f374cffe32\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sw1_id</th>\n","      <th>sw1_documento</th>\n","      <th>sw1_documentoTokens</th>\n","      <th>sw1_posDocumento</th>\n","      <th>sw1_idOcorrencia</th>\n","      <th>sw1_palavraAlvo</th>\n","      <th>sw1_grupo</th>\n","      <th>sw1_obra</th>\n","      <th>sw1_autor</th>\n","      <th>sw1_ano</th>\n","      <th>sw1_idObra</th>\n","      <th>sw1_movimento</th>\n","      <th>sw1_document</th>\n","      <th>sw1_length</th>\n","      <th>sw1_embeddings</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1434</th>\n","      <td>203185</td>\n","      <td>Lucinda saboreou a impressão que produzira no ...</td>\n","      <td>[Lucinda, saboreou, a, impressão, que, produzi...</td>\n","      <td>[PROPN, VERB, DET, NOUN, PRON, VERB, ADP, NOUN...</td>\n","      <td>9</td>\n","      <td>senhora</td>\n","      <td>senhor</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","      <td>Lucinda saboreou a impressão que produzira no ...</td>\n","      <td>16</td>\n","      <td>[tensor(0.0367), tensor(0.4250), tensor(-0.210...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-84ed219a-5ae2-4dfc-969e-c8f374cffe32')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-84ed219a-5ae2-4dfc-969e-c8f374cffe32 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-84ed219a-5ae2-4dfc-969e-c8f374cffe32');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":364}]},{"cell_type":"markdown","metadata":{"id":"pcs4G8R7wRpY"},"source":["### 3.2.2 gera medidas entre sentenças"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":49,"referenced_widgets":["65ed11e1efe44ae0844e8954c1973afe","d7fae259685d4f2ca25ba7e3b17c0d6e","8d40cd022cc64ebca7e3a965edb1a6e3","33497ac1a19f4d67ad512045c36af278","0ef3d37b9a9c44cca3cdc592898ef47c","d674b9671b394dceaaef88e0a4a4e53e","b43e1cb5ba0543898d0dd40b879ce9b9","ad9bdef7fb1c451ea73dbdea93048d08","add05684008547c19fde420d0e24b869","ec9f2fba4ecc40519cc0c6f4b33b0880","f1f2738506d74c4c8204ac68db96968b"]},"id":"F92sU2_6v07Y","executionInfo":{"status":"ok","timestamp":1669034624213,"user_tz":180,"elapsed":555571,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"1bd20634-5897-4b12-cd85-cc56a4ca2d2a"},"outputs":[{"output_type":"display_data","data":{"text/plain":["Documentos:   0%|          | 0/1843 [00:00<?, ? documento/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"65ed11e1efe44ae0844e8954c1973afe"}},"metadata":{}}],"source":["# Import das bibliotecas.\n","from tqdm.notebook import tqdm as tqdm_notebook\n","\n","list_intances = [];\n","\n","# perccore a lista de documento inicio ate final-1\n","documentos_bar = tqdm_notebook(lista_documentos_filtrados_emb_dataframe[:-1].iterrows(), desc=f\"Documentos\", unit=f\" documento\", total=len(lista_documentos_filtrados_emb_dataframe[:-1]))  \n","for index, row in documentos_bar:\n","    \n","    \n","    sw1_id                   = row['sw1_id']\n","    sw1_documento            = row['sw1_documento']\n","    sw1_documentoTokens      = row['sw1_documentoTokens']\n","    sw1_posDocumento         = row['sw1_posDocumento']\n","    sw1_idOcorrencia         = row['sw1_idOcorrencia']\n","    sw1_palavraAlvo          = row['sw1_palavraAlvo']\n","    sw1_grupo                = row['sw1_grupo']\n","    sw1_obra                 = row['sw1_obra']\n","    sw1_autor                = row['sw1_autor']\n","    sw1_ano                  = row['sw1_ano']\n","    sw1_idObra               = row['sw1_idObra']\n","    sw1_movimento            = row['sw1_movimento']\n","    sw1_document             = row['sw1_document']\n","    sw1_length               = row['sw1_length'] \n","    sw1_embeddings           = row['sw1_embeddings'] \n","            \n","\n","\n","    for index2, row2 in lista_documentos_filtrados_emb_dataframe[index+1:].iterrows():\n","\n","        # gerar os embeddings do documento sw2\n","        # print(index,index2)\n","\n","        if row2['sw1_id'] != row['sw1_id']:\n","\n","            sw2_id                      = row2['sw1_id']\n","            sw2_documento               = row2['sw1_documento']\n","            sw2_documentoTokens         = row2['sw1_documentoTokens']\n","            sw2_posDocumento            = row2['sw1_posDocumento']\n","            sw2_idOcorrencia            = row2['sw1_idOcorrencia']\n","            sw2_palavraAlvo             = row2['sw1_palavraAlvo']\n","            sw2_grupo                   = row2['sw1_grupo']\n","            sw2_obra                    = row2['sw1_obra']\n","            sw2_autor                   = row2['sw1_autor']\n","            sw2_ano                     = row2['sw1_ano']\n","            sw2_idObra                  = row2['sw1_idObra']\n","            sw2_movimento               = row2['sw1_movimento']\n","            sw2_document                = row2['sw1_document']\n","            sw2_length                  = row2['sw1_length'] \n","            sw2_embeddings              = row2['sw1_embeddings'] \n","\n","\n","            similaridade = 1\n","\n","            cos_mean = 1  \n","            euc_mean = 0\n","            man_mean = 0\n","            \n","\n","            cos_mean, euc_mean, man_mean = getMedidasEmbedding(sw1_embeddings,sw2_embeddings)\n","\n","        \n","            \n","\n","            sw_similaridade_cached = cos_mean\n","            sw_cos_mean_cached = cos_mean\n","            sw_euc_mean_cached = euc_mean\n","            sw_man_mean_cached = man_mean\n","            \n","            # print(\"medidas :\",sw_cos_mean_cached,sw_euc_mean_cached,sw_man_mean_cached)\n","\n","            list_intances.append([\n","                sw1_id,\n","                sw1_documento,\n","                sw1_idOcorrencia,\n","                sw1_palavraAlvo,\n","                sw1_grupo,\n","                sw1_obra,\n","                sw1_autor,\n","                sw1_ano,\n","                sw1_idObra,\n","                sw1_movimento,\n","                sw1_document,\n","                sw1_length,\n","                \n","                sw2_id,\n","                sw2_documento,\n","                sw2_idOcorrencia,\n","                sw2_palavraAlvo,\n","                sw2_grupo,\n","                sw2_obra,\n","                sw2_autor,\n","                sw2_ano,\n","                sw2_idObra,\n","                sw2_movimento,\n","                sw2_document,\n","                sw2_length,\n","\n","                sw_cos_mean_cached,                                          # valor de similaridade pelo cosseno\n","                sw_euc_mean_cached,                                          # valor da distencia euclidiana \n","                sw_man_mean_cached                                           # valor da distancia manhattan\n","            ])\n","\n","            list_intances.append([\n","                sw2_id,\n","                sw2_documento,\n","                sw2_idOcorrencia,\n","                sw2_palavraAlvo,\n","                sw2_grupo,\n","                sw2_obra,\n","                sw2_autor,\n","                sw2_ano,\n","                sw2_idObra,\n","                sw2_movimento,\n","                sw2_document,\n","                sw2_length,\n","\n","                sw1_id,\n","                sw1_documento,\n","                sw1_idOcorrencia,\n","                sw1_palavraAlvo,\n","                sw1_grupo,\n","                sw1_obra,\n","                sw1_autor,\n","                sw1_ano,\n","                sw1_idObra,\n","                sw1_movimento,\n","                sw1_document,\n","                sw1_length,            \n","                        \n","                sw_cos_mean_cached,                                          # valor de similaridade pelo cosseno\n","                sw_euc_mean_cached,                                          # valor da distencia euclidiana \n","                sw_man_mean_cached                                           # valor da distancia manhattan\n","            ])\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"qKTL0eJhN5lJ"},"source":["### Transforma a lista em um dataframe"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QUdDQOsXI7x5"},"outputs":[],"source":["columnsDataframe = [  \n","'sw1_id',\n","'sw1_documento',\n","'sw1_idOcorrencia',\n","'sw1_palavraAlvo',\n","'sw1_grupo',\n","'sw1_obra',\n","'sw1_autor',\n","'sw1_ano',\n","'sw1_idObra',\n","'sw1_movimento',\n","'sw1_document',\n","'sw1_length',   \n","'sw2_id',\n","'sw2_documento',\n","'sw2_idOcorrencia',\n","'sw2_palavraAlvo',\n","'sw2_grupo',\n","'sw2_obra',\n","'sw2_autor',\n","'sw2_ano',\n","'sw2_idObra',\n","'sw2_movimento',\n","'sw2_document',\n","'sw2_length',\n","'cos_mean',\n","'euc_mean',\n","'man_mean',   \n","]    "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ek_xEHDqN5lJ"},"outputs":[],"source":["list_intances_df = pd.DataFrame(list_intances, columns=columnsDataframe)\n"]},{"cell_type":"code","source":["del list_intances"],"metadata":{"id":"B82LLsNDQW4x"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":189},"id":"8u4Vzr8jN5lJ","executionInfo":{"status":"ok","timestamp":1669034641189,"user_tz":180,"elapsed":696,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"2e55d342-86a4-4679-c983-f9eafe751c6b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["         sw1_id                                      sw1_documento  \\\n","1781892  201187  O escravo africano visava um fim em todo esse ...   \n","\n","         sw1_idOcorrencia sw1_palavraAlvo sw1_grupo            sw1_obra  \\\n","1781892                13         crioula   crioulo  As Vítimas-Algozes   \n","\n","                        sw1_autor  sw1_ano  sw1_idObra sw1_movimento  ...  \\\n","1781892  Joaquim Manuel de Macedo     1869           2    Romantismo  ...   \n","\n","                   sw2_obra                 sw2_autor  sw2_ano sw2_idObra  \\\n","1781892  As Vítimas-Algozes  Joaquim Manuel de Macedo     1869          2   \n","\n","         sw2_movimento                  sw2_document sw2_length  cos_mean  \\\n","1781892     Romantismo  – E se o senhor se acordar ?          8  0.788155   \n","\n","          euc_mean    man_mean  \n","1781892  10.819845  268.084503  \n","\n","[1 rows x 27 columns]"],"text/html":["\n","  <div id=\"df-f0f54a73-ddc5-4628-a82e-8096d7594599\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sw1_id</th>\n","      <th>sw1_documento</th>\n","      <th>sw1_idOcorrencia</th>\n","      <th>sw1_palavraAlvo</th>\n","      <th>sw1_grupo</th>\n","      <th>sw1_obra</th>\n","      <th>sw1_autor</th>\n","      <th>sw1_ano</th>\n","      <th>sw1_idObra</th>\n","      <th>sw1_movimento</th>\n","      <th>...</th>\n","      <th>sw2_obra</th>\n","      <th>sw2_autor</th>\n","      <th>sw2_ano</th>\n","      <th>sw2_idObra</th>\n","      <th>sw2_movimento</th>\n","      <th>sw2_document</th>\n","      <th>sw2_length</th>\n","      <th>cos_mean</th>\n","      <th>euc_mean</th>\n","      <th>man_mean</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1781892</th>\n","      <td>201187</td>\n","      <td>O escravo africano visava um fim em todo esse ...</td>\n","      <td>13</td>\n","      <td>crioula</td>\n","      <td>crioulo</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","      <td>...</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","      <td>– E se o senhor se acordar ?</td>\n","      <td>8</td>\n","      <td>0.788155</td>\n","      <td>10.819845</td>\n","      <td>268.084503</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1 rows × 27 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f0f54a73-ddc5-4628-a82e-8096d7594599')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f0f54a73-ddc5-4628-a82e-8096d7594599 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f0f54a73-ddc5-4628-a82e-8096d7594599');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":369}],"source":["list_intances_df.sample() "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gKP6Z9KdVbTM","executionInfo":{"status":"ok","timestamp":1669034641191,"user_tz":180,"elapsed":25,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"3f3c9a15-a46b-41c1-9575-3f22541123d1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["3396616"]},"metadata":{},"execution_count":370}],"source":["len(list_intances_df)"]},{"cell_type":"code","source":["list_intances_df.sample() "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"0qMigOTYQ-_A","executionInfo":{"status":"ok","timestamp":1669034641472,"user_tz":180,"elapsed":293,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"06b3116f-5590-44ac-cd22-1b0d1ecf920f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         sw1_id                                      sw1_documento  \\\n","2711888  202027  – Quando o tigre velho morrer, Esméria fica se...   \n","\n","         sw1_idOcorrencia sw1_palavraAlvo sw1_grupo            sw1_obra  \\\n","2711888                 9         senhora    senhor  As Vítimas-Algozes   \n","\n","                        sw1_autor  sw1_ano  sw1_idObra sw1_movimento  ...  \\\n","2711888  Joaquim Manuel de Macedo     1869           2    Romantismo  ...   \n","\n","                   sw2_obra                 sw2_autor  sw2_ano sw2_idObra  \\\n","2711888  As Vítimas-Algozes  Joaquim Manuel de Macedo     1869          2   \n","\n","         sw2_movimento                                       sw2_document  \\\n","2711888     Romantismo  XXX Travada estava a luta entre o anjo e o dem...   \n","\n","        sw2_length  cos_mean  euc_mean    man_mean  \n","2711888         88  0.865607  8.001161  191.627167  \n","\n","[1 rows x 27 columns]"],"text/html":["\n","  <div id=\"df-c8f6bd36-c7f8-4efb-9282-26a8fa6b31d2\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sw1_id</th>\n","      <th>sw1_documento</th>\n","      <th>sw1_idOcorrencia</th>\n","      <th>sw1_palavraAlvo</th>\n","      <th>sw1_grupo</th>\n","      <th>sw1_obra</th>\n","      <th>sw1_autor</th>\n","      <th>sw1_ano</th>\n","      <th>sw1_idObra</th>\n","      <th>sw1_movimento</th>\n","      <th>...</th>\n","      <th>sw2_obra</th>\n","      <th>sw2_autor</th>\n","      <th>sw2_ano</th>\n","      <th>sw2_idObra</th>\n","      <th>sw2_movimento</th>\n","      <th>sw2_document</th>\n","      <th>sw2_length</th>\n","      <th>cos_mean</th>\n","      <th>euc_mean</th>\n","      <th>man_mean</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2711888</th>\n","      <td>202027</td>\n","      <td>– Quando o tigre velho morrer, Esméria fica se...</td>\n","      <td>9</td>\n","      <td>senhora</td>\n","      <td>senhor</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","      <td>...</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","      <td>XXX Travada estava a luta entre o anjo e o dem...</td>\n","      <td>88</td>\n","      <td>0.865607</td>\n","      <td>8.001161</td>\n","      <td>191.627167</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1 rows × 27 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c8f6bd36-c7f8-4efb-9282-26a8fa6b31d2')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c8f6bd36-c7f8-4efb-9282-26a8fa6b31d2 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c8f6bd36-c7f8-4efb-9282-26a8fa6b31d2');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":372}]},{"cell_type":"markdown","metadata":{"id":"-hfUpvKqXoqe"},"source":["#### Corrigir o tipo de dados da coluna\n","\n","Em dados:\n","- coluna 1 - `lista_embeddings_mean` é do tipo tensor.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lj9sJVavMccj","executionInfo":{"status":"ok","timestamp":1669034641473,"user_tz":180,"elapsed":13,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"20c6c224-cb40-462a-ea13-a45b40d6f20d"},"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:root:TERMINADO CORREÇÃO list_intances_df: 3396616.\n"]}],"source":["# Import das bibliotecas.\n","import ast # Biblioteca para conversão de string em lista\n","\n","# Converte o tipo da coluna de tensor para list\n","\n","# list_intances_df[\"sw2_lista_embeddings_mean\"] = list_intances_df[\"sw2_lista_embeddings_mean\"].apply(lambda x: x.numpy())\n","# list_intances_df[\"sw2_lista_embeddings_mean\"] = list_intances_df[\"sw2_lista_embeddings_mean\"].apply(lambda x: x.tolist())\n","\n","# list_intances_df[\"sw1_lista_embeddings_mean\"] = list_intances_df[\"sw1_lista_embeddings_mean\"].apply(lambda x: x.numpy())\n","# list_intances_df[\"sw1_lista_embeddings_mean\"] = list_intances_df[\"sw1_lista_embeddings_mean\"].apply(lambda x: x.tolist())\n","\n","\n","logging.info(\"TERMINADO CORREÇÃO list_intances_df: {}.\".format(len(list_intances_df)))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GecavbpXN5lJ"},"outputs":[],"source":["# Nome do arquivo original\n","NOME_ARQUIVO_PARES_INSTANCIAS = \"pares_medidas_entre_sentencas_vitimas_algoz.csv\"\n","# NOME_ARQUIVO_PARES_INSTANCIAS = \"pares_medidas_entre_sentencas.csv\"\n","\n","NOME_ARQUIVO_PARES_INSTANCIAS_COMPACTADO = \"pares_medidas_entre_sentencas_vitimas_algoz.zip\"\n","# NOME_ARQUIVO_PARES_INSTANCIAS_COMPACTADO = \"pares_medidas_entre_sentencas.zip\"\n","\n","nome_arquivo_FILTRADO = DIRETORIO_LOCAL + NOME_ARQUIVO_PARES_INSTANCIAS\n","\n","# Salva o arquivo original filtrado\n","list_intances_df.to_csv(nome_arquivo_FILTRADO,  sep=\";\", index=False)\n","\n"]},{"cell_type":"code","source":["del list_intances_df"],"metadata":{"id":"hTbGInhPRRs4"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"t8-eWGcqN5lJ"},"outputs":[],"source":["!zip -o -j -q \"$DIRETORIO_LOCAL$NOME_ARQUIVO_PARES_INSTANCIAS_COMPACTADO\" \"$DIRETORIO_LOCAL$NOME_ARQUIVO_PARES_INSTANCIAS\""]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VNK720oLN5lJ","executionInfo":{"status":"ok","timestamp":1669034835533,"user_tz":180,"elapsed":417,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"6ce73ff3-4eee-423a-d3aa-c19173ea8cca"},"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:root:Terminei a cópia do arquivo.\n"]}],"source":["# Se estiver executando no Google Colaboratory\n","if IN_COLAB:\n","   \n","    # Copia o arquivo das comparações para o google drive\n","    !cp \"$DIRETORIO_LOCAL$NOME_ARQUIVO_PARES_INSTANCIAS_COMPACTADO\" \"$DIRETORIO_DRIVE\"\n","    \n","    logging.info(\"Terminei a cópia do arquivo.\")\n","\n","    "]},{"cell_type":"markdown","metadata":{"id":"7YKlCCRH0ZfC"},"source":["Transforma a lista em um dataframe"]},{"cell_type":"markdown","metadata":{"id":"mNf8MJxrSa-u"},"source":["# verificar node 3.1.1 para alterar o save olhar topico 5.2.3"]},{"cell_type":"markdown","metadata":{"id":"TkncKDN1i7kq"},"source":["### 3.3.3 Carrega os dados\n","\n","Carrega os dados das documentos a partir do arquivo."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pTVxFPqg5wY_"},"outputs":[],"source":["# Import das bibliotecas.\n","import pandas as pd\n","\n","# Abre o arquivo e retorna o DataFrame\n","df_list_intances = pd.read_csv(DIRETORIO_LOCAL + NOME_ARQUIVO_PARES_INSTANCIAS, sep=\";\", encoding=\"UTF-8\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tlPKkZKz50j2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1669034886978,"user_tz":180,"elapsed":1220,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"3468fae7-7961-4a8e-eb9b-4926d75c3689"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["         sw1_id                                      sw1_documento  \\\n","1773309  205415  A mucama escrava consumara finalmente a sua obra.   \n","\n","         sw1_idOcorrencia sw1_palavraAlvo sw1_grupo            sw1_obra  \\\n","1773309                 2         escrava   escravo  As Vítimas-Algozes   \n","\n","                        sw1_autor  sw1_ano  sw1_idObra sw1_movimento  ...  \\\n","1773309  Joaquim Manuel de Macedo     1869           2    Romantismo  ...   \n","\n","                   sw2_obra                 sw2_autor  sw2_ano sw2_idObra  \\\n","1773309  As Vítimas-Algozes  Joaquim Manuel de Macedo     1869          2   \n","\n","         sw2_movimento                                       sw2_document  \\\n","1773309     Romantismo  em breve acudiram uma depois de outra três cob...   \n","\n","        sw2_length  cos_mean  euc_mean   man_mean  \n","1773309         56  0.809865  9.610778  238.86874  \n","\n","[1 rows x 27 columns]"],"text/html":["\n","  <div id=\"df-88a45871-8d5d-4ff1-b968-868515244482\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sw1_id</th>\n","      <th>sw1_documento</th>\n","      <th>sw1_idOcorrencia</th>\n","      <th>sw1_palavraAlvo</th>\n","      <th>sw1_grupo</th>\n","      <th>sw1_obra</th>\n","      <th>sw1_autor</th>\n","      <th>sw1_ano</th>\n","      <th>sw1_idObra</th>\n","      <th>sw1_movimento</th>\n","      <th>...</th>\n","      <th>sw2_obra</th>\n","      <th>sw2_autor</th>\n","      <th>sw2_ano</th>\n","      <th>sw2_idObra</th>\n","      <th>sw2_movimento</th>\n","      <th>sw2_document</th>\n","      <th>sw2_length</th>\n","      <th>cos_mean</th>\n","      <th>euc_mean</th>\n","      <th>man_mean</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1773309</th>\n","      <td>205415</td>\n","      <td>A mucama escrava consumara finalmente a sua obra.</td>\n","      <td>2</td>\n","      <td>escrava</td>\n","      <td>escravo</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","      <td>...</td>\n","      <td>As Vítimas-Algozes</td>\n","      <td>Joaquim Manuel de Macedo</td>\n","      <td>1869</td>\n","      <td>2</td>\n","      <td>Romantismo</td>\n","      <td>em breve acudiram uma depois de outra três cob...</td>\n","      <td>56</td>\n","      <td>0.809865</td>\n","      <td>9.610778</td>\n","      <td>238.86874</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1 rows × 27 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-88a45871-8d5d-4ff1-b968-868515244482')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-88a45871-8d5d-4ff1-b968-868515244482 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-88a45871-8d5d-4ff1-b968-868515244482');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":379}],"source":["df_list_intances.sample()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BdiOKmFhYsca","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1669034886978,"user_tz":180,"elapsed":36,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"5d29366c-9a84-44df-c1e3-15b83365be84"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["1249"]},"metadata":{},"execution_count":380}],"source":["len(df_list_intances['sw1_id'].unique())"]},{"cell_type":"code","source":["len(df_list_intances)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-T7Yxn0UTZxe","executionInfo":{"status":"ok","timestamp":1669034886979,"user_tz":180,"elapsed":29,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"outputId":"bfa0d480-8328-42a3-eb67-b0122b26b033"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3396616"]},"metadata":{},"execution_count":381}]},{"cell_type":"markdown","metadata":{"id":"Yj0ya60zrm8t"},"source":["# 4 Finalização"]},{"cell_type":"markdown","metadata":{"id":"Bcjt085lZGUr"},"source":["## 4.1 Tempo final de processamento\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"H50_GKJwpDha","executionInfo":{"status":"ok","timestamp":1669034886982,"user_tz":180,"elapsed":28,"user":{"displayName":"Leandro Dias","userId":"15287680885186282361"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"26d9ea26-2b4b-4c08-8d4b-eac380a828ee"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","  Tempo processamento:  0:40:45 (h:mm:ss)\n"]}],"source":["# Pega o tempo atual menos o tempo do início do processamento.\n","final_processamento = time.time()\n","tempo_total_processamento = formataTempo(final_processamento - inicio_processamento)\n","\n","print(\"\")\n","print(\"  Tempo processamento:  {:} (h:mm:ss)\".format(tempo_total_processamento))"]}],"metadata":{"colab":{"collapsed_sections":["EKOTlwcmxmej","PKUr9Vk4BNLC","GOcN8hK-scnt","iAPVtRXQqDim","_GjYtXcMnSAe","Pqa-7WXBAw8q","SUxlx7Sx4yxj","L7G3-MOsQ1N_","AEzytjZi5Iw2","onM1ZApom-_W","6ZVwbmn3Nx2t","Jxe-mh-l6sJY","m4KV_jI-Nx2w","bGaf7bkpAEiX","ZB6bR42PA28c","B4Soqt3fp3Lu","ENvsIER06sJX","b01WgMSSKY_u","TouR4GjNJZD6","_xaeX0oTVQ5t","MBGTMy8Ic7GK","uiuxdXe9t1BX","rHt4e5pAcEMd","V74WUpHqcfoI","eaneOhAKcO-3","6tKcaIfReqdy","e8n7Z5s-QZF8","-pZZrUKRhR3e","-uFDhRTZe2Js","d7KprWqyZBQZ","lCJzsw8T0I-5","s42mgtmSZ8MR","q7nx_eZ8hSlr","-rLcMuDHC-F5","zFd1rse11DpZ","3wvgXwN81RCz","kGL37G6XFcwp","L_vknrk7YSpF","JplTToZvDLiX","xKaqQPs8VQ5u","fazAuLMUr_c0","S6A6-Xwg8GJw","Usr1uRzQeJSb","Yj0ya60zrm8t","Bcjt085lZGUr"],"provenance":[{"file_id":"1q3JTcgbWA46Zih94jwddt39KFLhyntww","timestamp":1663731761602},{"file_id":"1MGqfSbWIJImPFuCcPnfbG9-XJNkYsAoP","timestamp":1663257809933},{"file_id":"1fa1ZrVSmNY6tEau6KIW0M3PxcITiS9cs","timestamp":1663065419767},{"file_id":"1ZQvuAVwA3IjybezQOXnrXMGAnMyZRuPU","timestamp":1585340447636},{"file_id":"1FsBCkREOaDopLF3PIYUuQxLR8wRfjQY1","timestamp":1559844903389},{"file_id":"1f_snPs--PVYgZJwT3GwjxqVALFJ0T2-y","timestamp":1554843110227}],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"},"widgets":{"application/vnd.jupyter.widget-state+json":{"38d99c10b1f74db8aa43e51e29c0386f":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_5512a09d3dd74acd90c441e6423c90c1","IPY_MODEL_c944b9a2fd9b429491830b659e6866c4","IPY_MODEL_6645fb462da7429ba7165139f41321cf"],"layout":"IPY_MODEL_77d0a5747dfb4c84957a1316ec33dbb2"}},"5512a09d3dd74acd90c441e6423c90c1":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_9593d1c17ebf46f2b92b6dbe7e86ff02","placeholder":"​","style":"IPY_MODEL_2c909b7520b540b096abc817858e3ebd","value":"Documentos: 100%"}},"c944b9a2fd9b429491830b659e6866c4":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_9a665d5e4c5646d2ae559300ffe37b03","max":1844,"min":0,"orientation":"horizontal","style":"IPY_MODEL_cda3430cbc164895a0150fc92ada4a35","value":1844}},"6645fb462da7429ba7165139f41321cf":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_cfc4801051a445a38750aae37a327344","placeholder":"​","style":"IPY_MODEL_5dcd717f328d4300961a652fced8506c","value":" 1844/1844 [26:24&lt;00:00,  1.48s/ documento]"}},"77d0a5747dfb4c84957a1316ec33dbb2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9593d1c17ebf46f2b92b6dbe7e86ff02":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2c909b7520b540b096abc817858e3ebd":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"9a665d5e4c5646d2ae559300ffe37b03":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"cda3430cbc164895a0150fc92ada4a35":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"cfc4801051a445a38750aae37a327344":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5dcd717f328d4300961a652fced8506c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"65ed11e1efe44ae0844e8954c1973afe":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_d7fae259685d4f2ca25ba7e3b17c0d6e","IPY_MODEL_8d40cd022cc64ebca7e3a965edb1a6e3","IPY_MODEL_33497ac1a19f4d67ad512045c36af278"],"layout":"IPY_MODEL_0ef3d37b9a9c44cca3cdc592898ef47c"}},"d7fae259685d4f2ca25ba7e3b17c0d6e":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_d674b9671b394dceaaef88e0a4a4e53e","placeholder":"​","style":"IPY_MODEL_b43e1cb5ba0543898d0dd40b879ce9b9","value":"Documentos: 100%"}},"8d40cd022cc64ebca7e3a965edb1a6e3":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_ad9bdef7fb1c451ea73dbdea93048d08","max":1843,"min":0,"orientation":"horizontal","style":"IPY_MODEL_add05684008547c19fde420d0e24b869","value":1843}},"33497ac1a19f4d67ad512045c36af278":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_ec9f2fba4ecc40519cc0c6f4b33b0880","placeholder":"​","style":"IPY_MODEL_f1f2738506d74c4c8204ac68db96968b","value":" 1843/1843 [09:15&lt;00:00, 115.32 documento/s]"}},"0ef3d37b9a9c44cca3cdc592898ef47c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d674b9671b394dceaaef88e0a4a4e53e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b43e1cb5ba0543898d0dd40b879ce9b9":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ad9bdef7fb1c451ea73dbdea93048d08":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"add05684008547c19fde420d0e24b869":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"ec9f2fba4ecc40519cc0c6f4b33b0880":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f1f2738506d74c4c8204ac68db96968b":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"nbformat":4,"nbformat_minor":0}